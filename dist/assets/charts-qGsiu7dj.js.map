{"version":3,"file":"charts-qGsiu7dj.js","sources":["../../src/hooks/useChartTheme.ts","../../src/components/RevenueChart.tsx","../../src/components/ExpensePieChart.tsx","../../src/components/CashFlowChart.tsx"],"sourcesContent":["import { useTheme } from './useTheme';\r\n\r\nexport const useChartTheme = () => {\r\n  const { resolvedTheme } = useTheme();\r\n\r\n  const colors = {\r\n    primary: resolvedTheme === 'dark' ? '#60a5fa' : '#3b82f6',\r\n    secondary: resolvedTheme === 'dark' ? '#a78bfa' : '#8b5cf6',\r\n    success: resolvedTheme === 'dark' ? '#4ade80' : '#10b981',\r\n    danger: resolvedTheme === 'dark' ? '#f87171' : '#ef4444',\r\n    warning: resolvedTheme === 'dark' ? '#fbbf24' : '#f59e0b',\r\n    info: resolvedTheme === 'dark' ? '#38bdf8' : '#0ea5e9',\r\n  };\r\n\r\n  const chartTheme = {\r\n    colors,\r\n    grid: {\r\n      stroke: resolvedTheme === 'dark' ? '#374151' : '#f1f5f9',\r\n    },\r\n    axis: {\r\n      stroke: resolvedTheme === 'dark' ? '#9ca3af' : '#64748b',\r\n    },\r\n    tooltip: {\r\n      backgroundColor: resolvedTheme === 'dark' ? '#1f2937' : '#ffffff',\r\n      border: resolvedTheme === 'dark' ? '#374151' : '#e5e7eb',\r\n      textColor: resolvedTheme === 'dark' ? '#f9fafb' : '#111827',\r\n      shadowColor: resolvedTheme === 'dark' ? 'rgba(0, 0, 0, 0.3)' : 'rgba(0, 0, 0, 0.1)',\r\n    },\r\n    legend: {\r\n      color: resolvedTheme === 'dark' ? '#d1d5db' : '#6b7280',\r\n    },\r\n  };\r\n\r\n  return { chartTheme, resolvedTheme };\r\n};\r\n","import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { RevenueData } from '../types/finance';\nimport { formatCurrency } from '../utils/formatters';\nimport { useChartTheme } from '../hooks/useChartTheme';\n\ninterface RevenueChartProps {\n  data: RevenueData[];\n}\n\nconst RevenueChart: React.FC<RevenueChartProps> = ({ data }) => {\n  const { chartTheme } = useChartTheme();\n  \n  if (!data || data.length === 0) {\n    return (\n      <div className=\"card\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Revenue & Expenses Trend</h2>\n        </div>\n        <div className=\"h-80 flex items-center justify-center\">\n          <div className=\"text-center text-gray-500 dark:text-gray-400\">\n            <svg className=\"w-16 h-16 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n            </svg>\n            <p className=\"text-lg font-medium mb-2\">No Data Available</p>\n            <p className=\"text-sm\">There is no revenue data to display for the selected period.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  interface TooltipPayload {\n    name: string;\n    value: number;\n    color: string;\n  }\n\n  interface CustomTooltipProps {\n    active?: boolean;\n    payload?: TooltipPayload[];\n    label?: string;\n  }\n\n  const CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {\n    if (active && payload && payload.length) {\n      return (\n        <div \n          className=\"p-4 rounded-lg shadow-lg border backdrop-blur-sm\"\n          style={{ \n            backgroundColor: chartTheme.tooltip.backgroundColor,\n            borderColor: chartTheme.tooltip.border,\n            color: chartTheme.tooltip.textColor,\n            boxShadow: `0 10px 15px -3px ${chartTheme.tooltip.shadowColor}`\n          }}\n        >\n          <p className=\"font-medium mb-2\" style={{ color: chartTheme.tooltip.textColor }}>\n            {`${label} 2024`}\n          </p>\n          {payload.map((entry, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {`${entry.name}: ${formatCurrency(entry.value)}`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Revenue & Expenses Trend</h2>\n      </div>\n      \n      <div className=\"h-64 sm:h-80 lg:h-96\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke={chartTheme.grid.stroke} />\n            <XAxis \n              dataKey=\"month\" \n              stroke={chartTheme.axis.stroke}\n              fontSize={12}\n            />\n            <YAxis \n              stroke={chartTheme.axis.stroke}\n              fontSize={12}\n              tickFormatter={(value) => `$${(value / 1000000).toFixed(1)}M`}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend \n              wrapperStyle={{ color: chartTheme.legend.color }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"revenue\" \n              stroke={chartTheme.colors.primary} \n              strokeWidth={3}\n              name=\"Revenue\"\n              dot={{ fill: chartTheme.colors.primary, strokeWidth: 0, r: 4 }}\n              activeDot={{ r: 6, fill: chartTheme.colors.primary, stroke: 'white', strokeWidth: 2 }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"expenses\" \n              stroke={chartTheme.colors.danger} \n              strokeWidth={3}\n              name=\"Expenses\"\n              dot={{ fill: chartTheme.colors.danger, strokeWidth: 0, r: 4 }}\n              activeDot={{ r: 6, fill: chartTheme.colors.danger, stroke: 'white', strokeWidth: 2 }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"netIncome\" \n              stroke={chartTheme.colors.success} \n              strokeWidth={3}\n              name=\"Net Income\"\n              dot={{ fill: chartTheme.colors.success, strokeWidth: 0, r: 4 }}\n              activeDot={{ r: 6, fill: chartTheme.colors.success, stroke: 'white', strokeWidth: 2 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default RevenueChart;\n","import React from 'react';\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';\nimport { ExpenseBreakdown } from '../types/finance';\nimport { formatCurrency, formatPercentage } from '../utils/formatters';\nimport { useChartTheme } from '../hooks/useChartTheme';\n\ninterface ExpensePieChartProps {\n  data: ExpenseBreakdown[];\n}\n\nconst ExpensePieChart: React.FC<ExpensePieChartProps> = ({ data }) => {\n  const { chartTheme } = useChartTheme();\n  \n  if (!data || data.length === 0) {\n    return (\n      <div className=\"card\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Expense Breakdown</h2>\n        </div>\n        <div className=\"h-80 flex items-center justify-center\">\n          <div className=\"text-center text-gray-500 dark:text-gray-400\">\n            <svg className=\"w-16 h-16 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z\" />\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z\" />\n            </svg>\n            <p className=\"text-lg font-medium mb-2\">No Data Available</p>\n            <p className=\"text-sm\">There is no expense data to display for the selected period.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (data.reduce((sum, item) => sum + item.amount, 0) === 0) {\n    return (\n      <div className=\"card\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Expense Breakdown</h2>\n        </div>\n        <div className=\"h-80 flex items-center justify-center\">\n          <div className=\"text-center text-gray-500 dark:text-gray-400\">\n            <svg className=\"w-16 h-16 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            <p className=\"text-lg font-medium mb-2\">Zero Expenses</p>\n            <p className=\"text-sm\">No expenses have been recorded for the selected period.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  interface TooltipPayload {\n    payload: ExpenseBreakdown;\n  }\n\n  interface CustomTooltipProps {\n    active?: boolean;\n    payload?: TooltipPayload[];\n  }\n\n  interface LegendPayload {\n    value: string;\n    color: string;\n  }\n\n  interface CustomLegendProps {\n    payload?: LegendPayload[];\n  }\n\n  const CustomTooltip = ({ active, payload }: CustomTooltipProps) => {\n    if (active && payload?.[0]?.payload) {\n      const data = payload[0].payload;\n      return (\n        <div \n          className=\"p-4 rounded-lg shadow-lg border backdrop-blur-sm\"\n          style={{ \n            backgroundColor: chartTheme.tooltip.backgroundColor,\n            borderColor: chartTheme.tooltip.border,\n            color: chartTheme.tooltip.textColor,\n            boxShadow: `0 10px 15px -3px ${chartTheme.tooltip.shadowColor}`\n          }}\n        >\n          <p className=\"font-medium mb-1\" style={{ color: chartTheme.tooltip.textColor }}>\n            {data.category}\n          </p>\n          <p className=\"text-sm\" style={{ color: chartTheme.tooltip.textColor }}>\n            Amount: {formatCurrency(data.amount)}\n          </p>\n          <p className=\"text-sm\" style={{ color: chartTheme.tooltip.textColor }}>\n            Percentage: {formatPercentage(data.percentage)}\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const CustomLegend = ({ payload }: CustomLegendProps) => {\n    if (!payload) return null;\n    \n    return (\n      <div className=\"mt-4\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 text-sm\">\n          {data.map((item, index: number) => (\n            <div key={index} className=\"flex items-center\">\n              <div \n                className=\"w-3 h-3 rounded-full mr-2 flex-shrink-0\"\n                style={{ backgroundColor: item.color }}\n              ></div>\n              <span className=\"text-gray-700 dark:text-gray-300 truncate\">{item.category}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Expense Breakdown</h2>\n        <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n          Total: {formatCurrency(data.reduce((sum, item) => sum + item.amount, 0))}\n        </div>\n      </div>\n      \n      <div className=\"h-80 sm:h-96\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <PieChart margin={{ top: 5, right: 0, bottom: 5, left: 0 }}>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              outerRadius=\"95%\"\n              innerRadius=\"47%\"\n              paddingAngle={2}\n              dataKey=\"amount\"\n            >\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Pie>\n            <Tooltip content={<CustomTooltip />} />\n            <Legend content={<CustomLegend />} />\n          </PieChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default ExpensePieChart;\n","import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { CashFlowData } from '../types/finance';\nimport { formatCurrency } from '../utils/formatters';\nimport { useChartTheme } from '../hooks/useChartTheme';\n\ninterface CashFlowChartProps {\n  data: CashFlowData[];\n}\n\nconst CashFlowChart: React.FC<CashFlowChartProps> = ({ data }) => {\n  const { chartTheme } = useChartTheme();\n  interface TooltipPayload {\n    name: string;\n    value: number;\n    color: string;\n  }\n\n  interface CustomTooltipProps {\n    active?: boolean;\n    payload?: TooltipPayload[];\n    label?: string;\n  }\n\n  const CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {\n    if (active && payload && payload.length) {\n      return (\n        <div \n          className=\"p-4 rounded-lg shadow-lg border backdrop-blur-sm\"\n          style={{ \n            backgroundColor: chartTheme.tooltip.backgroundColor,\n            borderColor: chartTheme.tooltip.border,\n            color: chartTheme.tooltip.textColor,\n            boxShadow: `0 10px 15px -3px ${chartTheme.tooltip.shadowColor}`\n          }}\n        >\n          <p className=\"font-medium mb-2\" style={{ color: chartTheme.tooltip.textColor }}>{label}</p>\n          {payload.map((entry, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {`${entry.name}: ${formatCurrency(entry.value)}`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Cash Flow Analysis</h2>\n      </div>\n      \n      <div className=\"h-64 sm:h-80\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke={chartTheme.grid.stroke} />\n            <XAxis \n              dataKey=\"date\" \n              stroke={chartTheme.axis.stroke}\n              fontSize={12}\n            />\n            <YAxis \n              stroke={chartTheme.axis.stroke}\n              fontSize={12}\n              tickFormatter={(value) => `$${(value / 1000000).toFixed(1)}M`}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend \n              wrapperStyle={{ color: chartTheme.legend.color }}\n            />\n            <Bar \n              dataKey=\"operatingCashFlow\" \n              fill={chartTheme.colors.primary} \n              name=\"Operating\"\n              radius={[2, 2, 0, 0]}\n            />\n            <Bar \n              dataKey=\"investingCashFlow\" \n              fill={chartTheme.colors.warning} \n              name=\"Investing\"\n              radius={[2, 2, 0, 0]}\n            />\n            <Bar \n              dataKey=\"financingCashFlow\" \n              fill={chartTheme.colors.secondary} \n              name=\"Financing\"\n              radius={[2, 2, 0, 0]}\n            />\n            <Bar \n              dataKey=\"netCashFlow\" \n              fill={chartTheme.colors.success} \n              name=\"Net Cash Flow\"\n              radius={[2, 2, 0, 0]}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n};\n\nexport default CashFlowChart;\n"],"names":["useChartTheme","resolvedTheme","useTheme","chartTheme","colors","primary","secondary","success","danger","warning","info","grid","stroke","axis","tooltip","backgroundColor","border","textColor","shadowColor","legend","color","RevenueChart","data","length","jsxs","className","children","jsx","fill","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","CustomTooltip","active","payload","label","style","borderColor","boxShadow","map","entry","index","name","formatCurrency","value","ResponsiveContainer","width","height","LineChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","fontSize","YAxis","tickFormatter","toFixed","Tooltip","content","Legend","wrapperStyle","Line","type","dot","r","activeDot","ExpensePieChart","reduce","sum","item","amount","category","formatPercentage","percentage","CustomLegend","PieChart","Pie","cx","cy","outerRadius","innerRadius","paddingAngle","Cell","CashFlowChart","BarChart","Bar","radius"],"mappings":"qOAEO,MAAMA,EAAgB,KAC3B,MAAMC,cAAEA,GAAkBC,IA8B1B,MAAO,CAAEC,WAnBU,CACjBC,OAVa,CACbC,QAA2B,SAAlBJ,EAA2B,UAAY,UAChDK,UAA6B,SAAlBL,EAA2B,UAAY,UAClDM,QAA2B,SAAlBN,EAA2B,UAAY,UAChDO,OAA0B,SAAlBP,EAA2B,UAAY,UAC/CQ,QAA2B,SAAlBR,EAA2B,UAAY,UAChDS,KAAwB,SAAlBT,EAA2B,UAAY,WAK7CU,KAAM,CACJC,OAA0B,SAAlBX,EAA2B,UAAY,WAEjDY,KAAM,CACJD,OAA0B,SAAlBX,EAA2B,UAAY,WAEjDa,QAAS,CACPC,gBAAmC,SAAlBd,EAA2B,UAAY,UACxDe,OAA0B,SAAlBf,EAA2B,UAAY,UAC/CgB,UAA6B,SAAlBhB,EAA2B,UAAY,UAClDiB,YAA+B,SAAlBjB,EAA2B,qBAAuB,sBAEjEkB,OAAQ,CACNC,MAAyB,SAAlBnB,EAA2B,UAAY,YAI7BA,kBCvBjBoB,EAA4C,EAAGC,WACnD,MAAMnB,WAAEA,GAAeH,IAEvB,IAAKsB,GAAwB,IAAhBA,EAAKC,OAChB,OACEC,EAAAA,KAAC,MAAA,CAAIC,UAAU,OACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,yCACbC,SAAAC,EAAAA,IAAC,MAAGF,UAAU,sDAAsDC,8CAErE,MAAA,CAAID,UAAU,wCACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,+CACbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,yBAAyBG,KAAK,OAAOhB,OAAO,eAAeiB,QAAQ,YAChFH,eAAC,OAAA,CAAKI,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,2MAEvEN,EAAAA,IAAC,IAAA,CAAEF,UAAU,2BAA2BC,SAAA,sBACxCC,EAAAA,IAAC,IAAA,CAAEF,UAAU,UAAUC,SAAA,yEAmBjC,MAAMQ,EAAgB,EAAGC,SAAQC,UAASC,WACpCF,GAAUC,GAAWA,EAAQb,OAE7BC,EAAAA,KAAC,MAAA,CACCC,UAAU,mDACVa,MAAO,CACLvB,gBAAiBZ,EAAWW,QAAQC,gBACpCwB,YAAapC,EAAWW,QAAQE,OAChCI,MAAOjB,EAAWW,QAAQG,UAC1BuB,UAAW,oBAAoBrC,EAAWW,QAAQI,eAGpDQ,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,mBAAmBa,MAAO,CAAElB,MAAOjB,EAAWW,QAAQG,WAChES,SAAA,GAAGW,WAELD,EAAQK,IAAI,CAACC,EAAOC,UAClB,IAAA,CAAclB,UAAU,UAAUa,MAAO,CAAElB,MAAOsB,EAAMtB,OACtDM,SAAA,GAAGgB,EAAME,SAASC,EAAeH,EAAMI,UADlCH,OAOT,KAGT,OACEnB,EAAAA,KAAC,MAAA,CAAIC,UAAU,OACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,yCACbC,SAAAC,EAAAA,IAAC,MAAGF,UAAU,sDAAsDC,wCAGtEC,EAAAA,IAAC,OAAIF,UAAU,uBACbC,eAACqB,EAAA,CAAoBC,MAAM,OAAOC,OAAO,OACvCvB,SAAAF,EAAAA,KAAC0B,GAAU5B,OAAY6B,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GACpE7B,SAAA,CAAAC,MAAC6B,GAAcC,gBAAgB,MAAM7C,OAAQT,EAAWQ,KAAKC,SAC7De,EAAAA,IAAC+B,EAAA,CACCC,QAAQ,QACR/C,OAAQT,EAAWU,KAAKD,OACxBgD,SAAU,KAEZjC,EAAAA,IAACkC,EAAA,CACCjD,OAAQT,EAAWU,KAAKD,OACxBgD,SAAU,GACVE,cAAgBhB,GAAU,KAAKA,EAAQ,KAASiB,QAAQ,QAE1DpC,EAAAA,IAACqC,EAAA,CAAQC,QAAStC,EAAAA,IAACO,QACnBP,EAAAA,IAACuC,EAAA,CACCC,aAAc,CAAE/C,MAAOjB,EAAWgB,OAAOC,SAE3CO,EAAAA,IAACyC,EAAA,CACCC,KAAK,WACLV,QAAQ,UACR/C,OAAQT,EAAWC,OAAOC,QAC1B2B,YAAa,EACbY,KAAK,UACL0B,IAAK,CAAE1C,KAAMzB,EAAWC,OAAOC,QAAS2B,YAAa,EAAGuC,EAAG,GAC3DC,UAAW,CAAED,EAAG,EAAG3C,KAAMzB,EAAWC,OAAOC,QAASO,OAAQ,QAASoB,YAAa,KAEpFL,EAAAA,IAACyC,EAAA,CACCC,KAAK,WACLV,QAAQ,WACR/C,OAAQT,EAAWC,OAAOI,OAC1BwB,YAAa,EACbY,KAAK,WACL0B,IAAK,CAAE1C,KAAMzB,EAAWC,OAAOI,OAAQwB,YAAa,EAAGuC,EAAG,GAC1DC,UAAW,CAAED,EAAG,EAAG3C,KAAMzB,EAAWC,OAAOI,OAAQI,OAAQ,QAASoB,YAAa,KAEnFL,EAAAA,IAACyC,EAAA,CACCC,KAAK,WACLV,QAAQ,YACR/C,OAAQT,EAAWC,OAAOG,QAC1ByB,YAAa,EACbY,KAAK,aACL0B,IAAK,CAAE1C,KAAMzB,EAAWC,OAAOG,QAASyB,YAAa,EAAGuC,EAAG,GAC3DC,UAAW,CAAED,EAAG,EAAG3C,KAAMzB,EAAWC,OAAOG,QAASK,OAAQ,QAASoB,YAAa,gBC7G1FyC,EAAkD,EAAGnD,WACzD,MAAMnB,WAAEA,GAAeH,IAEvB,IAAKsB,GAAwB,IAAhBA,EAAKC,OAChB,OACEC,EAAAA,KAAC,MAAA,CAAIC,UAAU,OACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,yCACbC,SAAAC,EAAAA,IAAC,MAAGF,UAAU,sDAAsDC,uCAErE,MAAA,CAAID,UAAU,wCACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,+CACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yBAAyBG,KAAK,OAAOhB,OAAO,eAAeiB,QAAQ,YAChFH,SAAA,CAAAC,EAAAA,IAAC,OAAA,CAAKG,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,kDACrEN,EAAAA,IAAC,QAAKG,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,oDAEvEN,EAAAA,IAAC,IAAA,CAAEF,UAAU,2BAA2BC,SAAA,sBACxCC,EAAAA,IAAC,IAAA,CAAEF,UAAU,UAAUC,SAAA,yEAOjC,GAAyD,IAArDJ,EAAKoD,OAAO,CAACC,EAAKC,IAASD,EAAMC,EAAKC,OAAQ,GAChD,OACErD,EAAAA,KAAC,MAAA,CAAIC,UAAU,OACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,yCACbC,SAAAC,EAAAA,IAAC,MAAGF,UAAU,sDAAsDC,uCAErE,MAAA,CAAID,UAAU,wCACbC,SAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,+CACbC,SAAA,CAAAC,EAAAA,IAAC,OAAIF,UAAU,yBAAyBG,KAAK,OAAOhB,OAAO,eAAeiB,QAAQ,YAChFH,eAAC,OAAA,CAAKI,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,kLAEvEN,EAAAA,IAAC,IAAA,CAAEF,UAAU,2BAA2BC,SAAA,kBACxCC,EAAAA,IAAC,IAAA,CAAEF,UAAU,UAAUC,SAAA,oEAyBjC,MAAMQ,EAAgB,EAAGC,SAAQC,cAC/B,GAAID,GAAUC,IAAU,IAAIA,QAAS,CACnC,MAAMd,EAAOc,EAAQ,GAAGA,QACxB,OACEZ,EAAAA,KAAC,MAAA,CACCC,UAAU,mDACVa,MAAO,CACLvB,gBAAiBZ,EAAWW,QAAQC,gBACpCwB,YAAapC,EAAWW,QAAQE,OAChCI,MAAOjB,EAAWW,QAAQG,UAC1BuB,UAAW,oBAAoBrC,EAAWW,QAAQI,eAGpDQ,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,mBAAmBa,MAAO,CAAElB,MAAOjB,EAAWW,QAAQG,WAChES,SAAAJ,EAAKwD,WAERtD,EAAAA,KAAC,IAAA,CAAEC,UAAU,UAAUa,MAAO,CAAElB,MAAOjB,EAAWW,QAAQG,WAAaS,SAAA,CAAA,WAC5DmB,EAAevB,EAAKuD,WAE/BrD,EAAAA,KAAC,IAAA,CAAEC,UAAU,UAAUa,MAAO,CAAElB,MAAOjB,EAAWW,QAAQG,WAAaS,SAAA,CAAA,eACxDqD,EAAiBzD,EAAK0D,iBAI3C,CACA,OAAO,MAGHC,EAAe,EAAG7C,aACjBA,QAGF,MAAA,CAAIX,UAAU,OACbC,SAAAC,MAAC,OAAIF,UAAU,gDACZC,SAAAJ,EAAKmB,IAAI,CAACmC,EAAMjC,IACfnB,OAAC,MAAA,CAAgBC,UAAU,oBACzBC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CACCF,UAAU,0CACVa,MAAO,CAAEvB,gBAAiB6D,EAAKxD,SAEjCO,EAAAA,IAAC,OAAA,CAAKF,UAAU,4CAA6CC,WAAKoD,aAL1DnC,QANG,KAmBvB,OACEnB,EAAAA,KAAC,MAAA,CAAIC,UAAU,OACbC,SAAA,CAAAF,EAAAA,KAAC,MAAA,CAAIC,UAAU,yCACbC,SAAA,CAAAC,EAAAA,IAAC,KAAA,CAAGF,UAAU,sDAAsDC,SAAA,sBACpEF,EAAAA,KAAC,MAAA,CAAIC,UAAU,2CAA2CC,SAAA,CAAA,UAChDmB,EAAevB,EAAKoD,OAAO,CAACC,EAAKC,IAASD,EAAMC,EAAKC,OAAQ,UAIzElD,EAAAA,IAAC,OAAIF,UAAU,eACbC,eAACqB,EAAA,CAAoBC,MAAM,OAAOC,OAAO,OACvCvB,SAAAF,OAAC0D,GAAS/B,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGE,OAAQ,EAAGD,KAAM,GACrD5B,SAAA,CAAAC,EAAAA,IAACwD,EAAA,CACC7D,OACA8D,GAAG,MACHC,GAAG,MACHC,YAAY,MACZC,YAAY,MACZC,aAAc,EACd7B,QAAQ,SAEPjC,SAAAJ,EAAKmB,IAAI,CAACC,EAAOC,IAChBhB,EAAAA,IAAC8D,EAAA,CAA2B7D,KAAMc,EAAMtB,OAA7B,QAAQuB,QAGvBhB,EAAAA,IAACqC,EAAA,CAAQC,QAAStC,EAAAA,IAACO,QACnBP,EAAAA,IAACuC,EAAA,CAAOD,QAAStC,EAAAA,IAACsD,mBCtIxBS,EAA8C,EAAGpE,WACrD,MAAMnB,WAAEA,GAAeH,IAajBkC,EAAgB,EAAGC,SAAQC,UAASC,WACpCF,GAAUC,GAAWA,EAAQb,OAE7BC,EAAAA,KAAC,MAAA,CACCC,UAAU,mDACVa,MAAO,CACLvB,gBAAiBZ,EAAWW,QAAQC,gBACpCwB,YAAapC,EAAWW,QAAQE,OAChCI,MAAOjB,EAAWW,QAAQG,UAC1BuB,UAAW,oBAAoBrC,EAAWW,QAAQI,eAGpDQ,SAAA,CAAAC,EAAAA,IAAC,IAAA,CAAEF,UAAU,mBAAmBa,MAAO,CAAElB,MAAOjB,EAAWW,QAAQG,WAAcS,SAAAW,IAChFD,EAAQK,IAAI,CAACC,EAAOC,UAClB,IAAA,CAAclB,UAAU,UAAUa,MAAO,CAAElB,MAAOsB,EAAMtB,OACtDM,SAAA,GAAGgB,EAAME,SAASC,EAAeH,EAAMI,UADlCH,OAOT,KAGT,OACEnB,EAAAA,KAAC,MAAA,CAAIC,UAAU,OACbC,SAAA,CAAAC,EAAAA,IAAC,MAAA,CAAIF,UAAU,yCACbC,SAAAC,EAAAA,IAAC,MAAGF,UAAU,sDAAsDC,kCAGtEC,EAAAA,IAAC,OAAIF,UAAU,eACbC,eAACqB,EAAA,CAAoBC,MAAM,OAAOC,OAAO,OACvCvB,SAAAF,EAAAA,KAACmE,GAASrE,OAAY6B,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GACpE7B,SAAA,CAAAC,MAAC6B,GAAcC,gBAAgB,MAAM7C,OAAQT,EAAWQ,KAAKC,SAC7De,EAAAA,IAAC+B,EAAA,CACCC,QAAQ,OACR/C,OAAQT,EAAWU,KAAKD,OACxBgD,SAAU,KAEZjC,EAAAA,IAACkC,EAAA,CACCjD,OAAQT,EAAWU,KAAKD,OACxBgD,SAAU,GACVE,cAAgBhB,GAAU,KAAKA,EAAQ,KAASiB,QAAQ,QAE1DpC,EAAAA,IAACqC,EAAA,CAAQC,QAAStC,EAAAA,IAACO,QACnBP,EAAAA,IAACuC,EAAA,CACCC,aAAc,CAAE/C,MAAOjB,EAAWgB,OAAOC,SAE3CO,EAAAA,IAACiE,EAAA,CACCjC,QAAQ,oBACR/B,KAAMzB,EAAWC,OAAOC,QACxBuC,KAAK,YACLiD,OAAQ,CAAC,EAAG,EAAG,EAAG,KAEpBlE,EAAAA,IAACiE,EAAA,CACCjC,QAAQ,oBACR/B,KAAMzB,EAAWC,OAAOK,QACxBmC,KAAK,YACLiD,OAAQ,CAAC,EAAG,EAAG,EAAG,KAEpBlE,EAAAA,IAACiE,EAAA,CACCjC,QAAQ,oBACR/B,KAAMzB,EAAWC,OAAOE,UACxBsC,KAAK,YACLiD,OAAQ,CAAC,EAAG,EAAG,EAAG,KAEpBlE,EAAAA,IAACiE,EAAA,CACCjC,QAAQ,cACR/B,KAAMzB,EAAWC,OAAOG,QACxBqC,KAAK,gBACLiD,OAAQ,CAAC,EAAG,EAAG,EAAG"}