{"version":3,"mappings":"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","names":["Dropdown","options","value","onChange","placeholder","className","isOpen","setIsOpen","useState","dropdownRef","useRef","selectedOption","find","option","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","jsxs","ref","children","jsx","type","onClick","label","subtitle","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","role","map","handleOptionClick","optionValue","ThemeContext","createContext","ThemeProvider","theme","setThemeState","resolvedTheme","setResolvedTheme","getSystemTheme","useCallback","window","matchMedia","matches","applyTheme","newResolvedTheme","root","documentElement","classList","add","remove","setTimeout","resolveTheme","themeValue","initialTheme","localStorage","getItem","initialResolvedTheme","mediaQuery","handleChange","e","systemTheme","setTheme","newTheme","setItem","toggleTheme","Provider","useTheme","context","useContext","Error","ThemeToggle","size","iconSize","sm","md","lg","title","validatePassword","password","errors","length","push","test","isValid","mockUsers","id","email","name","createdAt","lastLogin","hospitalIds","hospitalId","roleDescriptions","admin","description","permissions","hospital_owner","branch_owner","logger","isDev","formatMessage","level","message","timestamp","Date","toISOString","toUpperCase","log","this","handleProductionError","data","info","warn","error","hospitals","location","availableYears","generateVariation","baseValue","variationPercent","variation","Math","round","random","hospitalDataByYear","forEach","hospital","year","baseMultiplier","hospitalData","lastUpdated","toLocaleDateString","month","day","financialMetrics","change","changeType","period","format","revenueData","revenue","expenses","netIncome","departmentFinances","emergencyRevenue","emergencyExpenses","emergencyProfit","department","profit","profitMargin","surgeryRevenue","surgeryExpenses","surgeryProfit","cardiologyRevenue","cardiologyExpenses","cardiologyProfit","deptRevenue","deptExpenses","deptProfit","orthoRevenue","orthoExpenses","orthoProfit","patientMetrics","totalPatients","inpatients","outpatients","emergencyVisits","averageStayDuration","occupancyRate","expenseBreakdown","salariesAmount","suppliesAmount","equipmentAmount","utilitiesAmount","maintenanceAmount","otherAmount","totalAmount","category","amount","percentage","color","cashFlowData","date","operatingCashFlow","investingCashFlow","financingCashFlow","netCashFlow","AuthContext","AuthProvider","user","setUser","isLoading","setIsLoading","storedUser","parsedUser","JSON","parse","removeItem","isAuthenticated","signIn","async","userData","Promise","resolve","passwordValidation","u","attemptKey","attempts","parseInt","lockoutTime","now","includes","toString","authService","stringify","signUp","newUser","signOut","userId","canAccessHospital","getAccessibleHospitals","h","useAuth","Header","selectedHospitalId","selectedYear","onHospitalChange","onYearChange","isMobileMenuOpen","setIsMobileMenuOpen","body","style","overflow","hospitalOptions","yearOptions","selectedHospital","split","n","join","replace","formatCurrency","Intl","NumberFormat","currency","minimumFractionDigits","maximumFractionDigits","formatPercentage","toFixed","formatNumber","getChangeIcon","MetricCard","metric","formatValue","Button","variant","fullWidth","disabled","props","combinedClasses","primary","secondary","danger","ghost","Fragment","LoadingSpinner","text","subtext","spinnerSize","DashboardLoading","DashboardNoData","RevenueChart","lazy","__vitePreload","import","__VITE_PRELOAD__","ExpensePieChart","CashFlowChart","PatientMetricsCard","DepartmentTable","Dashboard","accessibleHospitals","filteredHospitals","useMemo","filter","setSelectedHospitalId","setSelectedYear","currentData","setCurrentData","showFilters","setShowFilters","timeout","clearTimeout","handleHospitalChange","handleYearChange","previousYear","Suspense","fallback","metrics","departments","ErrorBoundary","Component","state","hasError","getDerivedStateFromError","componentDidCatch","errorInfo","stack","componentStack","setState","render","reload","demoAccounts","Input","isPasswordVisible","setIsPasswordVisible","isPassword","currentType","htmlFor","Card","SignInPage","onSwitchToSignUp","setEmail","setPassword","errorMessage","setErrorMessage","account","index","fillDemo","onSubmit","preventDefault","validation","formatAuthError","required","SignUpPage","onSwitchToSignIn","formData","setFormData","confirmPassword","setError","handleInputChange","field","prev","signUpData","err","keys","checked","handleHospitalSelection","AuthWrapper","isSignUp","setIsSignUp","App","ReactDOM","createRoot","getElementById","React","StrictMode"],"ignoreList":[],"sources":["../../src/components/Dropdown.tsx","../../src/contexts/ThemeContext.tsx","../../src/hooks/useTheme.ts","../../src/components/ThemeToggle.tsx","../../src/utils/auth.ts","../../src/data/mockUsers.ts","../../src/utils/logger.ts","../../src/data/mockData.ts","../../src/contexts/AuthContext.tsx","../../src/hooks/useAuth.ts","../../src/components/Header.tsx","../../src/utils/formatters.ts","../../src/components/MetricCard.tsx","../../src/components/Button.tsx","../../src/components/LoadingSpinner.tsx","../../src/components/DashboardLoading.tsx","../../src/components/DashboardNoData.tsx","../../src/components/Dashboard.tsx","../../src/components/ErrorBoundary.tsx","../../src/config/demo.ts","../../src/components/ui/Input.tsx","../../src/components/ui/Card.tsx","../../src/components/auth/SignInPage.tsx","../../src/components/auth/SignUpPage.tsx","../../src/components/auth/AuthWrapper.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\ninterface DropdownOption {\n  value: string;\n  label: string;\n  subtitle?: string;\n}\n\ninterface DropdownProps {\n  options: DropdownOption[];\n  value: string;\n  onChange: (value: string) => void;\n  placeholder: string;\n  className?: string;\n}\n\nconst Dropdown: React.FC<DropdownProps> = ({ \n  options, \n  value, \n  onChange, \n  placeholder, \n  className = '' \n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const selectedOption = options.find(option => option.value === value);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const handleOptionClick = (optionValue: string) => {\n    onChange(optionValue);\n    setIsOpen(false);\n  };\n\n  const handleToggle = () => {\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <div \n      ref={dropdownRef} \n      className={`relative ${className}`}\n    >\n      <button\n        type=\"button\"\n        className=\"w-full bg-white dark:bg-dark-surface border border-gray-300 dark:border-dark-border rounded-lg px-4 py-3 text-left shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 hover:border-gray-400 dark:hover:border-gray-500 transition-all duration-200 transform hover:-translate-y-0.5\"\n        onClick={handleToggle}\n        aria-haspopup=\"listbox\"\n        aria-expanded={isOpen}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"min-w-0 flex-1\">\n            {selectedOption ? (\n              <div className=\"min-w-0\">\n                <div className=\"font-medium text-gray-900 dark:text-white truncate\">{selectedOption.label}</div>\n                {selectedOption.subtitle && (\n                  <div className=\"text-sm text-gray-500 dark:text-gray-400 truncate\">{selectedOption.subtitle}</div>\n                )}\n              </div>\n            ) : (\n              <span className=\"text-gray-500 dark:text-gray-400 truncate\">{placeholder}</span>\n            )}\n          </div>\n          <div className=\"ml-2 flex-shrink-0\">\n            <svg\n              className={`w-4 h-4 text-gray-400 dark:text-gray-500 transition-transform duration-200 ${\n                isOpen ? 'transform rotate-180' : ''\n              }`}\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n            </svg>\n          </div>\n        </div>\n      </button>\n\n      <div \n        className={`absolute w-full mt-1 bg-white dark:bg-dark-surface border border-gray-200 dark:border-dark-border rounded-lg shadow-2xl max-h-60 overflow-auto transition-all duration-300 ease-in-out z-50 ${\n          isOpen ? 'opacity-100 translate-y-0' : 'opacity-0 -translate-y-2 pointer-events-none'\n        }`}\n        role=\"listbox\"\n      >\n        {options.map((option) => (\n            <button\n              key={option.value}\n              type=\"button\"\n              className={`w-full text-left px-4 py-3 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:bg-gray-50 dark:focus:bg-gray-700 transition-colors duration-150 ${\n                option.value === value ? 'bg-primary-50 dark:bg-primary-900/20 border-r-2 border-primary-500' : ''\n              }`}\n              onClick={() => handleOptionClick(option.value)}\n            >\n              <div className=\"min-w-0\">\n                <div className=\"font-medium text-gray-900 dark:text-white truncate\">{option.label}</div>\n                {option.subtitle && (\n                  <div className=\"text-sm text-gray-500 dark:text-gray-400 mt-1 truncate\">{option.subtitle}</div>\n                )}\n              </div>\n            </button>\n          ))}\n        </div>\n    </div>\n  );\n};\n\nexport default Dropdown;\n","import React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport { Theme, ThemeContextType, ResolvedTheme } from '../types/theme';\r\n\r\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\ninterface ThemeProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n  const [theme, setThemeState] = useState<Theme>('auto');\r\n  const [resolvedTheme, setResolvedTheme] = useState<ResolvedTheme>('light');\r\n\r\n  // Get system preference\r\n  const getSystemTheme = useCallback((): ResolvedTheme => {\r\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\r\n  }, []);\r\n\r\n  // Apply theme to DOM with smooth transition\r\n  const applyTheme = useCallback((newResolvedTheme: ResolvedTheme) => {\r\n    const root = document.documentElement;\r\n    \r\n    // Add transition class for smooth theme switching\r\n    root.classList.add('transitioning');\r\n    \r\n    if (newResolvedTheme === 'dark') {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n    \r\n    // Remove transition class after animation completes\r\n    setTimeout(() => {\r\n      root.classList.remove('transitioning');\r\n    }, 300);\r\n  }, []);\r\n\r\n  // Resolve the actual theme (light/dark) from the theme setting\r\n  const resolveTheme = useCallback((themeValue: Theme): ResolvedTheme => {\r\n    if (themeValue === 'auto') {\r\n      return getSystemTheme();\r\n    }\r\n    return themeValue as ResolvedTheme;\r\n  }, [getSystemTheme]);\r\n\r\n  // Initialize theme from localStorage or default to auto\r\n  useEffect(() => {\r\n    const storedTheme = localStorage.getItem('hospitalFinanceTheme') as Theme;\r\n    const initialTheme = storedTheme || 'auto';\r\n    const initialResolvedTheme = resolveTheme(initialTheme);\r\n    \r\n    setThemeState(initialTheme);\r\n    setResolvedTheme(initialResolvedTheme);\r\n    applyTheme(initialResolvedTheme);\r\n  }, [resolveTheme, applyTheme]);\r\n\r\n  // Listen for system theme changes\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n    const handleChange = (e: MediaQueryListEvent) => {\r\n      const systemTheme = e.matches ? 'dark' : 'light';\r\n      \r\n      // Only update if current theme is 'auto'\r\n      if (theme === 'auto') {\r\n        setResolvedTheme(systemTheme);\r\n        applyTheme(systemTheme);\r\n      }\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    return () => mediaQuery.removeEventListener('change', handleChange);\r\n  }, [theme, applyTheme]);\r\n\r\n  const setTheme = useCallback((newTheme: Theme) => {\r\n    const newResolvedTheme = resolveTheme(newTheme);\r\n    \r\n    setThemeState(newTheme);\r\n    setResolvedTheme(newResolvedTheme);\r\n    localStorage.setItem('hospitalFinanceTheme', newTheme);\r\n    applyTheme(newResolvedTheme);\r\n  }, [resolveTheme, applyTheme]);\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    if (theme === 'auto') {\r\n      // If auto, switch to the opposite of current resolved theme\r\n      const newTheme = resolvedTheme === 'light' ? 'dark' : 'light';\r\n      setTheme(newTheme);\r\n    } else {\r\n      // Toggle between light and dark\r\n      const newTheme = theme === 'light' ? 'dark' : 'light';\r\n      setTheme(newTheme);\r\n    }\r\n  }, [theme, resolvedTheme, setTheme]);\r\n\r\n  const value: ThemeContextType = {\r\n    theme,\r\n    resolvedTheme,\r\n    toggleTheme,\r\n    setTheme,\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n","import { useContext } from 'react';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\nimport { ThemeContextType } from '../types/theme';\r\n\r\n/**\r\n * Custom hook to access the theme context for managing light/dark mode.\r\n * \r\n * This hook provides access to the current theme state and methods for\r\n * changing themes. It handles both explicit theme preferences and\r\n * automatic system preference detection.\r\n * \r\n * @description Features:\r\n * - Get current theme preference ('light', 'dark', 'auto')\r\n * - Get resolved theme (actual active theme)\r\n * - Toggle between light and dark themes\r\n * - Set specific theme preference\r\n * - Automatic system preference detection when theme is 'auto'\r\n * - Persistent theme storage in localStorage\r\n * \r\n * @throws {Error} Throws an error if used outside of a ThemeProvider\r\n * \r\n * @returns {ThemeContextType} The theme context containing:\r\n *   - theme: Current theme preference setting\r\n *   - resolvedTheme: Actual active theme (light or dark)\r\n *   - toggleTheme: Function to toggle between light and dark\r\n *   - setTheme: Function to set a specific theme preference\r\n * \r\n * @example\r\n * ```tsx\r\n * function ThemeToggleButton() {\r\n *   const { theme, resolvedTheme, toggleTheme, setTheme } = useTheme();\r\n *   \r\n *   return (\r\n *     <div>\r\n *       <p>Current theme: {theme}</p>\r\n *       <p>Active theme: {resolvedTheme}</p>\r\n *       \r\n *       <button onClick={toggleTheme}>\r\n *         Switch to {resolvedTheme === 'light' ? 'dark' : 'light'} mode\r\n *       </button>\r\n *       \r\n *       <button onClick={() => setTheme('auto')}>\r\n *         Use system preference\r\n *       </button>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n * \r\n * @example\r\n * ```tsx\r\n * function ConditionalStyling() {\r\n *   const { resolvedTheme } = useTheme();\r\n *   \r\n *   const iconColor = resolvedTheme === 'dark' ? '#ffffff' : '#000000';\r\n *   \r\n *   return (\r\n *     <div className={resolvedTheme === 'dark' ? 'dark-styles' : 'light-styles'}>\r\n *       <Icon color={iconColor} />\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nexport const useTheme = (): ThemeContextType => {\r\n  const context = useContext(ThemeContext);\r\n  \r\n  // Ensure hook is used within ThemeProvider\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider. Make sure to wrap your component tree with <ThemeProvider>.');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\n","import React from 'react';\nimport { useTheme } from '../hooks/useTheme';\n\ninterface ThemeToggleProps {\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n}\n\n/**\n * Renders a button to toggle between light and dark themes.\n *\n * @param {ThemeToggleProps} props The component props.\n * @param {string} [props.className] Additional CSS classes to apply to the button.\n * @param {'sm' | 'md' | 'lg'} [props.size='md'] The size of the button.\n * @returns {React.ReactElement} The rendered theme toggle button.\n */\nconst ThemeToggle: React.FC<ThemeToggleProps> = ({ className = '', size = 'md' }) => {\n  const { resolvedTheme, setTheme } = useTheme();\n\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-5 h-5',\n    lg: 'w-6 h-6'\n  };\n\n  const iconSize = sizeClasses[size];\n\n  return (\n    <button\n      onClick={() => setTheme(resolvedTheme === 'light' ? 'dark' : 'light')}\n      className={`\n        relative p-2 rounded-lg transition-all duration-200 \n        bg-gray-100 hover:bg-gray-200 \n        dark:bg-gray-700 dark:hover:bg-gray-600 \n        text-gray-700 dark:text-gray-300 \n        hover:text-gray-900 dark:hover:text-white\n        focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 \n        dark:focus:ring-offset-gray-800\n        hover:scale-105 active:scale-95\n        ${className}\n      `}\n      title={resolvedTheme === 'light' ? 'Switch to dark mode' : 'Switch to light mode'}\n      aria-label={resolvedTheme === 'light' ? 'Switch to dark mode' : 'Switch to light mode'}\n    >\n      {resolvedTheme === 'light' ? (\n        <svg \n          className={iconSize} \n          fill=\"none\" \n          stroke=\"currentColor\" \n          viewBox=\"0 0 24 24\"\n        >\n          <path \n            strokeLinecap=\"round\" \n            strokeLinejoin=\"round\" \n            strokeWidth={2} \n            d=\"M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z\" \n          />\n        </svg>\n      ) : (\n        <svg \n          className={iconSize} \n          fill=\"none\" \n          stroke=\"currentColor\" \n          viewBox=\"0 0 24 24\"\n        >\n          <path \n            strokeLinecap=\"round\" \n            strokeLinejoin=\"round\" \n            strokeWidth={2} \n            d=\"M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z\" \n          />\n        </svg>\n      )}\n    </button>\n  );\n};\n\nexport default ThemeToggle;\n\n","/**\r\n * Password validation configuration\r\n */\r\nconst passwordConfig = {\r\n  minLength: 8,\r\n  requireUppercase: true,\r\n  requireLowercase: true,\r\n  requireNumbers: true,\r\n  requireSpecial: true,\r\n  maxLength: 128\r\n};\r\n\r\nexport interface PasswordValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Validates a password against security requirements\r\n * @param password The password to validate\r\n * @returns Validation result with error messages if any\r\n */\r\nexport const validatePassword = (password: string): PasswordValidationResult => {\r\n  const errors: string[] = [];\r\n\r\n  // Check for empty password\r\n  if (!password) {\r\n    return {\r\n      isValid: false,\r\n      errors: ['Password is required']\r\n    };\r\n  }\r\n\r\n  // Check length requirements\r\n  if (password.length < passwordConfig.minLength) {\r\n    errors.push(`Password must be at least ${passwordConfig.minLength} characters long`);\r\n  }\r\n  if (password.length > passwordConfig.maxLength) {\r\n    errors.push(`Password cannot be longer than ${passwordConfig.maxLength} characters`);\r\n  }\r\n\r\n  // Check character requirements\r\n  if (passwordConfig.requireUppercase && !/[A-Z]/.test(password)) {\r\n    errors.push('Password must contain at least one uppercase letter');\r\n  }\r\n  if (passwordConfig.requireLowercase && !/[a-z]/.test(password)) {\r\n    errors.push('Password must contain at least one lowercase letter');\r\n  }\r\n  if (passwordConfig.requireNumbers && !/\\d/.test(password)) {\r\n    errors.push('Password must contain at least one number');\r\n  }\r\n  if (passwordConfig.requireSpecial && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n    errors.push('Password must contain at least one special character');\r\n  }\r\n\r\n  // Check for common patterns\r\n  if (/(.)\\1{2,}/.test(password)) {\r\n    errors.push('Password cannot contain repeating characters (3 or more times)');\r\n  }\r\n  if (/12345|qwerty|password|admin/i.test(password)) {\r\n    errors.push('Password contains a common pattern');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Ensures consistent error message formatting\r\n * @param error The error to format\r\n * @returns A user-friendly error message\r\n */\r\nexport const formatAuthError = (error: unknown): string => {\r\n  if (error instanceof Error) {\r\n    // Hide implementation details from users\r\n    if (error.message.includes('Invalid credentials')) {\r\n      return 'Invalid email or password';\r\n    }\r\n    if (error.message.includes('Rate limit')) {\r\n      return 'Too many attempts. Please try again later';\r\n    }\r\n    return 'An error occurred during authentication';\r\n  }\r\n  return 'An unexpected error occurred';\r\n};","import { User, UserRole } from '../types/auth';\r\nimport { validatePassword } from '../utils/auth';\r\n\r\nexport const mockUsers: User[] = [\r\n  {\r\n    id: 'admin-1',\r\n    email: 'admin@hospitalfinance.com',\r\n    name: 'System Administrator',\r\n    role: 'admin',\r\n    createdAt: '2024-01-15T08:00:00Z',\r\n    lastLogin: '2024-12-15T10:30:00Z'\r\n  },\r\n  {\r\n    id: 'owner-1',\r\n    email: 'owner@metrogeneral.com',\r\n    name: 'Sarah Johnson',\r\n    role: 'hospital_owner',\r\n    hospitalIds: ['general-1', 'cardio-1'], // Owns multiple hospitals\r\n    createdAt: '2024-02-01T09:00:00Z',\r\n    lastLogin: '2024-12-14T15:45:00Z'\r\n  },\r\n  {\r\n    id: 'owner-2',\r\n    email: 'owner@childrensmed.com',\r\n    name: 'Dr. Michael Chen',\r\n    role: 'hospital_owner',\r\n    hospitalIds: ['pediatric-1'],\r\n    createdAt: '2024-02-15T10:00:00Z',\r\n    lastLogin: '2024-12-13T12:20:00Z'\r\n  },\r\n  {\r\n    id: 'branch-1',\r\n    email: 'manager@metrogeneral.com',\r\n    name: 'John Doe',\r\n    role: 'branch_owner',\r\n    hospitalId: 'general-1',\r\n    createdAt: '2024-03-01T11:00:00Z',\r\n    lastLogin: '2024-12-15T08:15:00Z'\r\n  },\r\n  {\r\n    id: 'branch-2',\r\n    email: 'manager@heartcenter.com',\r\n    name: 'Dr. Emily Rodriguez',\r\n    role: 'branch_owner',\r\n    hospitalId: 'cardio-1',\r\n    createdAt: '2024-03-10T12:00:00Z',\r\n    lastLogin: '2024-12-14T16:30:00Z'\r\n  },\r\n  {\r\n    id: 'branch-3',\r\n    email: 'manager@childrensmed.com',\r\n    name: 'Lisa Thompson',\r\n    role: 'branch_owner',\r\n    hospitalId: 'pediatric-1',\r\n    createdAt: '2024-03-20T13:00:00Z',\r\n    lastLogin: '2024-12-12T14:45:00Z'\r\n  },\r\n  {\r\n    id: 'branch-4',\r\n    email: 'manager@traumacenter.com',\r\n    name: 'Dr. Robert Kim',\r\n    role: 'branch_owner',\r\n    hospitalId: 'trauma-1',\r\n    createdAt: '2024-04-01T14:00:00Z',\r\n    lastLogin: '2024-12-11T11:20:00Z'\r\n  }\r\n];\r\n\r\n// Mock authentication service\r\nexport const authService = {\r\n  signIn: async (email: string, password: string): Promise<User> => {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Check password strength using proper validation\r\n    const passwordValidation = validatePassword(password);\r\n    if (!passwordValidation.isValid) {\r\n      throw new Error(passwordValidation.errors[0]);\r\n    }\r\n    \r\n    const user = mockUsers.find(u => u.email === email);\r\n    if (!user) {\r\n      throw new Error('No account found with this email address');\r\n    }\r\n    \r\n    // Simulate rate limiting (in real app, this would be server-side)\r\n    const attemptKey = `login_attempts_${email}`;\r\n    const attempts = parseInt(localStorage.getItem(attemptKey) || '0');\r\n    if (attempts >= 5) {\r\n      const lockoutTime = localStorage.getItem(`lockout_${email}`);\r\n      if (lockoutTime && Date.now() - parseInt(lockoutTime) < 15 * 60 * 1000) {\r\n        throw new Error('Account temporarily locked due to too many failed attempts. Try again in 15 minutes.');\r\n      } else {\r\n        // Reset attempts after lockout period\r\n        localStorage.removeItem(attemptKey);\r\n        localStorage.removeItem(`lockout_${email}`);\r\n      }\r\n    }\r\n    \r\n    // For demo purposes, we'll accept any password that meets strength requirements\r\n    // In a real app, you would hash and verify against stored password hash\r\n    const demoPasswords = [\r\n      'UsamaHF2024!',\r\n      'OwnerMG2024!', \r\n      'ManagerMG2024!',\r\n      'Demo123!@#' // Added a demo password that meets requirements\r\n    ];\r\n    \r\n    if (!demoPasswords.includes(password)) {\r\n      // Increment failed attempts\r\n      localStorage.setItem(attemptKey, (attempts + 1).toString());\r\n      if (attempts + 1 >= 5) {\r\n        localStorage.setItem(`lockout_${email}`, Date.now().toString());\r\n      }\r\n      throw new Error('Incorrect password');\r\n    }\r\n    \r\n    // Clear failed attempts on successful login\r\n    localStorage.removeItem(attemptKey);\r\n    localStorage.removeItem(`lockout_${email}`);\r\n    \r\n    // Update last login time\r\n    user.lastLogin = new Date().toISOString();\r\n    return user;\r\n  },\r\n  \r\n  signUp: async (userData: {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n    role: UserRole;\r\n    hospitalId?: string;\r\n    hospitalIds?: string[];\r\n  }): Promise<User> => {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1200));\r\n    \r\n    // Check if user already exists\r\n    const existingUser = mockUsers.find(u => u.email === userData.email);\r\n    if (existingUser) {\r\n      throw new Error('User with this email already exists');\r\n    }\r\n    \r\n    // Create new user with proper handling of optional properties\r\n    const newUser: User = {\r\n      id: `user-${Date.now()}`,\r\n      email: userData.email,\r\n      name: userData.name,\r\n      role: userData.role,\r\n      createdAt: new Date().toISOString(),\r\n      lastLogin: new Date().toISOString(),\r\n      ...(userData.hospitalId && { hospitalId: userData.hospitalId }),\r\n      ...(userData.hospitalIds && { hospitalIds: userData.hospitalIds })\r\n    };\r\n    \r\n    // Add to mock users (in real app, this would be API call)\r\n    mockUsers.push(newUser);\r\n    \r\n    return newUser;\r\n  }\r\n};\r\n\r\n// Role descriptions for UI\r\nexport const roleDescriptions = {\r\n  admin: {\r\n    title: 'System Administrator',\r\n    description: 'Full access to all hospitals and system-wide analytics',\r\n    permissions: ['View all hospitals', 'Manage users', 'System configuration']\r\n  },\r\n  hospital_owner: {\r\n    title: 'Hospital Owner',\r\n    description: 'Access to owned hospitals across multiple locations',\r\n    permissions: ['Manage owned hospitals', 'View financial reports', 'Manage branch managers']\r\n  },\r\n  // Internal role name is branch_owner but displayed as Branch Manager for consistency\r\n  branch_owner: {\r\n    title: 'Branch Manager',\r\n    description: 'Access to specific hospital location data only',\r\n    permissions: ['View branch data', 'Generate reports', 'Monitor performance']\r\n  }\r\n};\r\n\r\n","/**\r\n * Available logging levels for the application.\r\n * \r\n * @type LogLevel\r\n * - `info`: General information and debugging\r\n * - `warn`: Warning messages for potential issues\r\n * - `error`: Error messages for failures and exceptions\r\n */\r\nexport type LogLevel = 'info' | 'warn' | 'error';\r\n\r\n/**\r\n * Options for log entries to provide additional context and data.\r\n * \r\n * @interface LogOptions\r\n */\r\ninterface LogOptions {\r\n  /** Context identifier (e.g., component name, module) */\r\n  context?: string;\r\n  \r\n  /** Additional data to log (objects, arrays, etc.) */\r\n  data?: unknown;\r\n}\r\n\r\n/**\r\n * Centralized logging system for the Hospital Finance Dashboard.\r\n * \r\n * Features:\r\n * - Environment-aware logging (development vs production)\r\n * - Structured log formatting with timestamps\r\n * - Context-aware logging with component/module identification\r\n * - Automatic error handling for production environments\r\n * - Future-ready for external logging service integration\r\n * - Type-safe logging methods with proper TypeScript support\r\n * \r\n * The logger automatically adjusts behavior based on the environment:\r\n * - Development: All logs are output to console with full detail\r\n * - Production: Only errors are logged, with structured format for monitoring\r\n * \r\n * @class Logger\r\n * @example\r\n * ```typescript\r\n * import { logger } from '../utils/logger';\r\n * \r\n * // Basic logging\r\n * logger.info('User signed in successfully');\r\n * logger.warn('Slow API response detected');\r\n * logger.error('Failed to load user data');\r\n * \r\n * // Contextual logging\r\n * logger.info('Dashboard data loaded', {\r\n *   context: 'Dashboard',\r\n *   data: { hospitalId: 'general-001', recordCount: 150 }\r\n * });\r\n * \r\n * // Error logging with context\r\n * logger.error('Authentication failed', {\r\n *   context: 'AuthService',\r\n *   data: { email: 'user@example.com', errorCode: 'INVALID_CREDENTIALS' }\r\n * });\r\n * ```\r\n */\r\nclass Logger {\r\n  /** Flag indicating if running in development mode */\r\n  private isDev = import.meta.env.DEV;\r\n\r\n  /**\r\n   * Formats a log message with timestamp, level, and context.\r\n   * \r\n   * @private\r\n   * @param level - The log level\r\n   * @param message - The log message\r\n   * @param options - Additional logging options\r\n   * @returns Formatted log message string\r\n   */\r\n  private formatMessage(level: LogLevel, message: string, options?: LogOptions): string {\r\n    const timestamp = new Date().toISOString();\r\n    const context = options?.context ? `[${options.context}]` : '';\r\n    return `${timestamp} ${level.toUpperCase()} ${context} ${message}`;\r\n  }\r\n\r\n  /**\r\n   * Core logging method that handles all log levels.\r\n   * \r\n   * @private\r\n   * @param level - The log level (info, warn, error)\r\n   * @param message - The log message\r\n   * @param options - Additional logging options\r\n   */\r\n  private log(level: LogLevel, message: string, options?: LogOptions): void {\r\n    // Only log in development unless it's an error\r\n    if (!this.isDev && level !== 'error') return;\r\n\r\n    const formattedMessage = this.formatMessage(level, message, options);\r\n\r\n    switch (level) {\r\n      case 'info':\r\n        // Info logs only in development\r\n        if (this.isDev) console.log(formattedMessage, options?.data || '');\r\n        break;\r\n      case 'warn':\r\n        // Warning logs only in development\r\n        if (this.isDev) console.warn(formattedMessage, options?.data || '');\r\n        break;\r\n      case 'error':\r\n        // Always log errors, but handle them appropriately in production\r\n        if (this.isDev) {\r\n          console.error(formattedMessage, options?.data || '');\r\n        } else {\r\n          // In production, send to error tracking service\r\n          this.handleProductionError(message, options?.data);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles error logging in production environment.\r\n   * Formats errors for external monitoring services.\r\n   * \r\n   * @private\r\n   * @param message - The error message\r\n   * @param data - Additional error data\r\n   */\r\n  private handleProductionError(message: string, data?: unknown): void {\r\n    // TODO: Integrate with error tracking service (Sentry, LogRocket, etc.)\r\n    // For now, log in structured format suitable for log aggregators\r\n    console.error({\r\n      message,\r\n      timestamp: new Date().toISOString(),\r\n      environment: 'production',\r\n      data\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Logs an informational message.\r\n   * Only outputs in development environment.\r\n   * \r\n   * @param message - The message to log\r\n   * @param options - Additional logging options\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * logger.info('User data loaded successfully');\r\n   * logger.info('API call completed', {\r\n   *   context: 'DataService',\r\n   *   data: { endpoint: '/api/users', duration: '250ms' }\r\n   * });\r\n   * ```\r\n   */\r\n  info(message: string, options?: LogOptions): void {\r\n    this.log('info', message, options);\r\n  }\r\n\r\n  /**\r\n   * Logs a warning message.\r\n   * Only outputs in development environment.\r\n   * \r\n   * @param message - The warning message to log\r\n   * @param options - Additional logging options\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * logger.warn('API response time is slow');\r\n   * logger.warn('Deprecated function used', {\r\n   *   context: 'LegacyComponent',\r\n   *   data: { functionName: 'oldCalculateTotal' }\r\n   * });\r\n   * ```\r\n   */\r\n  warn(message: string, options?: LogOptions): void {\r\n    this.log('warn', message, options);\r\n  }\r\n\r\n  /**\r\n   * Logs an error message.\r\n   * Outputs in both development and production environments.\r\n   * In production, errors are formatted for external monitoring.\r\n   * \r\n   * @param message - The error message to log\r\n   * @param options - Additional logging options\r\n   * \r\n   * @example\r\n   * ```typescript\r\n   * logger.error('Failed to authenticate user');\r\n   * logger.error('Database connection failed', {\r\n   *   context: 'DatabaseService',\r\n   *   data: { connectionString: 'mongodb://localhost', error: e.message }\r\n   * });\r\n   * ```\r\n   */\r\n  error(message: string, options?: LogOptions): void {\r\n    this.log('error', message, options);\r\n  }\r\n}\r\n\r\n/**\r\n * Singleton logger instance for application-wide logging.\r\n * \r\n * This is the main logger instance that should be used throughout\r\n * the application for consistent logging behavior.\r\n * \r\n * @constant\r\n * @example\r\n * ```typescript\r\n * import { logger } from '../utils/logger';\r\n * \r\n * // Use in any component or utility\r\n * logger.info('Operation completed successfully');\r\n * logger.error('Operation failed', { context: 'ComponentName' });\r\n * ```\r\n */\r\nexport const logger = new Logger();","import { \n  FinancialMetric, \n  RevenueData, \n  DepartmentFinance, \n  PatientMetrics, \n  ExpenseBreakdown, \n  CashFlowData,\n  Hospital,\n  HospitalData\n} from '../types/finance';\n\nexport const financialMetrics: FinancialMetric[] = [\n  {\n    id: 'total-revenue',\n    title: 'Total Revenue',\n    value: 12500000,\n    change: 8.5,\n    changeType: 'increase',\n    period: 'vs last month',\n    format: 'currency'\n  },\n  {\n    id: 'net-profit',\n    title: 'Net Profit',\n    value: 2100000,\n    change: 12.3,\n    changeType: 'increase',\n    period: 'vs last month',\n    format: 'currency'\n  },\n  {\n    id: 'profit-margin',\n    title: 'Profit Margin',\n    value: 16.8,\n    change: 2.1,\n    changeType: 'increase',\n    period: 'vs last month',\n    format: 'percentage'\n  },\n  {\n    id: 'operating-expenses',\n    title: 'Operating Expenses',\n    value: 9800000,\n    change: 3.2,\n    changeType: 'increase',\n    period: 'vs last month',\n    format: 'currency'\n  }\n];\n\nexport const revenueData: RevenueData[] = [\n  { month: 'Jan', revenue: 11200000, expenses: 8900000, netIncome: 2300000 },\n  { month: 'Feb', revenue: 10800000, expenses: 8600000, netIncome: 2200000 },\n  { month: 'Mar', revenue: 12100000, expenses: 9200000, netIncome: 2900000 },\n  { month: 'Apr', revenue: 11800000, expenses: 9000000, netIncome: 2800000 },\n  { month: 'May', revenue: 12800000, expenses: 9600000, netIncome: 3200000 },\n  { month: 'Jun', revenue: 12500000, expenses: 9800000, netIncome: 2700000 },\n  { month: 'Jul', revenue: 13200000, expenses: 10100000, netIncome: 3100000 },\n  { month: 'Aug', revenue: 12900000, expenses: 9900000, netIncome: 3000000 },\n  { month: 'Sep', revenue: 13500000, expenses: 10300000, netIncome: 3200000 },\n  { month: 'Oct', revenue: 13100000, expenses: 10000000, netIncome: 3100000 },\n  { month: 'Nov', revenue: 12700000, expenses: 9700000, netIncome: 3000000 },\n  { month: 'Dec', revenue: 14200000, expenses: 10800000, netIncome: 3400000 }\n];\n\nexport const departmentFinances: DepartmentFinance[] = [\n  {\n    department: 'Emergency',\n    revenue: 3200000,\n    expenses: 2400000,\n    profit: 800000,\n    profitMargin: 25.0\n  },\n  {\n    department: 'Surgery',\n    revenue: 4500000,\n    expenses: 3100000,\n    profit: 1400000,\n    profitMargin: 31.1\n  },\n  {\n    department: 'Cardiology',\n    revenue: 2800000,\n    expenses: 1900000,\n    profit: 900000,\n    profitMargin: 32.1\n  },\n  {\n    department: 'Oncology',\n    revenue: 1900000,\n    expenses: 1400000,\n    profit: 500000,\n    profitMargin: 26.3\n  },\n  {\n    department: 'Pediatrics',\n    revenue: 1100000,\n    expenses: 800000,\n    profit: 300000,\n    profitMargin: 27.3\n  }\n];\n\nexport const patientMetrics: PatientMetrics = {\n  totalPatients: 15420,\n  inpatients: 2180,\n  outpatients: 11850,\n  emergencyVisits: 1390,\n  averageStayDuration: 4.2,\n  occupancyRate: 87.5\n};\n\nexport const expenseBreakdown: ExpenseBreakdown[] = [\n  { category: 'Salaries & Benefits', amount: 5200000, percentage: 53.1, color: '#3b82f6' },\n  { category: 'Medical Supplies', amount: 1800000, percentage: 18.4, color: '#10b981' },\n  { category: 'Equipment', amount: 1200000, percentage: 12.2, color: '#f59e0b' },\n  { category: 'Utilities', amount: 600000, percentage: 6.1, color: '#ef4444' },\n  { category: 'Maintenance', amount: 500000, percentage: 5.1, color: '#8b5cf6' },\n  { category: 'Other', amount: 500000, percentage: 5.1, color: '#6b7280' }\n];\n\nexport const cashFlowData: CashFlowData[] = [\n  {\n    date: '2024-01',\n    operatingCashFlow: 2100000,\n    investingCashFlow: -800000,\n    financingCashFlow: -300000,\n    netCashFlow: 1000000\n  },\n  {\n    date: '2024-02',\n    operatingCashFlow: 1950000,\n    investingCashFlow: -200000,\n    financingCashFlow: -400000,\n    netCashFlow: 1350000\n  },\n  {\n    date: '2024-03',\n    operatingCashFlow: 2300000,\n    investingCashFlow: -1200000,\n    financingCashFlow: -200000,\n    netCashFlow: 900000\n  },\n  {\n    date: '2024-04',\n    operatingCashFlow: 2200000,\n    investingCashFlow: -300000,\n    financingCashFlow: -350000,\n    netCashFlow: 1550000\n  },\n  {\n    date: '2024-05',\n    operatingCashFlow: 2500000,\n    investingCashFlow: -150000,\n    financingCashFlow: -300000,\n    netCashFlow: 2050000\n  },\n  {\n    date: '2024-06',\n    operatingCashFlow: 2350000,\n    investingCashFlow: -600000,\n    financingCashFlow: -250000,\n    netCashFlow: 1500000\n  }\n];\n\nexport const hospitals: Hospital[] = [\n  {\n    id: 'general-1',\n    name: 'Metro General Hospital',\n    location: 'Downtown',\n    type: 'General'\n  },\n  {\n    id: 'cardio-1',\n    name: 'Heart & Vascular Institute',\n    location: 'Midtown',\n    type: 'Specialty'\n  },\n  {\n    id: 'pediatric-1',\n    name: 'Children\\'s Medical Center',\n    location: 'Westside',\n    type: 'Pediatric'\n  },\n  {\n    id: 'trauma-1',\n    name: 'Regional Trauma Center',\n    location: 'Northside',\n    type: 'Trauma'\n  }\n];\n\nexport const availableYears = [2021, 2022, 2023, 2024];\n\n/**\n * Generates a random variation of a base value within a specified percentage range.\n * \n * @description This function creates realistic variations in financial data by applying\n * a random percentage change to a base value. The variation is symmetrical (both positive\n * and negative changes are possible).\n * \n * @param {number} baseValue - The base value to vary\n * @param {number} [variationPercent=15] - The maximum percentage variation (default: 15%)\n * @returns {number} A rounded number representing the varied value\n * \n * @example\n * ```typescript\n * const baseRevenue = 1000000;\n * const variedRevenue = generateVariation(baseRevenue, 20); // Could be between 800,000 and 1,200,000\n * ```\n */\nconst generateVariation = (baseValue: number, variationPercent: number = 15): number => {\n  const variation = baseValue * (variationPercent / 100);\n  return Math.round(baseValue + (Math.random() - 0.5) * 2 * variation);\n};\n\n// Generate hospital data for all combinations\nexport const hospitalDataByYear: HospitalData[] = [];\n\nhospitals.forEach(hospital => {\n  availableYears.forEach(year => {\n    const yearMultiplier = year === 2024 ? 1 : year === 2023 ? 0.92 : year === 2022 ? 0.85 : 0.78;\n    const hospitalMultiplier = hospital.type === 'General' ? 1 : \n                               hospital.type === 'Specialty' ? 0.7 : \n                               hospital.type === 'Pediatric' ? 0.5 : 0.8;\n\n    const baseMultiplier = yearMultiplier * hospitalMultiplier;\n\n    const hospitalData: HospitalData = {\n      hospitalId: hospital.id,\n      year: year,\n      lastUpdated: new Date(year, 11, 31).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      }),\n      financialMetrics: [\n        {\n          id: 'total-revenue',\n          title: 'Total Revenue',\n          value: generateVariation(12500000 * baseMultiplier),\n          change: generateVariation(8.5, 50),\n          changeType: Math.random() > 0.3 ? 'increase' : 'decrease',\n          period: 'vs last month',\n          format: 'currency'\n        },\n        {\n          id: 'net-profit',\n          title: 'Net Profit',\n          value: generateVariation(2100000 * baseMultiplier),\n          change: generateVariation(12.3, 60),\n          changeType: Math.random() > 0.25 ? 'increase' : 'decrease',\n          period: 'vs last month',\n          format: 'currency'\n        },\n        {\n          id: 'profit-margin',\n          title: 'Profit Margin',\n          value: generateVariation(16.8, 25),\n          change: generateVariation(2.1, 80),\n          changeType: Math.random() > 0.4 ? 'increase' : 'decrease',\n          period: 'vs last month',\n          format: 'percentage'\n        },\n        {\n          id: 'operating-expenses',\n          title: 'Operating Expenses',\n          value: generateVariation(9800000 * baseMultiplier),\n          change: generateVariation(3.2, 40),\n          changeType: Math.random() > 0.6 ? 'increase' : 'decrease',\n          period: 'vs last month',\n          format: 'currency'\n        }\n      ],\n      revenueData: [\n        { month: 'Jan', revenue: generateVariation(11200000 * baseMultiplier), expenses: generateVariation(8900000 * baseMultiplier), netIncome: generateVariation(2300000 * baseMultiplier) },\n        { month: 'Feb', revenue: generateVariation(10800000 * baseMultiplier), expenses: generateVariation(8600000 * baseMultiplier), netIncome: generateVariation(2200000 * baseMultiplier) },\n        { month: 'Mar', revenue: generateVariation(12100000 * baseMultiplier), expenses: generateVariation(9200000 * baseMultiplier), netIncome: generateVariation(2900000 * baseMultiplier) },\n        { month: 'Apr', revenue: generateVariation(11800000 * baseMultiplier), expenses: generateVariation(9000000 * baseMultiplier), netIncome: generateVariation(2800000 * baseMultiplier) },\n        { month: 'May', revenue: generateVariation(12800000 * baseMultiplier), expenses: generateVariation(9600000 * baseMultiplier), netIncome: generateVariation(3200000 * baseMultiplier) },\n        { month: 'Jun', revenue: generateVariation(12500000 * baseMultiplier), expenses: generateVariation(9800000 * baseMultiplier), netIncome: generateVariation(2700000 * baseMultiplier) },\n        { month: 'Jul', revenue: generateVariation(13200000 * baseMultiplier), expenses: generateVariation(10100000 * baseMultiplier), netIncome: generateVariation(3100000 * baseMultiplier) },\n        { month: 'Aug', revenue: generateVariation(12900000 * baseMultiplier), expenses: generateVariation(9900000 * baseMultiplier), netIncome: generateVariation(3000000 * baseMultiplier) },\n        { month: 'Sep', revenue: generateVariation(13500000 * baseMultiplier), expenses: generateVariation(10300000 * baseMultiplier), netIncome: generateVariation(3200000 * baseMultiplier) },\n        { month: 'Oct', revenue: generateVariation(13100000 * baseMultiplier), expenses: generateVariation(10000000 * baseMultiplier), netIncome: generateVariation(3100000 * baseMultiplier) },\n        { month: 'Nov', revenue: generateVariation(12700000 * baseMultiplier), expenses: generateVariation(9700000 * baseMultiplier), netIncome: generateVariation(3000000 * baseMultiplier) },\n        { month: 'Dec', revenue: generateVariation(14200000 * baseMultiplier), expenses: generateVariation(10800000 * baseMultiplier), netIncome: generateVariation(3400000 * baseMultiplier) }\n      ],\n      departmentFinances: (() => {\n        const emergencyRevenue = generateVariation(3200000 * baseMultiplier);\n        const emergencyExpenses = generateVariation(2400000 * baseMultiplier);\n        const emergencyProfit = emergencyRevenue - emergencyExpenses;\n        \n        return [\n        {\n          department: 'Emergency',\n          revenue: emergencyRevenue,\n          expenses: emergencyExpenses,\n          profit: emergencyProfit,\n          profitMargin: (emergencyProfit / emergencyRevenue) * 100\n        },\n        (() => {\n          const surgeryRevenue = generateVariation(4500000 * baseMultiplier);\n          const surgeryExpenses = generateVariation(3100000 * baseMultiplier);\n          const surgeryProfit = surgeryRevenue - surgeryExpenses;\n          \n          return {\n            department: 'Surgery',\n            revenue: surgeryRevenue,\n            expenses: surgeryExpenses,\n            profit: surgeryProfit,\n            profitMargin: (surgeryProfit / surgeryRevenue) * 100\n          };\n        })(),\n        (() => {\n          const cardiologyRevenue = generateVariation(2800000 * baseMultiplier);\n          const cardiologyExpenses = generateVariation(1900000 * baseMultiplier);\n          const cardiologyProfit = cardiologyRevenue - cardiologyExpenses;\n          \n          return {\n            department: 'Cardiology',\n            revenue: cardiologyRevenue,\n            expenses: cardiologyExpenses,\n            profit: cardiologyProfit,\n            profitMargin: (cardiologyProfit / cardiologyRevenue) * 100\n          };\n        })(),\n        (() => {\n          const deptRevenue = generateVariation(1900000 * baseMultiplier);\n          const deptExpenses = generateVariation(1400000 * baseMultiplier);\n          const deptProfit = deptRevenue - deptExpenses;\n          \n          return {\n            department: hospital.type === 'Pediatric' ? 'Pediatrics' : 'Oncology',\n            revenue: deptRevenue,\n            expenses: deptExpenses,\n            profit: deptProfit,\n            profitMargin: (deptProfit / deptRevenue) * 100\n          };\n        })(),\n        (() => {\n          const orthoRevenue = generateVariation(1100000 * baseMultiplier);\n          const orthoExpenses = generateVariation(800000 * baseMultiplier);\n          const orthoProfit = orthoRevenue - orthoExpenses;\n          \n          return {\n            department: hospital.type === 'Trauma' ? 'Trauma' : 'Orthopedics',\n            revenue: orthoRevenue,\n            expenses: orthoExpenses,\n            profit: orthoProfit,\n            profitMargin: (orthoProfit / orthoRevenue) * 100\n          };\n        })()\n      ]; })(),\n      patientMetrics: {\n        totalPatients: generateVariation(15420 * baseMultiplier, 20),\n        inpatients: generateVariation(2180 * baseMultiplier, 25),\n        outpatients: generateVariation(11850 * baseMultiplier, 20),\n        emergencyVisits: generateVariation(1390 * baseMultiplier, 30),\n        averageStayDuration: generateVariation(4.2 * 10, 15) / 10,\n        occupancyRate: generateVariation(87.5, 10)\n      },\n      expenseBreakdown: (() => {\n        const salariesAmount = generateVariation(5200000 * baseMultiplier);\n        const suppliesAmount = generateVariation(1800000 * baseMultiplier);\n        const equipmentAmount = generateVariation(1200000 * baseMultiplier);\n        const utilitiesAmount = generateVariation(600000 * baseMultiplier);\n        const maintenanceAmount = generateVariation(500000 * baseMultiplier);\n        const otherAmount = generateVariation(500000 * baseMultiplier);\n        \n        const totalAmount = salariesAmount + suppliesAmount + equipmentAmount + utilitiesAmount + maintenanceAmount + otherAmount;\n        \n        return [\n          { category: 'Salaries & Benefits', amount: salariesAmount, percentage: Math.round((salariesAmount / totalAmount) * 100 * 10) / 10, color: '#3b82f6' },\n          { category: 'Medical Supplies', amount: suppliesAmount, percentage: Math.round((suppliesAmount / totalAmount) * 100 * 10) / 10, color: '#10b981' },\n          { category: 'Equipment', amount: equipmentAmount, percentage: Math.round((equipmentAmount / totalAmount) * 100 * 10) / 10, color: '#f59e0b' },\n          { category: 'Utilities', amount: utilitiesAmount, percentage: Math.round((utilitiesAmount / totalAmount) * 100 * 10) / 10, color: '#ef4444' },\n          { category: 'Maintenance', amount: maintenanceAmount, percentage: Math.round((maintenanceAmount / totalAmount) * 100 * 10) / 10, color: '#8b5cf6' },\n          { category: 'Other', amount: otherAmount, percentage: Math.round((otherAmount / totalAmount) * 100 * 10) / 10, color: '#6b7280' }\n        ];\n      })(),\n      cashFlowData: [\n        {\n          date: `${year}-01`,\n          operatingCashFlow: generateVariation(2100000 * baseMultiplier),\n          investingCashFlow: generateVariation(-800000 * baseMultiplier),\n          financingCashFlow: generateVariation(-300000 * baseMultiplier),\n          netCashFlow: generateVariation(1000000 * baseMultiplier)\n        },\n        {\n          date: `${year}-02`,\n          operatingCashFlow: generateVariation(1950000 * baseMultiplier),\n          investingCashFlow: generateVariation(-200000 * baseMultiplier),\n          financingCashFlow: generateVariation(-400000 * baseMultiplier),\n          netCashFlow: generateVariation(1350000 * baseMultiplier)\n        },\n        {\n          date: `${year}-03`,\n          operatingCashFlow: generateVariation(2300000 * baseMultiplier),\n          investingCashFlow: generateVariation(-1200000 * baseMultiplier),\n          financingCashFlow: generateVariation(-200000 * baseMultiplier),\n          netCashFlow: generateVariation(900000 * baseMultiplier)\n        },\n        {\n          date: `${year}-04`,\n          operatingCashFlow: generateVariation(2200000 * baseMultiplier),\n          investingCashFlow: generateVariation(-300000 * baseMultiplier),\n          financingCashFlow: generateVariation(-350000 * baseMultiplier),\n          netCashFlow: generateVariation(1550000 * baseMultiplier)\n        },\n        {\n          date: `${year}-05`,\n          operatingCashFlow: generateVariation(2500000 * baseMultiplier),\n          investingCashFlow: generateVariation(-150000 * baseMultiplier),\n          financingCashFlow: generateVariation(-300000 * baseMultiplier),\n          netCashFlow: generateVariation(2050000 * baseMultiplier)\n        },\n        {\n          date: `${year}-06`,\n          operatingCashFlow: generateVariation(2350000 * baseMultiplier),\n          investingCashFlow: generateVariation(-600000 * baseMultiplier),\n          financingCashFlow: generateVariation(-250000 * baseMultiplier),\n          netCashFlow: generateVariation(1500000 * baseMultiplier)\n        }\n      ]\n    };\n\n    hospitalDataByYear.push(hospitalData);\n  });\n});\n\n/**\n * Retrieves hospital financial data for a specific hospital and year.\n * \n * @description This function searches through the generated hospital data to find\n * matching records for a specific hospital ID and year combination. The data includes\n * financial metrics, revenue data, department finances, patient metrics, expense breakdown,\n * and cash flow data.\n * \n * @param {string} hospitalId - The unique identifier of the hospital\n * @param {number} year - The year for which to retrieve data (e.g., 2024)\n * @returns {HospitalData | undefined} The hospital data object if found, undefined otherwise\n * \n * @example\n * ```typescript\n * const hospitalData = getHospitalData('general-1', 2024);\n * if (hospitalData) {\n *   console.log('Total Revenue:', hospitalData.financialMetrics[0].value);\n *   console.log('Last Updated:', hospitalData.lastUpdated);\n * }\n * ```\n */\nexport const getHospitalData = (hospitalId: string, year: number): HospitalData | undefined => {\n  return hospitalDataByYear.find(data => data.hospitalId === hospitalId && data.year === year);\n};\n\n","import React, { createContext, useState, useEffect } from 'react';\nimport { User, AuthContextType, SignUpData } from '../types/auth';\nimport { authService } from '../data/mockUsers';\nimport { logger } from '../utils/logger';\nimport { hospitals } from '../data/mockData';\n\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\n/**\n * Provides authentication state and functions to its children components.\n * This component manages the user's authentication status, including sign-in,\n * sign-out, and access control checks.\n */\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Check for stored authentication on app start\n  useEffect(() => {\n    const storedUser = localStorage.getItem('hospitalFinanceUser');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        // Validate that the parsed object has the expected User structure\n        if (parsedUser && typeof parsedUser === 'object' && 'id' in parsedUser && 'email' in parsedUser) {\n          setUser(parsedUser as User);\n        } else {\n          logger.warn('Invalid user data in localStorage, removing...', { context: 'AuthContext' });\n          localStorage.removeItem('hospitalFinanceUser');\n        }\n      } catch (error) {\n        logger.error('Failed to parse stored user data', { context: 'AuthContext', data: error });\n        localStorage.removeItem('hospitalFinanceUser');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  /**\n   * Signs in a user with the provided email and password.\n   * On successful authentication, the user data is stored in state and localStorage.\n   * @param email The user's email.\n   * @param password The user's password.\n   * @throws Will throw an error if sign-in fails.\n   */\n  const signIn = async (email: string, password: string): Promise<void> => {\n    setIsLoading(true);\n    try {\n      const userData = await authService.signIn(email, password);\n      if (!userData || !userData.id || !userData.email) {\n        throw new Error('Invalid user data received from authentication service');\n      }\n      setUser(userData);\n      localStorage.setItem('hospitalFinanceUser', JSON.stringify(userData));\n    } catch (error) {\n      logger.error('Sign in failed', { context: 'AuthContext', data: error });\n      throw error; // Re-throw to let the component handle the error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Signs up a new user with the provided data.\n   * On successful registration, the new user data is stored in state and localStorage.\n   * @param userData The user data for registration.\n   * @throws Will throw an error if sign-up fails.\n   */\n  const signUp = async (userData: SignUpData): Promise<void> => {\n    setIsLoading(true);\n    try {\n      const newUser = await authService.signUp(userData);\n      if (!newUser || !newUser.id || !newUser.email) {\n        throw new Error('Invalid user data received from registration service');\n      }\n      setUser(newUser);\n      localStorage.setItem('hospitalFinanceUser', JSON.stringify(newUser));\n    } catch (error) {\n      logger.error('Sign up failed', { context: 'AuthContext', data: error });\n      throw error; // Re-throw to let the component handle the error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Signs out the current user.\n   * Clears user data from state and localStorage.\n   */\n  const signOut = () => {\n    logger.info('User signed out', { context: 'AuthContext', data: { userId: user?.id } });\n    setUser(null);\n    localStorage.removeItem('hospitalFinanceUser');\n  };\n\n  /**\n   * Checks if the current user can access a specific hospital.\n   * @param hospitalId The ID of the hospital to check.\n   * @returns `true` if the user has access, `false` otherwise.\n   */\n  const canAccessHospital = (hospitalId: string): boolean => {\n    if (!user) return false;\n    \n    switch (user.role) {\n      case 'admin':\n        return true; // Admin can access all hospitals\n      case 'hospital_owner':\n        return user.hospitalIds?.includes(hospitalId) || false;\n      case 'branch_owner':\n        return user.hospitalId === hospitalId;\n      default:\n        return false;\n    }\n  };\n\n  /**\n   * Gets a list of hospital IDs that the current user can access.\n   * @returns An array of hospital ID strings.\n   */\n  const getAccessibleHospitals = (): string[] => {\n    if (!user) return [];\n    \n    switch (user.role) {\n      case 'admin':\n        return hospitals.map(h => h.id); // All hospitals\n      case 'hospital_owner':\n        return user.hospitalIds || [];\n      case 'branch_owner':\n        return user.hospitalId ? [user.hospitalId] : [];\n      default:\n        return [];\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    signIn,\n    signUp,\n    signOut,\n    canAccessHospital,\n    getAccessibleHospitals\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import { useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport { AuthContextType } from '../types/auth';\r\n\r\n/**\r\n * Custom hook to access the authentication context.\r\n * \r\n * @description This hook provides access to the current authentication state and methods\r\n * for signing in, signing up, and signing out users. It also provides utilities for\r\n * checking user permissions and accessible hospitals.\r\n * \r\n * @returns {AuthContextType} The authentication context containing:\r\n *   - user: Current authenticated user or null\r\n *   - isAuthenticated: Boolean indicating if user is authenticated\r\n *   - isLoading: Boolean indicating if authentication is in progress\r\n *   - signIn: Function to authenticate a user\r\n *   - signUp: Function to register a new user\r\n *   - signOut: Function to sign out the current user\r\n *   - canAccessHospital: Function to check if user can access a specific hospital\r\n *   - getAccessibleHospitals: Function to get list of hospitals user can access\r\n * \r\n * @throws {Error} Throws an error if used outside of an AuthProvider\r\n * \r\n * @example\r\n * ```tsx\r\n * function MyComponent() {\r\n *   const { user, isAuthenticated, signOut } = useAuth();\r\n *   \r\n *   if (!isAuthenticated) {\r\n *     return <div>Please sign in</div>;\r\n *   }\r\n *   \r\n *   return (\r\n *     <div>\r\n *       Welcome, {user?.name}!\r\n *       <button onClick={signOut}>Sign Out</button>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n */\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport Dropdown from './Dropdown';\nimport ThemeToggle from './ThemeToggle';\nimport { Hospital } from '../types/finance';\nimport { useAuth } from '../hooks/useAuth';\n\ninterface HeaderProps {\n  hospitals: Hospital[];\n  selectedHospitalId: string;\n  selectedYear: number;\n  availableYears: number[];\n  onHospitalChange: (hospitalId: string) => void;\n  onYearChange: (year: number) => void;\n}\n\nconst Header: React.FC<HeaderProps> = ({\n  hospitals,\n  selectedHospitalId,\n  selectedYear,\n  availableYears,\n  onHospitalChange,\n  onYearChange\n}) => {\n  const { user, signOut } = useAuth();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  // Handle body scroll when mobile menu is open\n  useEffect(() => {\n    if (isMobileMenuOpen) {\n      document.body.style.overflow = 'hidden';\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    // Cleanup on unmount\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isMobileMenuOpen]);\n  const hospitalOptions = hospitals.map(hospital => ({\n    value: hospital.id,\n    label: hospital.name,\n    subtitle: `${hospital.type} • ${hospital.location}`\n  }));\n\n  const yearOptions = availableYears.map(year => ({\n    value: year.toString(),\n    label: year.toString()\n  }));\n\n  const selectedHospital = hospitals.find(h => h.id === selectedHospitalId);\n\n  return (\n    <header className=\"bg-white dark:bg-dark-surface border-b border-gray-200 dark:border-dark-border transition-colors duration-200 sticky top-0 z-30\">\n      <div className=\"px-4 sm:px-6 lg:px-8 max-w-screen-2xl mx-auto\">\n        {/* Desktop Header */}\n        <div className=\"flex items-center justify-between min-h-16 py-4\">\n          {/* Logo and Title */}\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-lg\">H</span>\n            </div>\n            <div className=\"hidden sm:block\">\n              <h1 className=\"text-lg sm:text-xl font-bold\">\n                Hospital Finance Dashboard\n              </h1>\n              <p className=\"text-xs sm:text-sm text-gray-500 dark:text-dark-muted\">\n                {selectedHospital ? `${selectedHospital.name} • ${selectedYear}` : 'Real-time financial insights and analytics'}\n              </p>\n            </div>\n            <div className=\"sm:hidden\">\n              <h1 className=\"text-lg font-bold\">Dashboard</h1>\n            </div>\n          </div>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden xl:flex items-center space-x-6\">\n            {/* Dropdowns */}\n            <div className=\"flex items-end space-x-2 sm:space-x-4 min-w-0\">\n              <div className=\"flex flex-col space-y-1\">\n                <label className=\"text-xs font-medium text-gray-600 dark:text-gray-400 uppercase tracking-wide\">\n                  Hospital\n                </label>\n                <Dropdown\n                  options={hospitalOptions}\n                  value={selectedHospitalId}\n                  onChange={onHospitalChange}\n                  placeholder=\"Select Hospital\"\n                  className=\"w-full sm:w-64\"\n                />\n              </div>\n              \n              <div className=\"flex flex-col space-y-1\">\n                <label className=\"text-xs font-medium text-gray-600 dark:text-gray-400 uppercase tracking-wide\">\n                  Year\n                </label>\n                <Dropdown\n                  options={yearOptions}\n                  value={selectedYear.toString()}\n                  onChange={(value) => onYearChange(parseInt(value))}\n                  placeholder=\"Select Year\"\n                  className=\"w-full sm:w-40\"\n                />\n              </div>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex items-center space-x-3\">\n              <ThemeToggle />\n              <button \n                className=\"btn-secondary text-sm hidden 2xl:inline-flex\"\n                aria-label=\"Export financial report\"\n              >\n                Export Report\n              </button>\n              <button \n                className=\"btn-primary text-sm hidden 2xl:inline-flex\"\n                aria-label=\"Generate financial analysis\"\n              >\n                Generate Analysis\n              </button>\n            </div>\n            \n            {/* User Section */}\n            <div className=\"flex items-center space-x-2 pl-4 border-l border-gray-200 dark:border-dark-border\">\n              <div className=\"w-8 h-8 bg-primary-600 rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-medium text-sm\">\n                  {user?.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                </span>\n              </div>\n              <div className=\"text-sm\">\n                <p className=\"font-medium\">{user?.name}</p>\n                <p className=\"text-gray-500 dark:text-dark-muted capitalize\">{user?.role.replace('_', ' ')}</p>\n              </div>\n              <button\n                onClick={signOut}\n                className=\"ml-2 text-gray-400 hover:text-danger-600 dark:text-gray-500 dark:hover:text-danger-400 transition-colors\"\n                title=\"Sign out\"\n                aria-label=\"Sign out of your account\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n                </svg>\n              </button>\n            </div>\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"xl:hidden flex items-center space-x-2\">\n            <ThemeToggle size=\"sm\" />\n            <button\n              type=\"button\"\n              className=\"p-2 rounded-md text-gray-900 dark:text-gray-100 hover:text-gray-500 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500 border border-gray-300 dark:border-gray-600\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              aria-controls=\"mobile-menu\"\n              aria-expanded={isMobileMenuOpen}\n            >\n              <span className=\"sr-only\">Open main menu</span>\n              {!isMobileMenuOpen ? (\n                <svg className=\"block h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\" />\n                </svg>\n              ) : (\n                <svg className=\"block h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              )}\n            </button>\n          </div>\n        </div>\n\n        {/* Mobile full-screen menu */}\n        <div\n          className={`xl:hidden fixed inset-0 z-50 transition-opacity duration-300 ${\n            isMobileMenuOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'\n          }`}\n        >\n          {/* Backdrop */}\n          <div\n            className=\"absolute inset-0 bg-black/40\"\n            onClick={() => setIsMobileMenuOpen(false)}\n            aria-hidden=\"true\"\n          />\n\n          {/* Full-screen menu */}\n          <div\n            className={`fixed top-0 right-0 h-full w-full max-w-sm bg-white dark:bg-gray-800 shadow-xl transform transition-transform duration-300 ease-in-out ${\n              isMobileMenuOpen ? 'translate-x-0' : 'translate-x-full'\n            }`}\n            id=\"mobile-menu\"\n          >\n            {/* Header */}\n            <div className=\"flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-lg\">H</span>\n                </div>\n                <span className=\"font-semibold text-gray-900 dark:text-white\">Menu</span>\n              </div>\n              <button\n                onClick={() => setIsMobileMenuOpen(false)}\n                className=\"p-2 rounded-lg text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n            </div>\n\n            {/* Content */}\n            <div className=\"flex flex-col h-full\">\n              <div className=\"flex-1 overflow-y-auto p-4 space-y-6\">\n                {/* User Info */}\n                <div className=\"bg-gray-50 dark:bg-gray-700/50 rounded-lg p-3\">\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <div className=\"w-12 h-12 bg-primary-600 rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-medium text-lg\">\n                        {user?.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                      </span>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium text-gray-900 dark:text-white truncate\">{user?.name}</p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400 capitalize truncate\">\n                        {user?.role.replace('_', ' ')}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {/* Sign Out Button - Close to user info */}\n                  <button\n                    onClick={signOut}\n                    className=\"w-full flex items-center justify-center px-3 py-2 text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors font-medium text-sm border border-red-200 dark:border-red-800\"\n                    aria-label=\"Sign out of your account\"\n                  >\n                    <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n                    </svg>\n                    Sign Out\n                  </button>\n                </div>\n\n                {/* Actions Section */}\n                <div className=\"space-y-3\">\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">Actions</h3>\n                  \n                  <button \n                    className=\"w-full btn-secondary text-left justify-start\"\n                    aria-label=\"Export financial report\"\n                    onClick={() => setIsMobileMenuOpen(false)}\n                  >\n                    <svg className=\"w-5 h-5 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                    </svg>\n                    Export Report\n                  </button>\n                  \n                  <button \n                    className=\"w-full btn-primary text-left justify-start\"\n                    aria-label=\"Generate financial analysis\"\n                    onClick={() => setIsMobileMenuOpen(false)}\n                  >\n                    <svg className=\"w-5 h-5 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                    </svg>\n                    Generate Analysis\n                  </button>\n                </div>\n              </div>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n\n","/**\n * Formats a number as a US currency string.\n * @param value The number to format.\n * @returns A string representing the formatted currency (e.g., \"$1,500\").\n */\nexport const formatCurrency = (value: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value);\n};\n\n/**\n * Formats a number as a percentage string.\n * @param value The number to format.\n * @returns A string representing the formatted percentage (e.g., \"15.4%\").\n */\nexport const formatPercentage = (value: number): string => {\n  return `${value.toFixed(1)}%`;\n};\n\n/**\n * Formats a number with commas as thousands separators.\n * @param value The number to format.\n * @returns A string representing the formatted number (e.g., \"1,500,000\").\n */\nexport const formatNumber = (value: number): string => {\n  return new Intl.NumberFormat('en-US').format(value);\n};\n\n/**\n * Formats a number into a compact currency string with 'M' for millions or 'K' for thousands.\n * @param value The number to format.\n * @returns A compact currency string (e.g., \"$1.5M\", \"$1.5K\").\n */\nexport const formatCompactCurrency = (value: number): string => {\n  if (value >= 1000000) {\n    return `$${(value / 1000000).toFixed(1)}M`;\n  }\n  if (value >= 1000) {\n    return `$${(value / 1000).toFixed(1)}K`;\n  }\n  return formatCurrency(value);\n};\n\n/**\n * Returns the Tailwind CSS color class based on the change type.\n * @param changeType The type of change, either 'increase' or 'decrease'.\n * @returns A Tailwind CSS class string for the color.\n */\nexport const getChangeColor = (changeType: 'increase' | 'decrease'): string => {\n  return changeType === 'increase' ? 'text-success-600' : 'text-danger-600';\n};\n\n/**\n * Returns an icon representing the change type.\n * @param changeType The type of change, either 'increase' or 'decrease'.\n * @returns An arrow icon string ('↗' for increase, '↘' for decrease).\n */\nexport const getChangeIcon = (changeType: 'increase' | 'decrease'): string => {\n  return changeType === 'increase' ? '↗' : '↘';\n};\n\n","import React from 'react';\nimport { FinancialMetric } from '../types/finance';\nimport { formatCurrency, formatPercentage, formatNumber, getChangeColor, getChangeIcon } from '../utils/formatters';\n\n/**\n * Props for the MetricCard component.\n * \n * @interface MetricCardProps\n */\ninterface MetricCardProps {\n  /** Financial metric data to display in the card */\n  metric: FinancialMetric;\n}\n\n/**\n * Financial metric card component that displays key performance indicators.\n * \n * Features:\n * - Displays metric title, value, and change indicator\n * - Supports multiple value formats (currency, percentage, number)\n * - Visual change indicators with icons and colors\n * - Responsive typography and layout\n * - Dark mode support\n * - Full accessibility compliance with ARIA labels\n * - Hover effects for better interactivity\n * \n * The card automatically formats values based on the metric's format type\n * and displays trend indicators with appropriate colors and icons.\n * \n * @component\n * @example\n * ```tsx\n * const revenueMetric: FinancialMetric = {\n *   id: 'total-revenue',\n *   title: 'Total Revenue',\n *   value: 1500000,\n *   change: 12.5,\n *   changeType: 'increase',\n *   period: 'vs last month',\n *   format: 'currency'\n * };\n * \n * <MetricCard metric={revenueMetric} />\n * ```\n * \n * @param props - Component props\n * @param props.metric - Financial metric data to display\n * @returns React functional component rendering the metric card\n */\nconst MetricCard: React.FC<MetricCardProps> = ({ metric }) => {\n  /**\n   * Formats the metric value based on the specified format type.\n   * \n   * @param value - Numeric value to format\n   * @param format - Format type (currency, percentage, number)\n   * @returns Formatted string representation of the value\n   */\n  const formatValue = (value: number, format: string) => {\n    switch (format) {\n      case 'currency':\n        return formatCurrency(value); // Format as USD currency (e.g., \"$1,500,000\")\n      case 'percentage':\n        return formatPercentage(value); // Format as percentage (e.g., \"12.5%\")\n      case 'number':\n        return formatNumber(value); // Format with thousand separators (e.g., \"1,500\")\n      default:\n        return value.toString(); // Fallback to simple string conversion\n    }\n  };\n\n  return (\n    <div \n      className=\"bg-white dark:bg-dark-surface p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 border border-gray-200 dark:border-dark-border\"\n      role=\"article\" // Semantic role for accessibility\n      aria-labelledby={`metric-title-${metric.id}`} // Associate with title for screen readers\n      aria-describedby={`metric-change-${metric.id}`} // Associate with change indicator\n    >\n      {/* Card Header: Metric Title */}\n      <div className=\"flex items-center justify-between mb-2\">\n        <h3 \n          id={`metric-title-${metric.id}`} // Unique ID for accessibility linking\n          className=\"text-sm font-medium text-gray-600 dark:text-gray-400\"\n        >\n          {metric.title}\n        </h3>\n        {/* Future enhancement: Add info icon/tooltip for metric descriptions */}\n      </div>\n      \n      {/* Main Value Display */}\n      <div className=\"mb-2\">\n        <p \n          className=\"text-2xl lg:text-3xl font-bold text-gray-900 dark:text-white\"\n          aria-label={`${metric.title} value: ${formatValue(metric.value, metric.format)}`} // Descriptive label for screen readers\n        >\n          {formatValue(metric.value, metric.format)}\n        </p>\n      </div>\n      \n      {/* Change Indicator and Period */}\n      <div className=\"flex items-center justify-between text-sm\">\n        {/* Change percentage with trend indicator */}\n        <span \n          id={`metric-change-${metric.id}`} // Unique ID for accessibility linking\n          className={`flex items-center ${getChangeColor(metric.changeType)}`} // Dynamic color based on change type\n          aria-label={`${metric.changeType === 'increase' ? 'Increased' : 'Decreased'} by ${formatPercentage(metric.change)} ${metric.period}`}\n        >\n          <span className=\"mr-1\" aria-hidden=\"true\">{getChangeIcon(metric.changeType)}</span> {/* Decorative icon */}\n          {formatPercentage(metric.change)}\n        </span>\n        \n        {/* Time period reference */}\n        <span className=\"text-gray-500 dark:text-dark-muted\">{metric.period}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default MetricCard;\n\n","import React from 'react';\n\n/**\n * Button variant types defining the visual style and semantic meaning.\n * \n * @type ButtonVariant\n * - `primary`: Main action button with brand colors\n * - `secondary`: Secondary action with muted styling  \n * - `danger`: Destructive actions with red coloring\n * - `ghost`: Minimal styling for subtle actions\n */\nexport type ButtonVariant = 'primary' | 'secondary' | 'danger' | 'ghost';\n\n/**\n * Button size variants for different use cases.\n * \n * @type ButtonSize\n * - `sm`: Small button for compact spaces\n * - `md`: Default medium size for most use cases\n * - `lg`: Large button for prominent actions\n */\nexport type ButtonSize = 'sm' | 'md' | 'lg';\n\n/**\n * Props for the Button component extending standard HTML button attributes.\n * \n * @interface ButtonProps\n */\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  /** Visual variant of the button (default: 'primary') */\n  variant?: ButtonVariant;\n  \n  /** Size of the button (default: 'md') */\n  size?: ButtonSize;\n  \n  /** Whether the button is in a loading state with spinner */\n  isLoading?: boolean;\n  \n  /** Whether the button should take full width of its container */\n  fullWidth?: boolean;\n  \n  /** Button content (text, icons, or other React elements) */\n  children: React.ReactNode;\n}\n\n/**\n * Flexible button component with multiple variants, sizes, and states.\n * \n * Features:\n * - Multiple visual variants (primary, secondary, danger, ghost)\n * - Responsive sizing options\n * - Loading state with spinner animation\n * - Full width option\n * - Hover and focus animations\n * - Dark mode support\n * - Accessibility compliant with proper focus states\n * \n * @component\n * @example\n * ```tsx\n * // Primary action button\n * <Button variant=\"primary\" size=\"lg\">\n *   Save Changes\n * </Button>\n * \n * // Secondary button with loading state\n * <Button variant=\"secondary\" isLoading={isSubmitting}>\n *   Cancel\n * </Button>\n * \n * // Danger button for destructive actions\n * <Button variant=\"danger\" onClick={handleDelete}>\n *   Delete Item\n * </Button>\n * \n * // Ghost button with custom styling\n * <Button variant=\"ghost\" className=\"text-blue-600\">\n *   Learn More\n * </Button>\n * \n * // Full width button for forms\n * <Button fullWidth size=\"lg\">\n *   Submit Form\n * </Button>\n * ```\n * \n * @param props - Button component props\n * @returns React functional component\n */\nconst Button: React.FC<ButtonProps> = ({\n  variant = 'primary',\n  size = 'md',\n  isLoading = false,\n  fullWidth = false,\n  className = '',\n  children,\n  disabled,\n  ...props\n}) => {\n  // Base styling applied to all button variants (typography, transitions, focus states)\n  const baseClasses = 'font-medium rounded-lg transition-all duration-200 flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transform hover:-translate-y-0.5 active:translate-y-0';\n  \n  // Variant-specific styling with dark mode support\n  const variantClasses = {\n    primary: 'bg-primary-600 hover:bg-primary-700 disabled:bg-primary-400 text-white focus:ring-primary-500 shadow-md hover:shadow-lg',\n    secondary: 'bg-gray-200 hover:bg-gray-300 dark:bg-dark-surface dark:hover:bg-dark-hover-surface text-gray-800 dark:text-dark-primary focus:ring-gray-500 border border-gray-300 dark:border-dark-border shadow-sm hover:shadow-md',\n    danger: 'bg-danger-600 hover:bg-danger-700 disabled:bg-danger-400 text-white focus:ring-danger-500 shadow-md hover:shadow-lg',\n    ghost: 'bg-transparent hover:bg-gray-100 dark:hover:bg-dark-surface text-gray-700 dark:text-dark-primary focus:ring-gray-500'\n  };\n\n  // Size-specific padding and text scaling\n  const sizeClasses = {\n    sm: 'px-3 py-1.5 text-sm',\n    md: 'px-4 py-2 text-sm',\n    lg: 'px-6 py-3 text-base'\n  };\n\n  // Optional full width styling\n  const widthClass = fullWidth ? 'w-full' : '';\n\n  // Combine all CSS classes for the button element\n  const combinedClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${widthClass} ${className}`;\n\n  return (\n    <button\n      className={combinedClasses}\n      disabled={disabled || isLoading} // Disable during loading or when explicitly disabled\n      {...props} // Spread remaining HTML button attributes\n    >\n      {isLoading ? (\n        // Loading state: show spinner and loading text\n        <>\n          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\" />\n          Loading...\n        </>\n      ) : (\n        // Normal state: show provided children content\n        children\n      )}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\r\n\r\n/**\r\n * Props for the LoadingSpinner component.\r\n * \r\n * @interface LoadingSpinnerProps\r\n */\r\ninterface LoadingSpinnerProps {\r\n  /** Size variant of the spinner (default: 'md') */\r\n  size?: 'sm' | 'md' | 'lg';\r\n  \r\n  /** Main loading text displayed below the spinner (default: 'Loading...') */\r\n  text?: string;\r\n  \r\n  /** Optional secondary text for additional context */\r\n  subtext?: string;\r\n  \r\n  /** Additional CSS classes to apply to the container */\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * Customizable loading spinner component with text and animations.\r\n * \r\n * Features:\r\n * - Multiple size options (small, medium, large)\r\n * - Customizable loading text and subtext\r\n * - Smooth spinning animation\r\n * - Dark mode support\r\n * - Responsive typography\r\n * - Centered layout with proper spacing\r\n * - Accessible with proper ARIA attributes\r\n * \r\n * Used throughout the application for loading states, data fetching,\r\n * and async operations to provide visual feedback to users.\r\n * \r\n * @component\r\n * @example\r\n * ```tsx\r\n * // Basic spinner\r\n * <LoadingSpinner />\r\n * \r\n * // Large spinner with custom text\r\n * <LoadingSpinner \r\n *   size=\"lg\" \r\n *   text=\"Loading Dashboard...\" \r\n *   subtext=\"Please wait while we fetch your data\"\r\n * />\r\n * \r\n * // Small spinner for inline loading\r\n * <LoadingSpinner \r\n *   size=\"sm\" \r\n *   text=\"Saving...\" \r\n *   className=\"py-2\"\r\n * />\r\n * \r\n * // Full screen loading overlay\r\n * <LoadingSpinner \r\n *   size=\"lg\"\r\n *   text=\"Initializing Application\"\r\n *   className=\"min-h-screen bg-gray-50 dark:bg-dark-bg\"\r\n * />\r\n * ```\r\n * \r\n * @param props - Component props\r\n * @returns React functional component rendering the loading spinner\r\n */\r\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \r\n  size = 'md', \r\n  text = 'Loading...', \r\n  subtext,\r\n  className = '' \r\n}) => {\r\n  // Size mapping for spinner dimensions\r\n  const sizeClasses = {\r\n    sm: 'h-6 w-6',   // 24x24px for inline/small spaces\r\n    md: 'h-12 w-12', // 48x48px for standard loading states\r\n    lg: 'h-16 w-16'  // 64x64px for prominent loading states\r\n  };\r\n\r\n  const spinnerSize = sizeClasses[size];\r\n\r\n  return (\r\n    <div className={`flex items-center justify-center p-4 ${className}`} role=\"status\" aria-live=\"polite\">\r\n      <div className=\"text-center\">\r\n        {/* Animated spinner circle */}\r\n        <div \r\n          className={`animate-spin rounded-full ${spinnerSize} border-b-2 border-primary-600 mx-auto mb-4`}\r\n          aria-hidden=\"true\" // Decorative element, screen readers will use the text\r\n        />\r\n        \r\n        {/* Main loading text */}\r\n        {text && (\r\n          <p className=\"text-gray-600 dark:text-gray-300 font-medium text-sm sm:text-base\">\r\n            {text}\r\n          </p>\r\n        )}\r\n        \r\n        {/* Optional secondary text for additional context */}\r\n        {subtext && (\r\n          <p className=\"text-xs sm:text-sm text-gray-500 dark:text-gray-400 mt-1 max-w-xs mx-auto\">\r\n            {subtext}\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport { Hospital } from '../types/finance';\r\nimport { User } from '../types/auth';\r\n\r\ninterface DashboardLoadingProps {\r\n  hospitals: Hospital[];\r\n  selectedHospitalId: string;\r\n  selectedYear: number;\r\n  availableYears: number[];\r\n  onHospitalChange: (hospitalId: string) => void;\r\n  onYearChange: (year: number) => void;\r\n  user: User | null;\r\n  signOut: () => void;\r\n}\r\n\r\nconst DashboardLoading: React.FC<DashboardLoadingProps> = ({\r\n  hospitals,\r\n  selectedHospitalId,\r\n  selectedYear,\r\n  availableYears,\r\n  onHospitalChange,\r\n  onYearChange,\r\n}) => {\r\n  const selectedHospital = hospitals.find(h => h.id === selectedHospitalId);\r\n\r\n  return (\r\n    <div className=\"text-gray-900 dark:text-gray-100\">\r\n      <Header\r\n        hospitals={hospitals}\r\n        selectedHospitalId={selectedHospitalId}\r\n        selectedYear={selectedYear}\r\n        availableYears={availableYears}\r\n        onHospitalChange={onHospitalChange}\r\n        onYearChange={onYearChange}\r\n      />\r\n      \r\n      <main className=\"p-4 sm:p-6\">\r\n        <LoadingSpinner\r\n          size=\"md\"\r\n          text=\"Loading dashboard data...\"\r\n          subtext={selectedHospital ? `${selectedHospital.name} • ${selectedYear}` : ''}\r\n          className=\"min-h-96\"\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardLoading;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport { Hospital } from '../types/finance';\r\nimport { User } from '../types/auth';\r\n\r\ninterface DashboardNoDataProps {\r\n  hospitals: Hospital[];\r\n  selectedHospitalId: string;\r\n  selectedYear: number;\r\n  availableYears: number[];\r\n  onHospitalChange: (hospitalId: string) => void;\r\n  onYearChange: (year: number) => void;\r\n  user: User | null;\r\n  signOut: () => void;\r\n}\r\n\r\n/**\r\n * Renders the \"no data\" state of the dashboard.\r\n *\r\n * @param {DashboardNoDataProps} props The component props.\r\n * @returns {React.ReactElement} The rendered \"no data\" state.\r\n */\r\nconst DashboardNoData: React.FC<DashboardNoDataProps> = ({\r\n  hospitals,\r\n  selectedHospitalId,\r\n  selectedYear,\r\n  availableYears,\r\n  onHospitalChange,\r\n  onYearChange,\r\n}) => {\r\n  return (\r\n    <div className=\"text-gray-900 dark:text-gray-100\">\r\n      <Header\r\n        hospitals={hospitals}\r\n        selectedHospitalId={selectedHospitalId}\r\n        selectedYear={selectedYear}\r\n        availableYears={availableYears}\r\n        onHospitalChange={onHospitalChange}\r\n        onYearChange={onYearChange}\r\n      />\r\n      \r\n      <main className=\"p-4 sm:p-6\">\r\n        <div className=\"text-center py-12\">\r\n          <div className=\"text-gray-400 mb-4\">\r\n            <svg className=\"w-16 h-16 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n            </svg>\r\n          </div>\r\n          <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No Data Available</h3>\r\n          <p className=\"text-gray-600 dark:text-gray-300\">\r\n            No financial data found for the selected hospital and year combination.\r\n          </p>\r\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 mt-2\">\r\n            Please select a different hospital or year.\r\n          </p>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardNoData;\r\n","import React, { useState, useEffect, useCallback, useMemo, lazy, Suspense } from 'react';\nimport Header from './Header';\nimport MetricCard from './MetricCard';\nimport { logger } from '../utils/logger';\nimport {\n  hospitals,\n  availableYears,\n  getHospitalData\n} from '../data/mockData';\nimport { HospitalData } from '../types/finance';\nimport { useAuth } from '../hooks/useAuth';\nimport Dropdown from './Dropdown';\nimport Button from './Button';\nimport DashboardLoading from './DashboardLoading';\nimport DashboardNoData from './DashboardNoData';\nimport LoadingSpinner from './LoadingSpinner';\n\nconst RevenueChart = lazy(() => import('./RevenueChart'));\nconst ExpensePieChart = lazy(() => import('./ExpensePieChart'));\nconst CashFlowChart = lazy(() => import('./CashFlowChart'));\nconst PatientMetricsCard = lazy(() => import('./PatientMetricsCard'));\nconst DepartmentTable = lazy(() => import('./DepartmentTable'));\n\n/**\n * Main dashboard component for displaying hospital financial data.\n * \n * @returns {React.ReactElement} The rendered dashboard component.\n */\nconst Dashboard: React.FC = () => {\n  const { user, signOut, getAccessibleHospitals, canAccessHospital } = useAuth();\n  const accessibleHospitals = getAccessibleHospitals();\n  const filteredHospitals = useMemo(() => {\n    return hospitals.filter(h => accessibleHospitals.includes(h.id));\n  }, [accessibleHospitals]);\n  \n  const [selectedHospitalId, setSelectedHospitalId] = useState<string>(\n    accessibleHospitals[0] || ''\n  );\n  const [selectedYear, setSelectedYear] = useState<number>(2024);\n  const [currentData, setCurrentData] = useState<HospitalData | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [showFilters, setShowFilters] = useState(false);\n\n  // Update data when hospital or year changes\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    \n    if (selectedHospitalId && selectedYear) {\n      setIsLoading(true);\n      logger.info('Loading dashboard data', {\n        context: 'Dashboard',\n        data: { hospitalId: selectedHospitalId, year: selectedYear }\n      });\n      \n      // Simulate loading delay for better UX\n      timeout = setTimeout(() => {\n        const data = getHospitalData(selectedHospitalId, selectedYear);\n        if (!data) {\n          logger.warn('No data available for hospital and year', {\n            context: 'Dashboard',\n            data: { hospitalId: selectedHospitalId, year: selectedYear }\n          });\n        }\n        setCurrentData(data || null);\n        setIsLoading(false);\n      }, 500);\n    }\n\n    return () => {\n      if (timeout) {\n        clearTimeout(timeout);\n      }\n    };\n  }, [selectedHospitalId, selectedYear]);\n\n  const handleHospitalChange = useCallback((hospitalId: string) => {\n    // Check if user has access to the selected hospital\n    if (canAccessHospital(hospitalId)) {\n      logger.info('Hospital selection changed', {\n        context: 'Dashboard',\n        data: { hospitalId }\n      });\n      setSelectedHospitalId(hospitalId);\n    } else {\n      logger.warn('Unauthorized hospital access attempt', {\n        context: 'Dashboard',\n        data: { hospitalId }\n      });\n    }\n  }, [canAccessHospital]);\n\n  const handleYearChange = useCallback((year: number) => {\n    logger.info('Year selection changed', {\n      context: 'Dashboard',\n      data: { year, previousYear: selectedYear }\n    });\n    setSelectedYear(year);\n  }, [selectedYear]);\n\n  const hospitalOptions = useMemo(() => {\n    return filteredHospitals.map(hospital => ({\n      value: hospital.id,\n      label: hospital.name,\n      subtitle: `${hospital.type} • ${hospital.location}`\n    }));\n  }, [filteredHospitals]);\n\n  const yearOptions = useMemo(() => {\n    return availableYears.map(year => ({\n      value: year.toString(),\n      label: year.toString()\n    }));\n  }, []);\n\n  if (isLoading) {\n    return (\n      <DashboardLoading \n        hospitals={filteredHospitals}\n        selectedHospitalId={selectedHospitalId}\n        selectedYear={selectedYear}\n        availableYears={availableYears}\n        onHospitalChange={handleHospitalChange}\n        onYearChange={handleYearChange}\n        user={user}\n        signOut={signOut}\n      />\n    );\n  }\n\n  if (!currentData) {\n    return (\n      <DashboardNoData\n        hospitals={filteredHospitals}\n        selectedHospitalId={selectedHospitalId}\n        selectedYear={selectedYear}\n        availableYears={availableYears}\n        onHospitalChange={handleHospitalChange}\n        onYearChange={handleYearChange}\n        user={user}\n        signOut={signOut}\n      />\n    );\n  }\n\n  return (\n    <div className=\"text-gray-900 dark:text-dark-primary relative\">\n      <Header\n        hospitals={filteredHospitals}\n        selectedHospitalId={selectedHospitalId}\n        selectedYear={selectedYear}\n        availableYears={availableYears}\n        onHospitalChange={handleHospitalChange}\n        onYearChange={handleYearChange}\n      />\n      \n      <main className=\"p-3 sm:p-4 lg:p-6 xl:p-8 max-w-screen-2xl mx-auto\">\n        {/* Responsive Filter Bar */}\n        <div className=\"xl:hidden mb-4\">\n          <Button \n            onClick={() => setShowFilters(!showFilters)}\n            className=\"w-full\"\n            aria-expanded={showFilters}\n            aria-controls=\"mobile-filter-panel\"\n          >\n            <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\" />\n            </svg>\n            {showFilters ? 'Hide' : 'Show'} Filters\n          </Button>\n\n          {showFilters && (\n            <div id=\"mobile-filter-panel\" className=\"mt-4 p-4 bg-white dark:bg-dark-surface rounded-lg shadow-md border border-gray-200 dark:border-dark-border\">\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Hospital\n                  </label>\n                  <Dropdown\n                    options={hospitalOptions}\n                    value={selectedHospitalId}\n                    onChange={handleHospitalChange}\n                    placeholder=\"Select Hospital\"\n                    className=\"w-full\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                    Year\n                  </label>\n                  <Dropdown\n                    options={yearOptions}\n                    value={selectedYear.toString()}\n                    onChange={(value) => handleYearChange(parseInt(value))}\n                    placeholder=\"Select Year\"\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n        \n        {/* Key Metrics */}\n        <div className=\"mb-6 lg:mb-8\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">Key Financial Metrics</h2>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6\">\n            {currentData.financialMetrics.map((metric) => (\n              <MetricCard key={metric.id} metric={metric} />\n            ))}\n          </div>\n        </div>\n\n        <Suspense fallback={<LoadingSpinner text=\"Loading charts...\" />}>\n          {/* Charts Section */}\n          <div className=\"space-y-6 lg:space-y-8 mb-6 lg:mb-8\">\n            {/* Revenue Chart - Full Width */}\n            <div className=\"w-full\">\n              <RevenueChart data={currentData.revenueData} />\n            </div>\n\n            {/* Side-by-side charts on larger screens */}\n            <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6 lg:gap-8\">\n              <ExpensePieChart data={currentData.expenseBreakdown} />\n              <CashFlowChart data={currentData.cashFlowData} />\n            </div>\n          </div>\n\n          {/* Patient Metrics */}\n          <div className=\"mb-6 lg:mb-8\">\n            <PatientMetricsCard metrics={currentData.patientMetrics} />\n          </div>\n\n          {/* Department Performance */}\n          <div className=\"mb-6 lg:mb-8\">\n            <DepartmentTable departments={currentData.departmentFinances} />\n          </div>\n        </Suspense>\n\n        {/* Footer */}\n        <footer className=\"text-center text-sm text-gray-500 dark:text-gray-400 mt-12 py-6 border-t border-gray-200 dark:border-gray-700\">\n          <p>© 2024 Hospital Finance Dashboard. All rights reserved.</p>\n          <p className=\"mt-1\">Last updated: {currentData.lastUpdated}</p>\n        </footer>\n      </main>\n    </div>\n  );\n};\n\nexport default Dashboard;\n\n","import { Component, ErrorInfo, ReactNode } from 'react';\r\nimport { logger } from '../utils/logger';\r\nimport Button from './Button';\r\n\r\ninterface Props {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error?: Error;\r\n  errorInfo?: ErrorInfo;\r\n}\r\n\r\n/**\r\n * A component that catches JavaScript errors anywhere in its child component tree,\r\n * logs those errors, and displays a fallback UI instead of the component tree that crashed.\r\n */\r\nclass ErrorBoundary extends Component<Props, State> {\r\n  public override state: State = {\r\n    hasError: false\r\n  };\r\n\r\n  public static getDerivedStateFromError(error: Error): State {\r\n    // Update state so the next render will show the fallback UI\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  public override componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    logger.error('Uncaught error in component', {\r\n      context: 'ErrorBoundary',\r\n      data: {\r\n        error: {\r\n          name: error.name,\r\n          message: error.message,\r\n          stack: error.stack\r\n        },\r\n        componentStack: errorInfo.componentStack\r\n      }\r\n    });\r\n    this.setState({\r\n      error,\r\n      errorInfo\r\n    });\r\n  }\r\n\r\n  public override render() {\r\n    if (this.state.hasError) {\r\n      if (this.props.fallback) {\r\n        return this.props.fallback;\r\n      }\r\n\r\n      return (\r\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-slate-900 text-gray-900 dark:text-gray-100\">\r\n          <div className=\"max-w-md w-full mx-4\">\r\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 text-center\">\r\n              <div className=\"w-16 h-16 bg-danger-100 dark:bg-danger-900/20 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <svg className=\"w-8 h-8 text-danger-600 dark:text-danger-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\r\n                </svg>\r\n              </div>\r\n              \r\n              <h2 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">\r\n                Something went wrong\r\n              </h2>\r\n              \r\n              <p className=\"text-gray-600 dark:text-gray-300 mb-6\">\r\n                We encountered an unexpected error. Please try refreshing the page or contact support if the problem persists.\r\n              </p>\r\n              \r\n              <div className=\"space-y-3\">\r\n                <Button\r\n                  onClick={() => window.location.reload()}\r\n                  fullWidth\r\n                >\r\n                  Refresh Page\r\n                </Button>\r\n                \r\n                <Button\r\n                  onClick={() => this.setState({ hasError: false })}\r\n                  variant=\"secondary\"\r\n                  fullWidth\r\n                >\r\n                  Try Again\r\n                </Button>\r\n              </div>\r\n\r\n              {import.meta.env.DEV && this.state.error && (\r\n                <details className=\"mt-6 text-left\">\r\n                  <summary className=\"cursor-pointer text-sm text-gray-500 dark:text-gray-400 mb-2\">\r\n                    Error Details (Development)\r\n                  </summary>\r\n                  <div className=\"bg-gray-100 dark:bg-gray-700 rounded p-3 text-xs overflow-auto\">\r\n                    <pre className=\"whitespace-pre-wrap text-danger-600 dark:text-danger-400\">\r\n                      {this.state.error.toString()}\r\n                      {this.state.errorInfo?.componentStack}\r\n                    </pre>\r\n                  </div>\r\n                </details>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","// NOTE: These credentials are for demo purposes only\r\n// In a real application, these would be managed through a secure backend\r\nexport const demoAccounts = [\r\n  { \r\n    role: 'Admin',\r\n    email: import.meta.env.VITE_DEMO_ADMIN_EMAIL || 'admin@hospitalfinance.com',\r\n    password: import.meta.env.VITE_DEMO_ADMIN_PASSWORD || 'UsamaHF2024!'\r\n  },\r\n  {\r\n    role: 'Hospital Owner',\r\n    email: import.meta.env.VITE_DEMO_OWNER_EMAIL || 'owner@metrogeneral.com',\r\n    password: import.meta.env.VITE_DEMO_OWNER_PASSWORD || 'OwnerMG2024!'\r\n  },\r\n  {\r\n    role: 'Branch Manager',\r\n    email: import.meta.env.VITE_DEMO_MANAGER_EMAIL || 'manager@metrogeneral.com',\r\n    password: import.meta.env.VITE_DEMO_MANAGER_PASSWORD || 'ManagerMG2024!'\r\n  }\r\n];","import React, { useState } from 'react';\n\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n}\n\nconst Input: React.FC<InputProps> = ({ label, id, type, ...props }) => {\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\n  \n  const isPassword = type === 'password';\n  const currentType = isPassword ? (isPasswordVisible ? 'text' : 'password') : type;\n\n  return (\n    <div className=\"relative\">\n      <input\n        id={id}\n        type={currentType}\n        className=\"w-full px-3 py-2 bg-transparent border-b-2 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-white focus:outline-none focus:border-primary-500 transition-colors\"\n        {...props}\n        placeholder={props.placeholder || ' '}\n      />\n      <label \n        htmlFor={id} \n        className=\"absolute left-3 -top-3.5 text-sm text-gray-600 dark:text-gray-400 transition-all duration-200 peer-placeholder-shown:top-2 peer-placeholder-shown:text-base peer-focus:-top-3.5 peer-focus:text-sm peer-focus:text-primary-600 dark:peer-focus:text-primary-400\"\n      >\n        {label}\n      </label>\n      {isPassword && (\n        <button\n          type=\"button\"\n          onClick={() => setIsPasswordVisible(!isPasswordVisible)}\n          className=\"absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200\"\n          aria-label={isPasswordVisible ? 'Hide password' : 'Show password'}\n        >\n          {isPasswordVisible ? (\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a9.97 9.97 0 01-1.563 3.029m0 0l-2.14 2.14\" />\n            </svg>\n          ) : (\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.522 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.478 0-8.268-2.943-9.542-7z\" />\n            </svg>\n          )}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n","import React from 'react';\r\n\r\ninterface CardProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ children, className = '' }) => {\r\n  return (\r\n    <div className={`bg-white dark:bg-dark-surface rounded-lg shadow-lg p-8 space-y-6 ${className}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { validatePassword, formatAuthError } from '../../utils/auth';\nimport { demoAccounts } from '../../config/demo';\nimport { logger } from '../../utils/logger';\nimport Input from '../ui/Input';\nimport Card from '../ui/Card';\nimport Button from '../Button';\n\ninterface SignInPageProps {\n  onSwitchToSignUp: () => void;\n}\n\nconst SignInPage: React.FC<SignInPageProps> = ({ onSwitchToSignUp }: SignInPageProps) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const { signIn, isLoading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrorMessage('');\n\n    const validation = validatePassword(password);\n    if (!validation.isValid) {\n      setErrorMessage(validation.errors[0] || 'Invalid password');\n      return;\n    }\n\n    try {\n      logger.info('Sign in attempt', { context: 'SignInPage', data: { email } });\n      await signIn(email, password);\n      logger.info('Sign in successful', { context: 'SignInPage', data: { email } });\n    } catch (error) {\n      logger.error('Sign in failed', { context: 'SignInPage', data: { email, error } });\n      setErrorMessage(formatAuthError(error));\n    }\n  };\n\n  const fillDemo = (email: string, password: string) => {\n    setEmail(email);\n    setPassword(password);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-dark-bg text-gray-900 dark:text-dark-primary flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 transition-colors duration-200\">\n      <div className=\"max-w-md w-full\">\n        <div className=\"text-center mb-8 animate-fade-in-down\">\n          <div className=\"mx-auto w-16 h-16 bg-primary-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg\">\n            <svg className=\"w-10 h-10 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6V4m0 2v10m0-10l3 3m-3-3l-3 3\" />\n              <path d=\"M12 18v2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} />\n              <path d=\"M4 12h2m8 0h2m-4 0h-2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} />\n            </svg>\n          </div>\n          <h2 className=\"text-3xl font-bold tracking-tight\">Welcome back</h2>\n          <p className=\"mt-2 text-gray-600 dark:text-dark-muted\">Sign in to your Hospital Finance Dashboard</p>\n        </div>\n\n        <Card className=\"mb-6 animate-fade-in-up\">\n          <div className=\"p-2 sm:p-4\">\n            <h3 className=\"text-sm font-medium text-gray-800 dark:text-gray-200 mb-3 text-center\">\n              Or sign in with a demo account:\n            </h3>\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2\">\n              {demoAccounts.map((account, index) => (\n                <button\n                  key={index}\n                  onClick={() => fillDemo(account.email, account.password)}\n                  className=\"w-full text-center text-xs bg-white dark:bg-dark-surface hover:bg-gray-100 dark:hover:bg-dark-hover-surface border border-gray-200 dark:border-dark-border rounded-lg px-2 py-2 transition-all duration-200 shadow-sm hover:shadow-md\"\n                >\n                  <span className=\"font-semibold text-primary-600 dark:text-primary-400 capitalize\">\n                    {account.role.replace('_', ' ')}\n                  </span>\n                </button>\n              ))}\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"animate-fade-in-up animation-delay-200\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {errorMessage && (\n              <div className=\"bg-danger-50 border border-danger-200 text-danger-700 px-4 py-3 rounded-lg text-sm\">\n                {errorMessage}\n              </div>\n            )}\n            <Input\n              id=\"email\"\n              type=\"email\"\n              label=\"Email Address\"\n              required\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n            />\n            <Input\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              required\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter your password\"\n            />\n            <Button type=\"submit\" isLoading={isLoading} fullWidth>\n              Sign In\n            </Button>\n          </form>\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-dark-muted\">\n              Don't have an account?{' '}\n              <button\n                type=\"button\"\n                onClick={onSwitchToSignUp}\n                className=\"text-primary-600 hover:text-primary-700 font-medium\"\n              >\n                Sign up\n              </button>\n            </p>\n          </div>\n        </Card>\n\n        <div className=\"text-center text-xs text-gray-500 dark:text-dark-muted mt-8 animate-fade-in-up animation-delay-400\">\n          <p>© 2024 Hospital Finance Dashboard. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignInPage;\n","import React, { useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { UserRole, SignUpData } from '../../types/auth';\nimport { hospitals } from '../../data/mockData';\nimport { roleDescriptions } from '../../data/mockUsers';\nimport Input from '../ui/Input';\nimport Card from '../ui/Card';\nimport Button from '../Button';\n\ninterface SignUpPageProps {\n  onSwitchToSignIn: () => void;\n}\n\nconst SignUpPage: React.FC<SignUpPageProps> = ({ onSwitchToSignIn }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    role: 'branch_owner' as UserRole,\n    hospitalId: '',\n    hospitalIds: [] as string[]\n  });\n  const [error, setError] = useState('');\n  const { signUp, isLoading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    if (formData.role === 'branch_owner' && !formData.hospitalId) {\n      setError('Please select a hospital for branch manager role');\n      return;\n    }\n\n    if (formData.role === 'hospital_owner' && formData.hospitalIds.length === 0) {\n      setError('Please select at least one hospital for hospital owner role');\n      return;\n    }\n\n    try {\n      const signUpData: SignUpData = {\n        name: formData.name,\n        email: formData.email,\n        password: formData.password,\n        role: formData.role\n      };\n\n      if (formData.role === 'branch_owner' && formData.hospitalId) {\n        signUpData.hospitalId = formData.hospitalId;\n      }\n      \n      if (formData.role === 'hospital_owner' && formData.hospitalIds.length > 0) {\n        signUpData.hospitalIds = formData.hospitalIds;\n      }\n\n      await signUp(signUpData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    }\n  };\n\n  const handleInputChange = (field: string, value: string | string[]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleHospitalSelection = (hospitalId: string, checked: boolean) => {\n    if (checked) {\n      setFormData(prev => ({\n        ...prev,\n        hospitalIds: [...prev.hospitalIds, hospitalId]\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        hospitalIds: prev.hospitalIds.filter(id => id !== hospitalId)\n      }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-dark-bg flex items-center justify-center py-6 sm:py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-lg w-full\">\n        <div className=\"text-center mb-8 animate-fade-in-down\">\n          <div className=\"mx-auto w-16 h-16 bg-primary-600 rounded-2xl flex items-center justify-center mb-4 shadow-lg\">\n            <svg className=\"w-10 h-10 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6V4m0 2v10m0-10l3 3m-3-3l-3 3\" />\n              <path d=\"M12 18v2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} />\n              <path d=\"M4 12h2m8 0h2m-4 0h-2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} />\n            </svg>\n          </div>\n          <h2 className=\"text-3xl font-bold tracking-tight\">Create an Account</h2>\n          <p className=\"mt-2 text-gray-600 dark:text-dark-muted\">Join the Hospital Finance Dashboard</p>\n        </div>\n\n        <Card className=\"animate-fade-in-up\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {error && (\n              <div className=\"bg-danger-50 dark:bg-danger-900/20 border border-danger-200 dark:border-danger-800 text-danger-700 dark:text-danger-300 px-4 py-3 rounded-lg text-sm animate-shake\">\n                {error}\n              </div>\n            )}\n\n            <Input\n              id=\"name\"\n              type=\"text\"\n              label=\"Full Name\"\n              required\n              value={formData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              placeholder=\"Enter your full name\"\n            />\n\n            <Input\n              id=\"email\"\n              type=\"email\"\n              label=\"Email Address\"\n              required\n              value={formData.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              placeholder=\"Enter your email\"\n            />\n\n            <Input\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              required\n              value={formData.password}\n              onChange={(e) => handleInputChange('password', e.target.value)}\n              placeholder=\"Create a password\"\n            />\n\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              label=\"Confirm Password\"\n              required\n              value={formData.confirmPassword}\n              onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n              placeholder=\"Confirm your password\"\n            />\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Account Type\n              </label>\n              <div className=\"space-y-3\">\n                {(Object.keys(roleDescriptions) as UserRole[]).map((role) => (\n                  <div key={role} className=\"flex items-start\">\n                    <input\n                      id={role}\n                      type=\"radio\"\n                      name=\"role\"\n                      value={role}\n                      checked={formData.role === role}\n                      onChange={(e) => handleInputChange('role', e.target.value as UserRole)}\n                      className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700\"\n                      disabled={role === 'admin'}\n                    />\n                    <div className=\"ml-3\">\n                      <label htmlFor={role} className=\"block text-sm font-medium text-gray-900 dark:text-white\">\n                        {roleDescriptions[role].title}\n                        {role === 'admin' && <span className=\"text-gray-400 dark:text-gray-500 ml-2\">(Contact admin)</span>}\n                      </label>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        {roleDescriptions[role].description}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {formData.role === 'branch_owner' && (\n              <div>\n                <label htmlFor=\"hospitalId\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Select Hospital\n                </label>\n                <div className=\"relative\">\n                  <select\n                    id=\"hospitalId\"\n                    value={formData.hospitalId}\n                    onChange={(e) => handleInputChange('hospitalId', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 appearance-none\"\n                    required\n                  >\n                    <option value=\"\">Choose a hospital...</option>\n                    {hospitals.map((hospital) => (\n                      <option key={hospital.id} value={hospital.id}>\n                        {hospital.name} ({hospital.type} • {hospital.location})\n                      </option>\n                    ))}\n                  </select>\n                  <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3\">\n                    <svg className=\"h-5 w-5 text-gray-400 dark:text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {formData.role === 'hospital_owner' && (\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Select Hospitals (you can select multiple)\n                </label>\n                <div className=\"space-y-2 max-h-32 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-lg p-3 bg-gray-50 dark:bg-gray-700\">\n                  {hospitals.map((hospital) => (\n                    <div key={hospital.id} className=\"flex items-center\">\n                      <input\n                        id={`hospital-${hospital.id}`}\n                        type=\"checkbox\"\n                        checked={formData.hospitalIds.includes(hospital.id)}\n                        onChange={(e) => handleHospitalSelection(hospital.id, e.target.checked)}\n                        className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded\"\n                      />\n                      <label htmlFor={`hospital-${hospital.id}`} className=\"ml-2 text-sm text-gray-900 dark:text-white\">\n                        {hospital.name}\n                        <span className=\"text-gray-500 dark:text-gray-400 ml-1\">({hospital.type} • {hospital.location})</span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Button type=\"submit\" isLoading={isLoading} fullWidth>\n              Create Account\n            </Button>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-dark-muted\">\n                Already have an account?{' '}\n                <button\n                  type=\"button\"\n                  onClick={onSwitchToSignIn}\n                  className=\"text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 font-medium\"\n                >\n                  Sign in\n                </button>\n              </p>\n            </div>\n          </form>\n        </Card>\n\n        <div className=\"text-center text-xs text-gray-500 dark:text-dark-muted mt-8 animate-fade-in-up animation-delay-200\">\n          <p>© 2024 Hospital Finance Dashboard. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUpPage;\n","import React, { useState } from 'react';\nimport SignInPage from './SignInPage';\nimport SignUpPage from './SignUpPage';\nimport LoadingSpinner from '../LoadingSpinner';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface AuthWrapperProps {\n  children: React.ReactNode;\n}\n\n/**\n * A component that wraps the main application and handles authentication.\n * It displays a loading spinner while checking the user's authentication status,\n * and shows the sign-in or sign-up page if the user is not authenticated.\n *\n * @param {AuthWrapperProps} props The component props.\n * @param {React.ReactNode} props.children The child components to render if the user is authenticated.\n * @returns {React.ReactElement} The rendered component.\n */\nconst AuthWrapper: React.FC<AuthWrapperProps> = ({ children }) => {\n  const [isSignUp, setIsSignUp] = useState(false);\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <LoadingSpinner\n        size=\"md\"\n        text=\"Loading...\"\n        className=\"min-h-screen\"\n      />\n    );\n  }\n\n  if (!isAuthenticated) {\n    return isSignUp ? (\n      <SignUpPage onSwitchToSignIn={() => setIsSignUp(false)} />\n    ) : (\n      <SignInPage onSwitchToSignUp={() => setIsSignUp(true)} />\n    );\n  }\n\n  return <>{children}</>;\n};\n\nexport default AuthWrapper;\n","import { Suspense } from 'react';\nimport Dashboard from './components/Dashboard';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport { AuthProvider } from './contexts/AuthContext';\nimport { ThemeProvider } from './contexts/ThemeContext';\nimport AuthWrapper from './components/auth/AuthWrapper';\nimport LoadingSpinner from './components/LoadingSpinner';\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <ThemeProvider>\n        <AuthProvider>\n          <div className=\"App min-h-screen bg-gray-100 dark:bg-dark-bg text-gray-900 dark:text-dark-primary transition-colors duration-200 overflow-x-hidden\">\n            <AuthWrapper>\n              <Suspense fallback={<LoadingSpinner text=\"Loading Dashboard...\" className=\"min-h-screen\" />}>\n                <Dashboard />\n              </Suspense>\n            </AuthWrapper>\n          </div>\n        </AuthProvider>\n      </ThemeProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport App from './App.tsx'\r\nimport './index.css'\r\n\r\nReactDOM.createRoot(document.getElementById('root')!).render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n)\r\n\r\n"],"file":"assets/main-3qpWajQq.js"}