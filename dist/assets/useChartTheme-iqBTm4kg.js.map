{"version":3,"file":"useChartTheme-iqBTm4kg.js","sources":["../../tailwind.config.js","../../src/hooks/useChartTheme.ts"],"sourcesContent":["/**\n * Tailwind CSS Configuration for Hospital Finance Dashboard\n * \n * This configuration extends Tailwind's default theme with:\n * - Custom color palette for medical/financial themes\n * - Dark mode support with optimized colors\n * - Custom animations and keyframes\n * - Responsive breakpoints matching design system\n * - Semantic color naming for better maintainability\n * \n * @type {import('tailwindcss').Config}\n */\nexport default {\n  // Content sources for Tailwind to scan for classes\n  content: [\n    \"./index.html\",                    // Main HTML entry point\n    \"./src/**/*.{js,ts,jsx,tsx}\",     // All source files with these extensions\n  ],\n  \n  // Enable class-based dark mode (controlled via 'dark' class on html/body)\n  darkMode: 'class',\n  theme: {\n    // Custom responsive breakpoints (extending defaults)\n    screens: {\n      'xs': '475px',      // Extra small: mobile landscape\n      'sm': '640px',      // Small: small tablets\n      'md': '768px',      // Medium: tablets\n      'lg': '1024px',     // Large: laptops\n      'xl': '1280px',     // Extra large: desktops\n      '2xl': '1536px',    // 2x extra large: large desktops\n    },\n    \n    extend: {\n      // Extended color palette for the dashboard\n      colors: {\n        // Primary brand color (blue) - used for main actions and branding\n        primary: {\n          50: '#eff6ff',   // Very light blue for backgrounds\n          100: '#dbeafe',\n          200: '#bfdbfe',\n          300: '#93c5fd',\n          400: '#60a5fa', // Used in dark mode\n          500: '#3b82f6', // Main brand color\n          600: '#2563eb', // Default button color\n          700: '#1d4ed8',\n          800: '#1e40af',\n          900: '#1e3a8a', // Darkest shade\n        },\n        // Success/positive color (green) - for positive metrics, success states\n        success: {\n          50: '#f0fdf4',\n          100: '#dcfce7',\n          200: '#bbf7d0',\n          300: '#86efac',\n          400: '#4ade80', // Used in dark mode\n          500: '#22c55e', // Main success color\n          600: '#16a34a', // Default success actions\n          700: '#15803d',\n          800: '#166534',\n          900: '#14532d',\n        },\n        warning: {\n          50: '#fffbeb',\n          100: '#fef3c7',\n          200: '#fed7aa',\n          300: '#fdba74',\n          400: '#fb923c',\n          500: '#f59e0b',\n          600: '#d97706',\n          700: '#b45309',\n          800: '#92400e',\n          900: '#78350f',\n        },\n        // Danger/error color (red) - for negative metrics, error states, destructive actions\n        danger: {\n          50: '#fef2f2',\n          100: '#fee2e2',\n          200: '#fecaca',\n          300: '#fca5a5',\n          400: '#f87171', // Used in dark mode\n          500: '#ef4444', // Main error color\n          600: '#dc2626', // Default error actions\n          700: '#b91c1c',\n          800: '#991b1b',\n          900: '#7f1d1d',\n        },\n        purple: {\n          50: '#faf5ff',\n          100: '#f3e8ff',\n          200: '#e9d5ff',\n          300: '#d8b4fe',\n          400: '#c084fc',\n          500: '#a855f7',\n          600: '#9333ea',\n          700: '#7c3aed',\n          800: '#6b21a8',\n          900: '#581c87',\n        },\n        indigo: {\n          50: '#eef2ff',\n          100: '#e0e7ff',\n          200: '#c7d2fe',\n          300: '#a5b4fc',\n          400: '#818cf8',\n          500: '#6366f1',\n          600: '#4f46e5',\n          700: '#4338ca',\n          800: '#3730a3',\n          900: '#312e81',\n        },\n        // Dark mode specific colors - carefully chosen for optimal contrast and readability\n        dark: {\n          background: '#0f172a',    // Deep navy for main background\n          surface: '#1e293b',       // Lighter navy for cards and surfaces\n          card: '#334155',          // Card backgrounds\n          border: '#475569',        // Border color with subtle contrast\n          text: {\n            primary: '#f8fafc',     // High contrast white for headings\n            secondary: '#e2e8f0',   // Slightly muted for body text\n            muted: '#94a3b8',       // Muted text for secondary info\n          },\n          hover: {\n            surface: '#374151',     // Hover states for interactive elements\n            card: '#475569',\n          }\n        }\n      },\n      // Utility classes for dark mode (legacy support)\n      backgroundColor: {\n        'dark-bg': '#0f172a',      // Main dark background\n        'dark-surface': '#1e293b', // Dark surface background\n        'dark-card': '#334155',    // Dark card background\n      },\n      textColor: {\n        'dark-primary': '#f1f5f9',   // Primary dark mode text\n        'dark-secondary': '#cbd5e1', // Secondary dark mode text\n        'dark-muted': '#94a3b8',     // Muted dark mode text\n      },\n      borderColor: {\n        'dark-border': '#475569',    // Dark mode border color\n      },\n      // Custom animations for enhanced user experience\n      animation: {\n        'fade-in-up': 'fadeInUp 0.5s ease-out forwards',        // Slide up with fade\n        'fade-in-down': 'fadeInDown 0.5s ease-out forwards',    // Slide down with fade  \n        'shake': 'shake 0.5s cubic-bezier(.36,.07,.19,.97) both', // Shake for error states\n      },\n      // Custom keyframe definitions for animations\n      keyframes: {\n        // Fade in from bottom - used for loading content\n        fadeInUp: {\n          '0%': { opacity: 0, transform: 'translateY(20px)' },\n          '100%': { opacity: 1, transform: 'translateY(0)' },\n        },\n        // Fade in from top - used for notifications\n        fadeInDown: {\n          '0%': { opacity: 0, transform: 'translateY(-20px)' },\n          '100%': { opacity: 1, transform: 'translateY(0)' },\n        },\n        // Shake animation - used for error states and invalid inputs\n        shake: {\n          '10%, 90%': { transform: 'translate3d(-1px, 0, 0)' },\n          '20%, 80%': { transform: 'translate3d(2px, 0, 0)' },\n          '30%, 50%, 70%': { transform: 'translate3d(-4px, 0, 0)' },\n          '40%, 60%': { transform: 'translate3d(4px, 0, 0)' },\n        },\n      },\n    },\n  },\n  \n  // Additional Tailwind plugins (none currently used)\n  // Future plugins could include: forms, typography, aspect-ratio, etc.\n  plugins: [],\n}\n\n","import { useTheme } from './useTheme';\nimport resolveConfig from 'tailwindcss/resolveConfig';\nimport tailwindConfig from '../../tailwind.config.js';\n\n// Resolve Tailwind configuration to access theme colors at runtime\nconst fullConfig = resolveConfig(tailwindConfig);\n\n/**\n * Custom hook for providing theme-aware colors and styling for charts.\n * \n * This hook bridges the application's theme system with chart components,\n * automatically providing appropriate colors, grid styles, tooltips, and\n * other visual elements that adapt to light/dark mode.\n * \n * @description Features:\n * - Theme-aware color palette for chart elements\n * - Automatic light/dark mode adaptation\n * - Consistent styling with application theme\n * - Grid, axis, tooltip, and legend theming\n * - Type-safe color and style configuration\n * - Integration with Tailwind CSS design system\n * \n * @returns Object containing:\n *   - chartTheme: Complete theme configuration for charts\n *   - resolvedTheme: Current active theme (light or dark)\n * \n * @example\n * ```tsx\n * function CustomChart() {\n *   const { chartTheme, resolvedTheme } = useChartTheme();\n *   \n *   return (\n *     <LineChart data={data}>\n *       <Line \n *         stroke={chartTheme.colors.primary}\n *         strokeWidth={2}\n *       />\n *       <XAxis \n *         stroke={chartTheme.axis.stroke}\n *         tick={{ fill: chartTheme.axis.stroke }}\n *       />\n *       <Tooltip \n *         contentStyle={{\n *           backgroundColor: chartTheme.tooltip.backgroundColor,\n *           border: `1px solid ${chartTheme.tooltip.border}`,\n *           color: chartTheme.tooltip.textColor\n *         }}\n *       />\n *     </LineChart>\n *   );\n * }\n * ```\n * \n * @example\n * ```tsx\n * function PieChart() {\n *   const { chartTheme } = useChartTheme();\n *   \n *   const data = [\n *     { name: 'Category A', value: 400, fill: chartTheme.colors.primary },\n *     { name: 'Category B', value: 300, fill: chartTheme.colors.secondary },\n *     { name: 'Category C', value: 200, fill: chartTheme.colors.success }\n *   ];\n *   \n *   return <Pie data={data} />;\n * }\n * ```\n */\nexport const useChartTheme = () => {\n  const { resolvedTheme } = useTheme();\n  \n  // Access Tailwind color configuration (TypeScript type issue with complex config structure)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const themeColors: any = fullConfig.theme.colors;\n\n  // Define theme-aware color palette for chart elements\n  // Dark mode uses lighter shades (400) for better contrast, light mode uses standard shades (500)\n  const colors = {\n    primary: resolvedTheme === 'dark' ? themeColors.primary[400] : themeColors.primary[500],\n    secondary: resolvedTheme === 'dark' ? themeColors.purple[400] : themeColors.purple[500],\n    success: resolvedTheme === 'dark' ? themeColors.success[400] : themeColors.success[500],\n    danger: resolvedTheme === 'dark' ? themeColors.danger[400] : themeColors.danger[500],\n    warning: resolvedTheme === 'dark' ? themeColors.warning[400] : themeColors.warning[500],\n    info: resolvedTheme === 'dark' ? themeColors.indigo[400] : themeColors.indigo[500],\n  };\n\n  // Comprehensive theme configuration for all chart elements\n  const chartTheme = {\n    colors,\n    \n    // Grid line styling for chart backgrounds\n    grid: {\n      stroke: resolvedTheme === 'dark' ? themeColors.dark.border : '#f1f5f9',\n    },\n    \n    // Axis line and tick styling\n    axis: {\n      stroke: resolvedTheme === 'dark' ? themeColors.dark.text.muted : '#64748b',\n    },\n    \n    // Tooltip appearance and styling\n    tooltip: {\n      backgroundColor: resolvedTheme === 'dark' ? themeColors.dark.surface : '#ffffff',\n      border: resolvedTheme === 'dark' ? themeColors.dark.border : '#e5e7eb',\n      textColor: resolvedTheme === 'dark' ? themeColors.dark.text.primary : '#111827',\n      shadowColor: resolvedTheme === 'dark' ? 'rgba(0, 0, 0, 0.3)' : 'rgba(0, 0, 0, 0.1)',\n    },\n    \n    // Legend text styling\n    legend: {\n      color: resolvedTheme === 'dark' ? themeColors.dark.text.secondary : '#6b7280',\n    },\n  };\n\n  return { chartTheme, resolvedTheme };\n};\n"],"names":["fullConfig","resolveConfig","content","darkMode","theme","screens","xs","sm","md","lg","xl","extend","colors","primary","success","warning","danger","purple","indigo","dark","background","surface","card","border","text","secondary","muted","hover","backgroundColor","textColor","borderColor","animation","shake","keyframes","fadeInUp","opacity","transform","fadeInDown","plugins","useChartTheme","resolvedTheme","useTheme","themeColors","chartTheme","info","grid","stroke","axis","tooltip","shadowColor","legend","color"],"mappings":"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"}