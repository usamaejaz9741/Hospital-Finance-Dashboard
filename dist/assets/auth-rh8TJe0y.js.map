{"version":3,"file":"auth-rh8TJe0y.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../src/data/mockUsers.ts","../../src/utils/logger.ts","../../src/data/mockData.ts","../../src/contexts/AuthContext.tsx","../../src/hooks/useAuth.ts","../../src/config/demo.ts","../../src/components/ui/Input.tsx","../../src/components/ui/Card.tsx","../../src/components/Button.tsx","../../src/components/auth/SignInPage.tsx","../../src/utils/auth.ts","../../src/components/auth/SignUpPage.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import { User, UserRole } from '../types/auth';\r\n\r\nexport const mockUsers: User[] = [\r\n  {\r\n    id: 'admin-1',\r\n    email: 'admin@hospitalfinance.com',\r\n    name: 'System Administrator',\r\n    role: 'admin',\r\n    createdAt: '2024-01-15T08:00:00Z',\r\n    lastLogin: '2024-12-15T10:30:00Z'\r\n  },\r\n  {\r\n    id: 'owner-1',\r\n    email: 'owner@metrogeneral.com',\r\n    name: 'Sarah Johnson',\r\n    role: 'hospital_owner',\r\n    hospitalIds: ['general-1', 'cardio-1'], // Owns multiple hospitals\r\n    createdAt: '2024-02-01T09:00:00Z',\r\n    lastLogin: '2024-12-14T15:45:00Z'\r\n  },\r\n  {\r\n    id: 'owner-2',\r\n    email: 'owner@childrensmed.com',\r\n    name: 'Dr. Michael Chen',\r\n    role: 'hospital_owner',\r\n    hospitalIds: ['pediatric-1'],\r\n    createdAt: '2024-02-15T10:00:00Z',\r\n    lastLogin: '2024-12-13T12:20:00Z'\r\n  },\r\n  {\r\n    id: 'branch-1',\r\n    email: 'manager@metrogeneral.com',\r\n    name: 'John Doe',\r\n    role: 'branch_owner',\r\n    hospitalId: 'general-1',\r\n    createdAt: '2024-03-01T11:00:00Z',\r\n    lastLogin: '2024-12-15T08:15:00Z'\r\n  },\r\n  {\r\n    id: 'branch-2',\r\n    email: 'manager@heartcenter.com',\r\n    name: 'Dr. Emily Rodriguez',\r\n    role: 'branch_owner',\r\n    hospitalId: 'cardio-1',\r\n    createdAt: '2024-03-10T12:00:00Z',\r\n    lastLogin: '2024-12-14T16:30:00Z'\r\n  },\r\n  {\r\n    id: 'branch-3',\r\n    email: 'manager@childrensmed.com',\r\n    name: 'Lisa Thompson',\r\n    role: 'branch_owner',\r\n    hospitalId: 'pediatric-1',\r\n    createdAt: '2024-03-20T13:00:00Z',\r\n    lastLogin: '2024-12-12T14:45:00Z'\r\n  },\r\n  {\r\n    id: 'branch-4',\r\n    email: 'manager@traumacenter.com',\r\n    name: 'Dr. Robert Kim',\r\n    role: 'branch_owner',\r\n    hospitalId: 'trauma-1',\r\n    createdAt: '2024-04-01T14:00:00Z',\r\n    lastLogin: '2024-12-11T11:20:00Z'\r\n  }\r\n];\r\n\r\n// Mock authentication service\r\nexport const authService = {\r\n  signIn: async (email: string, password: string): Promise<User> => {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Check password length first for better security\r\n    if (password.length < 6) {\r\n      throw new Error('Password must be at least 6 characters long');\r\n    }\r\n    \r\n    const user = mockUsers.find(u => u.email === email);\r\n    if (!user) {\r\n      throw new Error('No account found with this email address');\r\n    }\r\n    \r\n    // For demo purposes, we'll simulate password verification\r\n    // In a real app, we would properly hash and verify the password\r\n    if (password !== 'UsamaHF2024!' && \r\n        password !== 'OwnerMG2024!' && \r\n        password !== 'ManagerMG2024!') {\r\n      throw new Error('Incorrect password');\r\n    }\r\n    \r\n    // Update last login time\r\n    user.lastLogin = new Date().toISOString();\r\n    return user;\r\n  },\r\n  \r\n  signUp: async (userData: {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n    role: UserRole;\r\n    hospitalId?: string;\r\n    hospitalIds?: string[];\r\n  }): Promise<User> => {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1200));\r\n    \r\n    // Check if user already exists\r\n    const existingUser = mockUsers.find(u => u.email === userData.email);\r\n    if (existingUser) {\r\n      throw new Error('User with this email already exists');\r\n    }\r\n    \r\n    // Create new user with proper handling of optional properties\r\n    const newUser: User = {\r\n      id: `user-${Date.now()}`,\r\n      email: userData.email,\r\n      name: userData.name,\r\n      role: userData.role,\r\n      createdAt: new Date().toISOString(),\r\n      lastLogin: new Date().toISOString(),\r\n      ...(userData.hospitalId && { hospitalId: userData.hospitalId }),\r\n      ...(userData.hospitalIds && { hospitalIds: userData.hospitalIds })\r\n    };\r\n    \r\n    // Add to mock users (in real app, this would be API call)\r\n    mockUsers.push(newUser);\r\n    \r\n    return newUser;\r\n  }\r\n};\r\n\r\n// Role descriptions for UI\r\nexport const roleDescriptions = {\r\n  admin: {\r\n    title: 'System Administrator',\r\n    description: 'Full access to all hospitals and system-wide analytics',\r\n    permissions: ['View all hospitals', 'Manage users', 'System configuration']\r\n  },\r\n  hospital_owner: {\r\n    title: 'Hospital Owner',\r\n    description: 'Access to owned hospitals across multiple locations',\r\n    permissions: ['Manage owned hospitals', 'View financial reports', 'Manage branch managers']\r\n  },\r\n  // Internal role name is branch_owner but displayed as Branch Manager for consistency\r\n  branch_owner: {\r\n    title: 'Branch Manager',\r\n    description: 'Access to specific hospital location data only',\r\n    permissions: ['View branch data', 'Generate reports', 'Monitor performance']\r\n  }\r\n};\r\n\r\n","// Logging levels\r\nexport type LogLevel = 'info' | 'warn' | 'error';\r\n\r\ninterface LogOptions {\r\n  context?: string;\r\n  data?: unknown;\r\n}\r\n\r\nclass Logger {\r\n  private isDev = import.meta.env.DEV;\r\n\r\n  private formatMessage(level: LogLevel, message: string, options?: LogOptions): string {\r\n    const timestamp = new Date().toISOString();\r\n    const context = options?.context ? `[${options.context}]` : '';\r\n    return `${timestamp} ${level.toUpperCase()} ${context} ${message}`;\r\n  }\r\n\r\n  private log(level: LogLevel, message: string, options?: LogOptions): void {\r\n    // Only log in development unless it's an error\r\n    if (!this.isDev && level !== 'error') return;\r\n\r\n    const formattedMessage = this.formatMessage(level, message, options);\r\n\r\n    switch (level) {\r\n      case 'info':\r\n        if (this.isDev) console.log(formattedMessage, options?.data || '');\r\n        break;\r\n      case 'warn':\r\n        if (this.isDev) console.warn(formattedMessage, options?.data || '');\r\n        break;\r\n      case 'error':\r\n        // Always log errors, but handle them appropriately in production\r\n        if (this.isDev) {\r\n          console.error(formattedMessage, options?.data || '');\r\n        } else {\r\n          // In production, we could send this to an error tracking service\r\n          // e.g., Sentry, LogRocket, etc.\r\n          this.handleProductionError(message, options?.data);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private handleProductionError(message: string, data?: unknown): void {\r\n    // TODO: Integrate with error tracking service\r\n    // For now, we'll just log to console in a structured way\r\n    console.error({\r\n      message,\r\n      timestamp: new Date().toISOString(),\r\n      data\r\n    });\r\n  }\r\n\r\n  info(message: string, options?: LogOptions): void {\r\n    this.log('info', message, options);\r\n  }\r\n\r\n  warn(message: string, options?: LogOptions): void {\r\n    this.log('warn', message, options);\r\n  }\r\n\r\n  error(message: string, options?: LogOptions): void {\r\n    this.log('error', message, options);\r\n  }\r\n}\r\n\r\nexport const logger = new Logger();","import { \n  FinancialMetric, \n  RevenueData, \n  DepartmentFinance, \n  PatientMetrics, \n  ExpenseBreakdown, \n  CashFlowData,\n  Hospital,\n  HospitalData\n} from '../types/finance';\n\nexport const financialMetrics: FinancialMetric[] = [\n  {\n    id: 'total-revenue',\n    title: 'Total Revenue',\n    value: 12500000,\n    change: 8.5,\n    changeType: 'increase',\n    period: 'vs last month',\n    format: 'currency'\n  },\n  {\n    id: 'net-profit',\n    title: 'Net Profit',\n    value: 2100000,\n    change: 12.3,\n    changeType: 'increase',\n    period: 'vs last month',\n    format: 'currency'\n  },\n  {\n    id: 'profit-margin',\n    title: 'Profit Margin',\n    value: 16.8,\n    change: 2.1,\n    changeType: 'increase',\n    period: 'vs last month',\n    format: 'percentage'\n  },\n  {\n    id: 'operating-expenses',\n    title: 'Operating Expenses',\n    value: 9800000,\n    change: 3.2,\n    changeType: 'increase',\n    period: 'vs last month',\n    format: 'currency'\n  }\n];\n\nexport const revenueData: RevenueData[] = [\n  { month: 'Jan', revenue: 11200000, expenses: 8900000, netIncome: 2300000 },\n  { month: 'Feb', revenue: 10800000, expenses: 8600000, netIncome: 2200000 },\n  { month: 'Mar', revenue: 12100000, expenses: 9200000, netIncome: 2900000 },\n  { month: 'Apr', revenue: 11800000, expenses: 9000000, netIncome: 2800000 },\n  { month: 'May', revenue: 12800000, expenses: 9600000, netIncome: 3200000 },\n  { month: 'Jun', revenue: 12500000, expenses: 9800000, netIncome: 2700000 },\n  { month: 'Jul', revenue: 13200000, expenses: 10100000, netIncome: 3100000 },\n  { month: 'Aug', revenue: 12900000, expenses: 9900000, netIncome: 3000000 },\n  { month: 'Sep', revenue: 13500000, expenses: 10300000, netIncome: 3200000 },\n  { month: 'Oct', revenue: 13100000, expenses: 10000000, netIncome: 3100000 },\n  { month: 'Nov', revenue: 12700000, expenses: 9700000, netIncome: 3000000 },\n  { month: 'Dec', revenue: 14200000, expenses: 10800000, netIncome: 3400000 }\n];\n\nexport const departmentFinances: DepartmentFinance[] = [\n  {\n    department: 'Emergency',\n    revenue: 3200000,\n    expenses: 2400000,\n    profit: 800000,\n    profitMargin: 25.0\n  },\n  {\n    department: 'Surgery',\n    revenue: 4500000,\n    expenses: 3100000,\n    profit: 1400000,\n    profitMargin: 31.1\n  },\n  {\n    department: 'Cardiology',\n    revenue: 2800000,\n    expenses: 1900000,\n    profit: 900000,\n    profitMargin: 32.1\n  },\n  {\n    department: 'Oncology',\n    revenue: 1900000,\n    expenses: 1400000,\n    profit: 500000,\n    profitMargin: 26.3\n  },\n  {\n    department: 'Pediatrics',\n    revenue: 1100000,\n    expenses: 800000,\n    profit: 300000,\n    profitMargin: 27.3\n  }\n];\n\nexport const patientMetrics: PatientMetrics = {\n  totalPatients: 15420,\n  inpatients: 2180,\n  outpatients: 11850,\n  emergencyVisits: 1390,\n  averageStayDuration: 4.2,\n  occupancyRate: 87.5\n};\n\nexport const expenseBreakdown: ExpenseBreakdown[] = [\n  { category: 'Salaries & Benefits', amount: 5200000, percentage: 53.1, color: '#3b82f6' },\n  { category: 'Medical Supplies', amount: 1800000, percentage: 18.4, color: '#10b981' },\n  { category: 'Equipment', amount: 1200000, percentage: 12.2, color: '#f59e0b' },\n  { category: 'Utilities', amount: 600000, percentage: 6.1, color: '#ef4444' },\n  { category: 'Maintenance', amount: 500000, percentage: 5.1, color: '#8b5cf6' },\n  { category: 'Other', amount: 500000, percentage: 5.1, color: '#6b7280' }\n];\n\nexport const cashFlowData: CashFlowData[] = [\n  {\n    date: '2024-01',\n    operatingCashFlow: 2100000,\n    investingCashFlow: -800000,\n    financingCashFlow: -300000,\n    netCashFlow: 1000000\n  },\n  {\n    date: '2024-02',\n    operatingCashFlow: 1950000,\n    investingCashFlow: -200000,\n    financingCashFlow: -400000,\n    netCashFlow: 1350000\n  },\n  {\n    date: '2024-03',\n    operatingCashFlow: 2300000,\n    investingCashFlow: -1200000,\n    financingCashFlow: -200000,\n    netCashFlow: 900000\n  },\n  {\n    date: '2024-04',\n    operatingCashFlow: 2200000,\n    investingCashFlow: -300000,\n    financingCashFlow: -350000,\n    netCashFlow: 1550000\n  },\n  {\n    date: '2024-05',\n    operatingCashFlow: 2500000,\n    investingCashFlow: -150000,\n    financingCashFlow: -300000,\n    netCashFlow: 2050000\n  },\n  {\n    date: '2024-06',\n    operatingCashFlow: 2350000,\n    investingCashFlow: -600000,\n    financingCashFlow: -250000,\n    netCashFlow: 1500000\n  }\n];\n\nexport const hospitals: Hospital[] = [\n  {\n    id: 'general-1',\n    name: 'Metro General Hospital',\n    location: 'Downtown',\n    type: 'General'\n  },\n  {\n    id: 'cardio-1',\n    name: 'Heart & Vascular Institute',\n    location: 'Midtown',\n    type: 'Specialty'\n  },\n  {\n    id: 'pediatric-1',\n    name: 'Children\\'s Medical Center',\n    location: 'Westside',\n    type: 'Pediatric'\n  },\n  {\n    id: 'trauma-1',\n    name: 'Regional Trauma Center',\n    location: 'Northside',\n    type: 'Trauma'\n  }\n];\n\nexport const availableYears = [2021, 2022, 2023, 2024];\n\n// Helper function to generate variations in data\nconst generateVariation = (baseValue: number, variationPercent: number = 15): number => {\n  const variation = baseValue * (variationPercent / 100);\n  return Math.round(baseValue + (Math.random() - 0.5) * 2 * variation);\n};\n\n// Generate hospital data for all combinations\nexport const hospitalDataByYear: HospitalData[] = [];\n\nhospitals.forEach(hospital => {\n  availableYears.forEach(year => {\n    const yearMultiplier = year === 2024 ? 1 : year === 2023 ? 0.92 : year === 2022 ? 0.85 : 0.78;\n    const hospitalMultiplier = hospital.type === 'General' ? 1 : \n                               hospital.type === 'Specialty' ? 0.7 : \n                               hospital.type === 'Pediatric' ? 0.5 : 0.8;\n\n    const baseMultiplier = yearMultiplier * hospitalMultiplier;\n\n    const hospitalData: HospitalData = {\n      hospitalId: hospital.id,\n      year: year,\n      lastUpdated: new Date(year, 11, 31).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      }),\n      financialMetrics: [\n        {\n          id: 'total-revenue',\n          title: 'Total Revenue',\n          value: generateVariation(12500000 * baseMultiplier),\n          change: generateVariation(8.5, 50),\n          changeType: Math.random() > 0.3 ? 'increase' : 'decrease',\n          period: 'vs last month',\n          format: 'currency'\n        },\n        {\n          id: 'net-profit',\n          title: 'Net Profit',\n          value: generateVariation(2100000 * baseMultiplier),\n          change: generateVariation(12.3, 60),\n          changeType: Math.random() > 0.25 ? 'increase' : 'decrease',\n          period: 'vs last month',\n          format: 'currency'\n        },\n        {\n          id: 'profit-margin',\n          title: 'Profit Margin',\n          value: generateVariation(16.8, 25),\n          change: generateVariation(2.1, 80),\n          changeType: Math.random() > 0.4 ? 'increase' : 'decrease',\n          period: 'vs last month',\n          format: 'percentage'\n        },\n        {\n          id: 'operating-expenses',\n          title: 'Operating Expenses',\n          value: generateVariation(9800000 * baseMultiplier),\n          change: generateVariation(3.2, 40),\n          changeType: Math.random() > 0.6 ? 'increase' : 'decrease',\n          period: 'vs last month',\n          format: 'currency'\n        }\n      ],\n      revenueData: [\n        { month: 'Jan', revenue: generateVariation(11200000 * baseMultiplier), expenses: generateVariation(8900000 * baseMultiplier), netIncome: generateVariation(2300000 * baseMultiplier) },\n        { month: 'Feb', revenue: generateVariation(10800000 * baseMultiplier), expenses: generateVariation(8600000 * baseMultiplier), netIncome: generateVariation(2200000 * baseMultiplier) },\n        { month: 'Mar', revenue: generateVariation(12100000 * baseMultiplier), expenses: generateVariation(9200000 * baseMultiplier), netIncome: generateVariation(2900000 * baseMultiplier) },\n        { month: 'Apr', revenue: generateVariation(11800000 * baseMultiplier), expenses: generateVariation(9000000 * baseMultiplier), netIncome: generateVariation(2800000 * baseMultiplier) },\n        { month: 'May', revenue: generateVariation(12800000 * baseMultiplier), expenses: generateVariation(9600000 * baseMultiplier), netIncome: generateVariation(3200000 * baseMultiplier) },\n        { month: 'Jun', revenue: generateVariation(12500000 * baseMultiplier), expenses: generateVariation(9800000 * baseMultiplier), netIncome: generateVariation(2700000 * baseMultiplier) },\n        { month: 'Jul', revenue: generateVariation(13200000 * baseMultiplier), expenses: generateVariation(10100000 * baseMultiplier), netIncome: generateVariation(3100000 * baseMultiplier) },\n        { month: 'Aug', revenue: generateVariation(12900000 * baseMultiplier), expenses: generateVariation(9900000 * baseMultiplier), netIncome: generateVariation(3000000 * baseMultiplier) },\n        { month: 'Sep', revenue: generateVariation(13500000 * baseMultiplier), expenses: generateVariation(10300000 * baseMultiplier), netIncome: generateVariation(3200000 * baseMultiplier) },\n        { month: 'Oct', revenue: generateVariation(13100000 * baseMultiplier), expenses: generateVariation(10000000 * baseMultiplier), netIncome: generateVariation(3100000 * baseMultiplier) },\n        { month: 'Nov', revenue: generateVariation(12700000 * baseMultiplier), expenses: generateVariation(9700000 * baseMultiplier), netIncome: generateVariation(3000000 * baseMultiplier) },\n        { month: 'Dec', revenue: generateVariation(14200000 * baseMultiplier), expenses: generateVariation(10800000 * baseMultiplier), netIncome: generateVariation(3400000 * baseMultiplier) }\n      ],\n      departmentFinances: [\n        {\n          department: 'Emergency',\n          revenue: generateVariation(3200000 * baseMultiplier),\n          expenses: generateVariation(2400000 * baseMultiplier),\n          profit: generateVariation(800000 * baseMultiplier),\n          profitMargin: generateVariation(25.0, 30)\n        },\n        {\n          department: 'Surgery',\n          revenue: generateVariation(4500000 * baseMultiplier),\n          expenses: generateVariation(3100000 * baseMultiplier),\n          profit: generateVariation(1400000 * baseMultiplier),\n          profitMargin: generateVariation(31.1, 25)\n        },\n        {\n          department: 'Cardiology',\n          revenue: generateVariation(2800000 * baseMultiplier),\n          expenses: generateVariation(1900000 * baseMultiplier),\n          profit: generateVariation(900000 * baseMultiplier),\n          profitMargin: generateVariation(32.1, 20)\n        },\n        {\n          department: hospital.type === 'Pediatric' ? 'Pediatrics' : 'Oncology',\n          revenue: generateVariation(1900000 * baseMultiplier),\n          expenses: generateVariation(1400000 * baseMultiplier),\n          profit: generateVariation(500000 * baseMultiplier),\n          profitMargin: generateVariation(26.3, 35)\n        },\n        {\n          department: hospital.type === 'Trauma' ? 'Trauma' : 'Orthopedics',\n          revenue: generateVariation(1100000 * baseMultiplier),\n          expenses: generateVariation(800000 * baseMultiplier),\n          profit: generateVariation(300000 * baseMultiplier),\n          profitMargin: generateVariation(27.3, 40)\n        }\n      ],\n      patientMetrics: {\n        totalPatients: generateVariation(15420 * baseMultiplier, 20),\n        inpatients: generateVariation(2180 * baseMultiplier, 25),\n        outpatients: generateVariation(11850 * baseMultiplier, 20),\n        emergencyVisits: generateVariation(1390 * baseMultiplier, 30),\n        averageStayDuration: generateVariation(4.2 * 10, 15) / 10,\n        occupancyRate: generateVariation(87.5, 10)\n      },\n      expenseBreakdown: [\n        { category: 'Salaries & Benefits', amount: generateVariation(5200000 * baseMultiplier), percentage: generateVariation(53.1, 8), color: '#3b82f6' },\n        { category: 'Medical Supplies', amount: generateVariation(1800000 * baseMultiplier), percentage: generateVariation(18.4, 15), color: '#10b981' },\n        { category: 'Equipment', amount: generateVariation(1200000 * baseMultiplier), percentage: generateVariation(12.2, 20), color: '#f59e0b' },\n        { category: 'Utilities', amount: generateVariation(600000 * baseMultiplier), percentage: generateVariation(6.1, 25), color: '#ef4444' },\n        { category: 'Maintenance', amount: generateVariation(500000 * baseMultiplier), percentage: generateVariation(5.1, 30), color: '#8b5cf6' },\n        { category: 'Other', amount: generateVariation(500000 * baseMultiplier), percentage: generateVariation(5.1, 35), color: '#6b7280' }\n      ],\n      cashFlowData: [\n        {\n          date: `${year}-01`,\n          operatingCashFlow: generateVariation(2100000 * baseMultiplier),\n          investingCashFlow: generateVariation(-800000 * baseMultiplier),\n          financingCashFlow: generateVariation(-300000 * baseMultiplier),\n          netCashFlow: generateVariation(1000000 * baseMultiplier)\n        },\n        {\n          date: `${year}-02`,\n          operatingCashFlow: generateVariation(1950000 * baseMultiplier),\n          investingCashFlow: generateVariation(-200000 * baseMultiplier),\n          financingCashFlow: generateVariation(-400000 * baseMultiplier),\n          netCashFlow: generateVariation(1350000 * baseMultiplier)\n        },\n        {\n          date: `${year}-03`,\n          operatingCashFlow: generateVariation(2300000 * baseMultiplier),\n          investingCashFlow: generateVariation(-1200000 * baseMultiplier),\n          financingCashFlow: generateVariation(-200000 * baseMultiplier),\n          netCashFlow: generateVariation(900000 * baseMultiplier)\n        },\n        {\n          date: `${year}-04`,\n          operatingCashFlow: generateVariation(2200000 * baseMultiplier),\n          investingCashFlow: generateVariation(-300000 * baseMultiplier),\n          financingCashFlow: generateVariation(-350000 * baseMultiplier),\n          netCashFlow: generateVariation(1550000 * baseMultiplier)\n        },\n        {\n          date: `${year}-05`,\n          operatingCashFlow: generateVariation(2500000 * baseMultiplier),\n          investingCashFlow: generateVariation(-150000 * baseMultiplier),\n          financingCashFlow: generateVariation(-300000 * baseMultiplier),\n          netCashFlow: generateVariation(2050000 * baseMultiplier)\n        },\n        {\n          date: `${year}-06`,\n          operatingCashFlow: generateVariation(2350000 * baseMultiplier),\n          investingCashFlow: generateVariation(-600000 * baseMultiplier),\n          financingCashFlow: generateVariation(-250000 * baseMultiplier),\n          netCashFlow: generateVariation(1500000 * baseMultiplier)\n        }\n      ]\n    };\n\n    hospitalDataByYear.push(hospitalData);\n  });\n});\n\n// Helper function to get data for specific hospital and year\nexport const getHospitalData = (hospitalId: string, year: number): HospitalData | undefined => {\n  return hospitalDataByYear.find(data => data.hospitalId === hospitalId && data.year === year);\n};\n\n","import React, { createContext, useState, useEffect } from 'react';\nimport { User, AuthContextType, SignUpData } from '../types/auth';\nimport { authService } from '../data/mockUsers';\nimport { logger } from '../utils/logger';\nimport { hospitals } from '../data/mockData';\n\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\n/**\n * Provides authentication state and functions to its children components.\n * This component manages the user's authentication status, including sign-in,\n * sign-out, and access control checks.\n */\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Check for stored authentication on app start\n  useEffect(() => {\n    const storedUser = localStorage.getItem('hospitalFinanceUser');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        // Validate that the parsed object has the expected User structure\n        if (parsedUser && typeof parsedUser === 'object' && 'id' in parsedUser && 'email' in parsedUser) {\n          setUser(parsedUser as User);\n        } else {\n          logger.warn('Invalid user data in localStorage, removing...', { context: 'AuthContext' });\n          localStorage.removeItem('hospitalFinanceUser');\n        }\n      } catch (error) {\n        logger.error('Failed to parse stored user data', { context: 'AuthContext', data: error });\n        localStorage.removeItem('hospitalFinanceUser');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  /**\n   * Signs in a user with the provided email and password.\n   * On successful authentication, the user data is stored in state and localStorage.\n   * @param email The user's email.\n   * @param password The user's password.\n   * @throws Will throw an error if sign-in fails.\n   */\n  const signIn = async (email: string, password: string): Promise<void> => {\n    setIsLoading(true);\n    try {\n      const userData = await authService.signIn(email, password);\n      if (!userData || !userData.id || !userData.email) {\n        throw new Error('Invalid user data received from authentication service');\n      }\n      setUser(userData);\n      localStorage.setItem('hospitalFinanceUser', JSON.stringify(userData));\n    } catch (error) {\n      logger.error('Sign in failed', { context: 'AuthContext', data: error });\n      throw error; // Re-throw to let the component handle the error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Signs up a new user with the provided data.\n   * On successful registration, the new user data is stored in state and localStorage.\n   * @param userData The user data for registration.\n   * @throws Will throw an error if sign-up fails.\n   */\n  const signUp = async (userData: SignUpData): Promise<void> => {\n    setIsLoading(true);\n    try {\n      const newUser = await authService.signUp(userData);\n      if (!newUser || !newUser.id || !newUser.email) {\n        throw new Error('Invalid user data received from registration service');\n      }\n      setUser(newUser);\n      localStorage.setItem('hospitalFinanceUser', JSON.stringify(newUser));\n    } catch (error) {\n      logger.error('Sign up failed', { context: 'AuthContext', data: error });\n      throw error; // Re-throw to let the component handle the error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  /**\n   * Signs out the current user.\n   * Clears user data from state and localStorage.\n   */\n  const signOut = () => {\n    logger.info('User signed out', { context: 'AuthContext', data: { userId: user?.id } });\n    setUser(null);\n    localStorage.removeItem('hospitalFinanceUser');\n  };\n\n  /**\n   * Checks if the current user can access a specific hospital.\n   * @param hospitalId The ID of the hospital to check.\n   * @returns `true` if the user has access, `false` otherwise.\n   */\n  const canAccessHospital = (hospitalId: string): boolean => {\n    if (!user) return false;\n    \n    switch (user.role) {\n      case 'admin':\n        return true; // Admin can access all hospitals\n      case 'hospital_owner':\n        return user.hospitalIds?.includes(hospitalId) || false;\n      case 'branch_owner':\n        return user.hospitalId === hospitalId;\n      default:\n        return false;\n    }\n  };\n\n  /**\n   * Gets a list of hospital IDs that the current user can access.\n   * @returns An array of hospital ID strings.\n   */\n  const getAccessibleHospitals = (): string[] => {\n    if (!user) return [];\n    \n    switch (user.role) {\n      case 'admin':\n        return hospitals.map(h => h.id); // All hospitals\n      case 'hospital_owner':\n        return user.hospitalIds || [];\n      case 'branch_owner':\n        return user.hospitalId ? [user.hospitalId] : [];\n      default:\n        return [];\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    signIn,\n    signUp,\n    signOut,\n    canAccessHospital,\n    getAccessibleHospitals\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import { useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n","// NOTE: These credentials are for demo purposes only\r\n// In a real application, these would be managed through a secure backend\r\nexport const demoAccounts = [\r\n  { \r\n    role: 'Admin',\r\n    email: import.meta.env.VITE_DEMO_ADMIN_EMAIL || 'admin@hospitalfinance.com',\r\n    password: import.meta.env.VITE_DEMO_ADMIN_PASSWORD || 'UsamaHF2024!'\r\n  },\r\n  {\r\n    role: 'Hospital Owner',\r\n    email: import.meta.env.VITE_DEMO_OWNER_EMAIL || 'owner@metrogeneral.com',\r\n    password: import.meta.env.VITE_DEMO_OWNER_PASSWORD || 'OwnerMG2024!'\r\n  },\r\n  {\r\n    role: 'Branch Manager',\r\n    email: import.meta.env.VITE_DEMO_MANAGER_EMAIL || 'manager@metrogeneral.com',\r\n    password: import.meta.env.VITE_DEMO_MANAGER_PASSWORD || 'ManagerMG2024!'\r\n  }\r\n];","import React from 'react';\r\n\r\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  label: string;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({ label, id, ...props }) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={id} className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n        {label}\r\n      </label>\r\n      <input\r\n        id={id}\r\n        className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\r\n        {...props}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\n\r\ninterface CardProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ children, className = '' }) => {\r\n  return (\r\n    <div className={`bg-white dark:bg-dark-surface rounded-lg shadow-lg p-8 space-y-6 ${className}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nexport type ButtonVariant = 'primary' | 'secondary' | 'danger';\r\nexport type ButtonSize = 'sm' | 'md' | 'lg';\r\n\r\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  variant?: ButtonVariant;\r\n  size?: ButtonSize;\r\n  isLoading?: boolean;\r\n  fullWidth?: boolean;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n  variant = 'primary',\r\n  size = 'md',\r\n  isLoading = false,\r\n  fullWidth = false,\r\n  className = '',\r\n  children,\r\n  disabled,\r\n  ...props\r\n}) => {\r\n  const baseClasses = 'font-medium rounded-lg transition-colors duration-200 flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';\r\n  \r\n  const variantClasses = {\r\n    primary: 'bg-primary-600 hover:bg-primary-700 disabled:bg-primary-400 text-white focus:ring-primary-500',\r\n    secondary: 'bg-gray-100 hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 focus:ring-gray-500',\r\n    danger: 'bg-danger-600 hover:bg-danger-700 disabled:bg-danger-400 text-white focus:ring-danger-500'\r\n  };\r\n\r\n  const sizeClasses = {\r\n    sm: 'px-3 py-1.5 text-sm',\r\n    md: 'px-4 py-2 text-sm',\r\n    lg: 'px-6 py-3 text-base'\r\n  };\r\n\r\n  const widthClass = fullWidth ? 'w-full' : '';\r\n\r\n  const combinedClasses = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${widthClass} ${className}`;\r\n\r\n  return (\r\n    <button\r\n      className={combinedClasses}\r\n      disabled={disabled || isLoading}\r\n      {...props}\r\n    >\r\n      {isLoading ? (\r\n        <>\r\n          <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\r\n          Loading...\r\n        </>\r\n      ) : (\r\n        children\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { validatePassword, formatAuthError } from '../../utils/auth';\nimport { demoAccounts } from '../../config/demo';\nimport { logger } from '../../utils/logger';\nimport Input from '../ui/Input';\nimport Card from '../ui/Card';\nimport Button from '../Button';\n\ninterface SignInPageProps {\n  onSwitchToSignUp: () => void;\n}\n\nconst SignInPage: React.FC<SignInPageProps> = ({ onSwitchToSignUp }: SignInPageProps) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const { signIn, isLoading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrorMessage('');\n\n    const validation = validatePassword(password);\n    if (!validation.isValid) {\n      setErrorMessage(validation.errors[0] || 'Invalid password');\n      return;\n    }\n\n    try {\n      logger.info('Sign in attempt', { context: 'SignInPage', data: { email } });\n      await signIn(email, password);\n      logger.info('Sign in successful', { context: 'SignInPage', data: { email } });\n    } catch (error) {\n      logger.error('Sign in failed', { context: 'SignInPage', data: { email, error } });\n      setErrorMessage(formatAuthError(error));\n    }\n  };\n\n  const fillDemo = (email: string, password: string) => {\n    setEmail(email);\n    setPassword(password);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-blue-100 dark:from-dark-bg dark:to-slate-900 text-gray-900 dark:text-dark-primary flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 transition-colors duration-200\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-primary-600 rounded-xl flex items-center justify-center mb-4\">\n            <span className=\"text-white font-bold text-2xl\">H</span>\n          </div>\n          <h2 className=\"text-3xl font-bold\">Welcome back</h2>\n          <p className=\"mt-2 text-gray-600 dark:text-dark-muted\">Sign in to your Hospital Finance Dashboard</p>\n        </div>\n\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-blue-900 dark:text-blue-200 mb-2\">Demo Accounts:</h3>\n          <div className=\"space-y-2\">\n            {demoAccounts.map((account, index) => (\n              <button\n                key={index}\n                onClick={() => fillDemo(account.email, account.password)}\n                className=\"block w-full text-left text-xs bg-white dark:bg-dark-surface hover:bg-blue-50 dark:hover:bg-blue-900/40 border border-blue-200 dark:border-dark-border rounded px-2 py-1 transition-colors\"\n              >\n                <span className=\"font-medium text-blue-900 dark:text-blue-200\">{account.role}</span>\n                <br />\n                <span className=\"text-blue-700 dark:text-blue-300\">{account.email}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <Card>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {errorMessage && (\n              <div className=\"bg-danger-50 border border-danger-200 text-danger-700 px-4 py-3 rounded-lg text-sm\">\n                {errorMessage}\n              </div>\n            )}\n            <Input\n              id=\"email\"\n              type=\"email\"\n              label=\"Email Address\"\n              required\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n            />\n            <Input\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              required\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter your password\"\n            />\n            <Button type=\"submit\" isLoading={isLoading} fullWidth>\n              Sign In\n            </Button>\n          </form>\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-dark-muted\">\n              Don't have an account?{' '}\n              <button\n                type=\"button\"\n                onClick={onSwitchToSignUp}\n                className=\"text-primary-600 hover:text-primary-700 font-medium\"\n              >\n                Sign up\n              </button>\n            </p>\n          </div>\n        </Card>\n\n        <div className=\"text-center text-xs text-gray-500 dark:text-dark-muted\">\n          <p>© 2024 Hospital Finance Dashboard. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignInPage;\n","/**\r\n * Password validation configuration\r\n */\r\nconst passwordConfig = {\r\n  minLength: 8,\r\n  requireUppercase: true,\r\n  requireLowercase: true,\r\n  requireNumbers: true,\r\n  requireSpecial: true,\r\n  maxLength: 128\r\n};\r\n\r\nexport interface PasswordValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Validates a password against security requirements\r\n * @param password The password to validate\r\n * @returns Validation result with error messages if any\r\n */\r\nexport const validatePassword = (password: string): PasswordValidationResult => {\r\n  const errors: string[] = [];\r\n\r\n  // Check for empty password\r\n  if (!password) {\r\n    return {\r\n      isValid: false,\r\n      errors: ['Password is required']\r\n    };\r\n  }\r\n\r\n  // Check length requirements\r\n  if (password.length < passwordConfig.minLength) {\r\n    errors.push(`Password must be at least ${passwordConfig.minLength} characters long`);\r\n  }\r\n  if (password.length > passwordConfig.maxLength) {\r\n    errors.push(`Password cannot be longer than ${passwordConfig.maxLength} characters`);\r\n  }\r\n\r\n  // Check character requirements\r\n  if (passwordConfig.requireUppercase && !/[A-Z]/.test(password)) {\r\n    errors.push('Password must contain at least one uppercase letter');\r\n  }\r\n  if (passwordConfig.requireLowercase && !/[a-z]/.test(password)) {\r\n    errors.push('Password must contain at least one lowercase letter');\r\n  }\r\n  if (passwordConfig.requireNumbers && !/\\d/.test(password)) {\r\n    errors.push('Password must contain at least one number');\r\n  }\r\n  if (passwordConfig.requireSpecial && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n    errors.push('Password must contain at least one special character');\r\n  }\r\n\r\n  // Check for common patterns\r\n  if (/(.)\\1{2,}/.test(password)) {\r\n    errors.push('Password cannot contain repeating characters (3 or more times)');\r\n  }\r\n  if (/12345|qwerty|password|admin/i.test(password)) {\r\n    errors.push('Password contains a common pattern');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Ensures consistent error message formatting\r\n * @param error The error to format\r\n * @returns A user-friendly error message\r\n */\r\nexport const formatAuthError = (error: unknown): string => {\r\n  if (error instanceof Error) {\r\n    // Hide implementation details from users\r\n    if (error.message.includes('Invalid credentials')) {\r\n      return 'Invalid email or password';\r\n    }\r\n    if (error.message.includes('Rate limit')) {\r\n      return 'Too many attempts. Please try again later';\r\n    }\r\n    return 'An error occurred during authentication';\r\n  }\r\n  return 'An unexpected error occurred';\r\n};","import React, { useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { UserRole, SignUpData } from '../../types/auth';\nimport { hospitals } from '../../data/mockData';\nimport { roleDescriptions } from '../../data/mockUsers';\nimport Input from '../ui/Input';\nimport Card from '../ui/Card';\nimport Button from '../Button';\n\ninterface SignUpPageProps {\n  onSwitchToSignIn: () => void;\n}\n\nconst SignUpPage: React.FC<SignUpPageProps> = ({ onSwitchToSignIn }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    role: 'branch_owner' as UserRole,\n    hospitalId: '',\n    hospitalIds: [] as string[]\n  });\n  const [error, setError] = useState('');\n  const { signUp, isLoading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    if (formData.role === 'branch_owner' && !formData.hospitalId) {\n      setError('Please select a hospital for branch manager role');\n      return;\n    }\n\n    if (formData.role === 'hospital_owner' && formData.hospitalIds.length === 0) {\n      setError('Please select at least one hospital for hospital owner role');\n      return;\n    }\n\n    try {\n      const signUpData: SignUpData = {\n        name: formData.name,\n        email: formData.email,\n        password: formData.password,\n        role: formData.role\n      };\n\n      if (formData.role === 'branch_owner' && formData.hospitalId) {\n        signUpData.hospitalId = formData.hospitalId;\n      }\n      \n      if (formData.role === 'hospital_owner' && formData.hospitalIds.length > 0) {\n        signUpData.hospitalIds = formData.hospitalIds;\n      }\n\n      await signUp(signUpData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    }\n  };\n\n  const handleInputChange = (field: string, value: string | string[]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleHospitalSelection = (hospitalId: string, checked: boolean) => {\n    if (checked) {\n      setFormData(prev => ({\n        ...prev,\n        hospitalIds: [...prev.hospitalIds, hospitalId]\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        hospitalIds: prev.hospitalIds.filter(id => id !== hospitalId)\n      }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-blue-100 dark:from-dark-bg dark:to-slate-900 flex items-center justify-center py-6 sm:py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-lg w-full space-y-6 sm:space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-primary-600 rounded-xl flex items-center justify-center mb-4\">\n            <span className=\"text-white font-bold text-2xl\">H</span>\n          </div>\n          <h2 className=\"text-3xl font-bold\">Create Account</h2>\n          <p className=\"mt-2 text-gray-600 dark:text-dark-muted\">Join the Hospital Finance Dashboard</p>\n        </div>\n\n        <Card>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {error && (\n              <div className=\"bg-danger-50 dark:bg-danger-900/20 border border-danger-200 dark:border-danger-800 text-danger-700 dark:text-danger-300 px-4 py-3 rounded-lg text-sm\">\n                {error}\n              </div>\n            )}\n\n            <Input\n              id=\"name\"\n              type=\"text\"\n              label=\"Full Name\"\n              required\n              value={formData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              placeholder=\"Enter your full name\"\n            />\n\n            <Input\n              id=\"email\"\n              type=\"email\"\n              label=\"Email Address\"\n              required\n              value={formData.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              placeholder=\"Enter your email\"\n            />\n\n            <Input\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              required\n              value={formData.password}\n              onChange={(e) => handleInputChange('password', e.target.value)}\n              placeholder=\"Create a password\"\n            />\n\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              label=\"Confirm Password\"\n              required\n              value={formData.confirmPassword}\n              onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n              placeholder=\"Confirm your password\"\n            />\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n                Account Type\n              </label>\n              <div className=\"space-y-3\">\n                {(Object.keys(roleDescriptions) as UserRole[]).map((role) => (\n                  <div key={role} className=\"flex items-start\">\n                    <input\n                      id={role}\n                      type=\"radio\"\n                      name=\"role\"\n                      value={role}\n                      checked={formData.role === role}\n                      onChange={(e) => handleInputChange('role', e.target.value as UserRole)}\n                      className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700\"\n                      disabled={role === 'admin'}\n                    />\n                    <div className=\"ml-3\">\n                      <label htmlFor={role} className=\"block text-sm font-medium text-gray-900 dark:text-white\">\n                        {roleDescriptions[role].title}\n                        {role === 'admin' && <span className=\"text-gray-400 dark:text-gray-500 ml-2\">(Contact admin)</span>}\n                      </label>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        {roleDescriptions[role].description}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {formData.role === 'branch_owner' && (\n              <div>\n                <label htmlFor=\"hospitalId\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Select Hospital\n                </label>\n                <div className=\"relative\">\n                  <select\n                    id=\"hospitalId\"\n                    value={formData.hospitalId}\n                    onChange={(e) => handleInputChange('hospitalId', e.target.value)}\n                    className=\"w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 appearance-none\"\n                    required\n                  >\n                    <option value=\"\">Choose a hospital...</option>\n                    {hospitals.map((hospital) => (\n                      <option key={hospital.id} value={hospital.id}>\n                        {hospital.name} ({hospital.type} • {hospital.location})\n                      </option>\n                    ))}\n                  </select>\n                  <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3\">\n                    <svg className=\"h-5 w-5 text-gray-400 dark:text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {formData.role === 'hospital_owner' && (\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Select Hospitals (you can select multiple)\n                </label>\n                <div className=\"space-y-2 max-h-32 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-lg p-3 bg-gray-50 dark:bg-gray-700\">\n                  {hospitals.map((hospital) => (\n                    <div key={hospital.id} className=\"flex items-center\">\n                      <input\n                        id={`hospital-${hospital.id}`}\n                        type=\"checkbox\"\n                        checked={formData.hospitalIds.includes(hospital.id)}\n                        onChange={(e) => handleHospitalSelection(hospital.id, e.target.checked)}\n                        className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded\"\n                      />\n                      <label htmlFor={`hospital-${hospital.id}`} className=\"ml-2 text-sm text-gray-900 dark:text-white\">\n                        {hospital.name}\n                        <span className=\"text-gray-500 dark:text-gray-400 ml-1\">({hospital.type} • {hospital.location})</span>\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <Button type=\"submit\" isLoading={isLoading} fullWidth>\n              Create Account\n            </Button>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-dark-muted\">\n                Already have an account?{' '}\n                <button\n                  type=\"button\"\n                  onClick={onSwitchToSignIn}\n                  className=\"text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 font-medium\"\n                >\n                  Sign in\n                </button>\n              </p>\n            </div>\n          </form>\n        </Card>\n\n        <div className=\"text-center text-xs text-gray-500 dark:text-dark-muted\">\n          <p>© 2024 Hospital Finance Dashboard. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUpPage;\n"],"names":["f","require$$0","k","Symbol","for","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","type","props","_owner","current","reactJsxRuntime_production_min","jsx","jsxs","jsxRuntimeModule","exports","mockUsers","id","email","name","role","createdAt","lastLogin","hospitalIds","hospitalId","roleDescriptions","admin","title","description","permissions","hospital_owner","branch_owner","logger","isDev","formatMessage","level","message","options","timestamp","Date","toISOString","context","toUpperCase","log","this","handleProductionError","data","info","warn","error","hospitals","location","availableYears","generateVariation","baseValue","variationPercent","variation","Math","round","random","hospitalDataByYear","forEach","hospital","year","baseMultiplier","hospitalData","lastUpdated","toLocaleDateString","month","day","financialMetrics","value","change","changeType","period","format","revenueData","revenue","expenses","netIncome","departmentFinances","department","profit","profitMargin","patientMetrics","totalPatients","inpatients","outpatients","emergencyVisits","averageStayDuration","occupancyRate","expenseBreakdown","category","amount","percentage","color","cashFlowData","date","operatingCashFlow","investingCashFlow","financingCashFlow","netCashFlow","push","getHospitalData","find","AuthContext","createContext","AuthProvider","children","user","setUser","useState","isLoading","setIsLoading","useEffect","storedUser","localStorage","getItem","parsedUser","JSON","parse","removeItem","isAuthenticated","signIn","async","password","userData","Promise","resolve","setTimeout","length","Error","u","authService","setItem","stringify","signUp","newUser","now","signOut","userId","canAccessHospital","includes","getAccessibleHospitals","map","Provider","useAuth","useContext","demoAccounts","Input","label","htmlFor","className","Card","Button","variant","size","fullWidth","disabled","combinedClasses","primary","secondary","danger","sm","md","lg","Fragment","SignInPage","onSwitchToSignUp","setEmail","setPassword","errorMessage","setErrorMessage","account","index","onClick","fillDemo","onSubmit","preventDefault","validation","errors","test","isValid","validatePassword","formatAuthError","required","onChange","target","placeholder","SignUpPage","onSwitchToSignIn","formData","setFormData","confirmPassword","setError","handleInputChange","field","prev","signUpData","err","keys","checked","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","handleHospitalSelection","filter"],"mappings":"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","x_google_ignoreList":[0,1]}