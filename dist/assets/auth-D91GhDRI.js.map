{"version":3,"file":"auth-D91GhDRI.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react/jsx-runtime.js","../../src/data/mockUsers.ts","../../src/utils/logger.ts","../../src/contexts/AuthContext.tsx","../../src/hooks/useAuth.ts","../../src/data/mockData.ts","../../src/config/demo.ts","../../src/components/auth/SignInPage.tsx","../../src/utils/auth.ts","../../src/components/auth/SignUpPage.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","import { User, UserRole } from '../types/auth';\r\n\r\nexport const mockUsers: User[] = [\r\n  {\r\n    id: 'admin-1',\r\n    email: 'admin@hospitalfinance.com',\r\n    name: 'System Administrator',\r\n    role: 'admin',\r\n    createdAt: '2024-01-15T08:00:00Z',\r\n    lastLogin: '2024-12-15T10:30:00Z'\r\n  },\r\n  {\r\n    id: 'owner-1',\r\n    email: 'owner@metrogeneral.com',\r\n    name: 'Sarah Johnson',\r\n    role: 'hospital_owner',\r\n    hospitalIds: ['general-1', 'cardio-1'], // Owns multiple hospitals\r\n    createdAt: '2024-02-01T09:00:00Z',\r\n    lastLogin: '2024-12-14T15:45:00Z'\r\n  },\r\n  {\r\n    id: 'owner-2',\r\n    email: 'owner@childrensmed.com',\r\n    name: 'Dr. Michael Chen',\r\n    role: 'hospital_owner',\r\n    hospitalIds: ['pediatric-1'],\r\n    createdAt: '2024-02-15T10:00:00Z',\r\n    lastLogin: '2024-12-13T12:20:00Z'\r\n  },\r\n  {\r\n    id: 'branch-1',\r\n    email: 'manager@metrogeneral.com',\r\n    name: 'John Doe',\r\n    role: 'branch_owner',\r\n    hospitalId: 'general-1',\r\n    createdAt: '2024-03-01T11:00:00Z',\r\n    lastLogin: '2024-12-15T08:15:00Z'\r\n  },\r\n  {\r\n    id: 'branch-2',\r\n    email: 'manager@heartcenter.com',\r\n    name: 'Dr. Emily Rodriguez',\r\n    role: 'branch_owner',\r\n    hospitalId: 'cardio-1',\r\n    createdAt: '2024-03-10T12:00:00Z',\r\n    lastLogin: '2024-12-14T16:30:00Z'\r\n  },\r\n  {\r\n    id: 'branch-3',\r\n    email: 'manager@childrensmed.com',\r\n    name: 'Lisa Thompson',\r\n    role: 'branch_owner',\r\n    hospitalId: 'pediatric-1',\r\n    createdAt: '2024-03-20T13:00:00Z',\r\n    lastLogin: '2024-12-12T14:45:00Z'\r\n  },\r\n  {\r\n    id: 'branch-4',\r\n    email: 'manager@traumacenter.com',\r\n    name: 'Dr. Robert Kim',\r\n    role: 'branch_owner',\r\n    hospitalId: 'trauma-1',\r\n    createdAt: '2024-04-01T14:00:00Z',\r\n    lastLogin: '2024-12-11T11:20:00Z'\r\n  }\r\n];\r\n\r\n// Mock authentication service\r\nexport const authService = {\r\n  signIn: async (email: string, password: string): Promise<User> => {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Check password length first for better security\r\n    if (password.length < 6) {\r\n      throw new Error('Password must be at least 6 characters long');\r\n    }\r\n    \r\n    const user = mockUsers.find(u => u.email === email);\r\n    if (!user) {\r\n      throw new Error('No account found with this email address');\r\n    }\r\n    \r\n    // For demo purposes, we'll simulate password verification\r\n    // In a real app, we would properly hash and verify the password\r\n    if (password !== 'UsamaHF2024!' && \r\n        password !== 'OwnerMG2024!' && \r\n        password !== 'ManagerMG2024!') {\r\n      throw new Error('Incorrect password');\r\n    }\r\n    \r\n    // Update last login time\r\n    user.lastLogin = new Date().toISOString();\r\n    return user;\r\n  },\r\n  \r\n  signUp: async (userData: {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n    role: UserRole;\r\n    hospitalId?: string;\r\n    hospitalIds?: string[];\r\n  }): Promise<User> => {\r\n    // Simulate API delay\r\n    await new Promise(resolve => setTimeout(resolve, 1200));\r\n    \r\n    // Check if user already exists\r\n    const existingUser = mockUsers.find(u => u.email === userData.email);\r\n    if (existingUser) {\r\n      throw new Error('User with this email already exists');\r\n    }\r\n    \r\n    // Create new user with proper handling of optional properties\r\n    const newUser: User = {\r\n      id: `user-${Date.now()}`,\r\n      email: userData.email,\r\n      name: userData.name,\r\n      role: userData.role,\r\n      createdAt: new Date().toISOString(),\r\n      lastLogin: new Date().toISOString(),\r\n      ...(userData.hospitalId && { hospitalId: userData.hospitalId }),\r\n      ...(userData.hospitalIds && { hospitalIds: userData.hospitalIds })\r\n    };\r\n    \r\n    // Add to mock users (in real app, this would be API call)\r\n    mockUsers.push(newUser);\r\n    \r\n    return newUser;\r\n  }\r\n};\r\n\r\n// Role descriptions for UI\r\nexport const roleDescriptions = {\r\n  admin: {\r\n    title: 'System Administrator',\r\n    description: 'Full access to all hospitals and system-wide analytics',\r\n    permissions: ['View all hospitals', 'Manage users', 'System configuration']\r\n  },\r\n  hospital_owner: {\r\n    title: 'Hospital Owner',\r\n    description: 'Access to owned hospitals across multiple locations',\r\n    permissions: ['Manage owned hospitals', 'View financial reports', 'Manage branch managers']\r\n  },\r\n  // Internal role name is branch_owner but displayed as Branch Manager for consistency\r\n  branch_owner: {\r\n    title: 'Branch Manager',\r\n    description: 'Access to specific hospital location data only',\r\n    permissions: ['View branch data', 'Generate reports', 'Monitor performance']\r\n  }\r\n};\r\n\r\n","// Logging levels\r\nexport type LogLevel = 'info' | 'warn' | 'error';\r\n\r\ninterface LogOptions {\r\n  context?: string;\r\n  data?: unknown;\r\n}\r\n\r\nclass Logger {\r\n  private isDev = import.meta.env.DEV;\r\n\r\n  private formatMessage(level: LogLevel, message: string, options?: LogOptions): string {\r\n    const timestamp = new Date().toISOString();\r\n    const context = options?.context ? `[${options.context}]` : '';\r\n    return `${timestamp} ${level.toUpperCase()} ${context} ${message}`;\r\n  }\r\n\r\n  private log(level: LogLevel, message: string, options?: LogOptions): void {\r\n    // Only log in development unless it's an error\r\n    if (!this.isDev && level !== 'error') return;\r\n\r\n    const formattedMessage = this.formatMessage(level, message, options);\r\n\r\n    switch (level) {\r\n      case 'info':\r\n        if (this.isDev) console.log(formattedMessage, options?.data || '');\r\n        break;\r\n      case 'warn':\r\n        if (this.isDev) console.warn(formattedMessage, options?.data || '');\r\n        break;\r\n      case 'error':\r\n        // Always log errors, but handle them appropriately in production\r\n        if (this.isDev) {\r\n          console.error(formattedMessage, options?.data || '');\r\n        } else {\r\n          // In production, we could send this to an error tracking service\r\n          // e.g., Sentry, LogRocket, etc.\r\n          this.handleProductionError(message, options?.data);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  private handleProductionError(message: string, data?: unknown): void {\r\n    // TODO: Integrate with error tracking service\r\n    // For now, we'll just log to console in a structured way\r\n    console.error({\r\n      message,\r\n      timestamp: new Date().toISOString(),\r\n      data\r\n    });\r\n  }\r\n\r\n  info(message: string, options?: LogOptions): void {\r\n    this.log('info', message, options);\r\n  }\r\n\r\n  warn(message: string, options?: LogOptions): void {\r\n    this.log('warn', message, options);\r\n  }\r\n\r\n  error(message: string, options?: LogOptions): void {\r\n    this.log('error', message, options);\r\n  }\r\n}\r\n\r\nexport const logger = new Logger();","import React, { createContext, useState, useEffect } from 'react';\nimport { User, AuthContextType, SignUpData } from '../types/auth';\nimport { authService } from '../data/mockUsers';\nimport { logger } from '../utils/logger';\n\nexport const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Check for stored authentication on app start\n  useEffect(() => {\n    const storedUser = localStorage.getItem('hospitalFinanceUser');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        // Validate that the parsed object has the expected User structure\n        if (parsedUser && typeof parsedUser === 'object' && 'id' in parsedUser && 'email' in parsedUser) {\n          setUser(parsedUser as User);\n        } else {\n          logger.warn('Invalid user data in localStorage, removing...', { context: 'AuthContext' });\n          localStorage.removeItem('hospitalFinanceUser');\n        }\n      } catch (error) {\n        logger.error('Failed to parse stored user data', { context: 'AuthContext', data: error });\n        localStorage.removeItem('hospitalFinanceUser');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const signIn = async (email: string, password: string): Promise<void> => {\n    setIsLoading(true);\n    try {\n      const userData = await authService.signIn(email, password);\n      if (!userData || !userData.id || !userData.email) {\n        throw new Error('Invalid user data received from authentication service');\n      }\n      setUser(userData);\n      localStorage.setItem('hospitalFinanceUser', JSON.stringify(userData));\n    } catch (error) {\n      logger.error('Sign in failed', { context: 'AuthContext', data: error });\n      throw error; // Re-throw to let the component handle the error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const signUp = async (userData: SignUpData): Promise<void> => {\n    setIsLoading(true);\n    try {\n      const newUser = await authService.signUp(userData);\n      if (!newUser || !newUser.id || !newUser.email) {\n        throw new Error('Invalid user data received from registration service');\n      }\n      setUser(newUser);\n      localStorage.setItem('hospitalFinanceUser', JSON.stringify(newUser));\n    } catch (error) {\n      logger.error('Sign up failed', { context: 'AuthContext', data: error });\n      throw error; // Re-throw to let the component handle the error\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const signOut = () => {\n    logger.info('User signed out', { context: 'AuthContext', data: { userId: user?.id } });\n    setUser(null);\n    localStorage.removeItem('hospitalFinanceUser');\n  };\n\n  const canAccessHospital = (hospitalId: string): boolean => {\n    if (!user) return false;\n    \n    switch (user.role) {\n      case 'admin':\n        return true; // Admin can access all hospitals\n      case 'hospital_owner':\n        return user.hospitalIds?.includes(hospitalId) || false;\n      case 'branch_owner':\n        return user.hospitalId === hospitalId;\n      default:\n        return false;\n    }\n  };\n\n  const getAccessibleHospitals = (): string[] => {\n    if (!user) return [];\n    \n    switch (user.role) {\n      case 'admin':\n        return ['general-1', 'cardio-1', 'pediatric-1', 'trauma-1']; // All hospitals\n      case 'hospital_owner':\n        return user.hospitalIds || [];\n      case 'branch_owner':\n        return user.hospitalId ? [user.hospitalId] : [];\n      default:\n        return [];\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isAuthenticated: !!user,\n    isLoading,\n    signIn,\n    signUp,\n    signOut,\n    canAccessHospital,\n    getAccessibleHospitals\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import { useContext } from 'react';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n","import { \r\n  FinancialMetric, \r\n  RevenueData, \r\n  DepartmentFinance, \r\n  PatientMetrics, \r\n  ExpenseBreakdown, \r\n  CashFlowData,\r\n  Hospital,\r\n  HospitalData\r\n} from '../types/finance';\r\n\r\nexport const financialMetrics: FinancialMetric[] = [\r\n  {\r\n    id: 'total-revenue',\r\n    title: 'Total Revenue',\r\n    value: 12500000,\r\n    change: 8.5,\r\n    changeType: 'increase',\r\n    period: 'vs last month',\r\n    format: 'currency'\r\n  },\r\n  {\r\n    id: 'net-profit',\r\n    title: 'Net Profit',\r\n    value: 2100000,\r\n    change: 12.3,\r\n    changeType: 'increase',\r\n    period: 'vs last month',\r\n    format: 'currency'\r\n  },\r\n  {\r\n    id: 'profit-margin',\r\n    title: 'Profit Margin',\r\n    value: 16.8,\r\n    change: 2.1,\r\n    changeType: 'increase',\r\n    period: 'vs last month',\r\n    format: 'percentage'\r\n  },\r\n  {\r\n    id: 'operating-expenses',\r\n    title: 'Operating Expenses',\r\n    value: 9800000,\r\n    change: 3.2,\r\n    changeType: 'increase',\r\n    period: 'vs last month',\r\n    format: 'currency'\r\n  }\r\n];\r\n\r\nexport const revenueData: RevenueData[] = [\r\n  { month: 'Jan', revenue: 11200000, expenses: 8900000, netIncome: 2300000 },\r\n  { month: 'Feb', revenue: 10800000, expenses: 8600000, netIncome: 2200000 },\r\n  { month: 'Mar', revenue: 12100000, expenses: 9200000, netIncome: 2900000 },\r\n  { month: 'Apr', revenue: 11800000, expenses: 9000000, netIncome: 2800000 },\r\n  { month: 'May', revenue: 12800000, expenses: 9600000, netIncome: 3200000 },\r\n  { month: 'Jun', revenue: 12500000, expenses: 9800000, netIncome: 2700000 },\r\n  { month: 'Jul', revenue: 13200000, expenses: 10100000, netIncome: 3100000 },\r\n  { month: 'Aug', revenue: 12900000, expenses: 9900000, netIncome: 3000000 },\r\n  { month: 'Sep', revenue: 13500000, expenses: 10300000, netIncome: 3200000 },\r\n  { month: 'Oct', revenue: 13100000, expenses: 10000000, netIncome: 3100000 },\r\n  { month: 'Nov', revenue: 12700000, expenses: 9700000, netIncome: 3000000 },\r\n  { month: 'Dec', revenue: 14200000, expenses: 10800000, netIncome: 3400000 }\r\n];\r\n\r\nexport const departmentFinances: DepartmentFinance[] = [\r\n  {\r\n    department: 'Emergency',\r\n    revenue: 3200000,\r\n    expenses: 2400000,\r\n    profit: 800000,\r\n    profitMargin: 25.0\r\n  },\r\n  {\r\n    department: 'Surgery',\r\n    revenue: 4500000,\r\n    expenses: 3100000,\r\n    profit: 1400000,\r\n    profitMargin: 31.1\r\n  },\r\n  {\r\n    department: 'Cardiology',\r\n    revenue: 2800000,\r\n    expenses: 1900000,\r\n    profit: 900000,\r\n    profitMargin: 32.1\r\n  },\r\n  {\r\n    department: 'Oncology',\r\n    revenue: 1900000,\r\n    expenses: 1400000,\r\n    profit: 500000,\r\n    profitMargin: 26.3\r\n  },\r\n  {\r\n    department: 'Pediatrics',\r\n    revenue: 1100000,\r\n    expenses: 800000,\r\n    profit: 300000,\r\n    profitMargin: 27.3\r\n  }\r\n];\r\n\r\nexport const patientMetrics: PatientMetrics = {\r\n  totalPatients: 15420,\r\n  inpatients: 2180,\r\n  outpatients: 11850,\r\n  emergencyVisits: 1390,\r\n  averageStayDuration: 4.2,\r\n  occupancyRate: 87.5\r\n};\r\n\r\nexport const expenseBreakdown: ExpenseBreakdown[] = [\r\n  { category: 'Salaries & Benefits', amount: 5200000, percentage: 53.1, color: '#3b82f6' },\r\n  { category: 'Medical Supplies', amount: 1800000, percentage: 18.4, color: '#10b981' },\r\n  { category: 'Equipment', amount: 1200000, percentage: 12.2, color: '#f59e0b' },\r\n  { category: 'Utilities', amount: 600000, percentage: 6.1, color: '#ef4444' },\r\n  { category: 'Maintenance', amount: 500000, percentage: 5.1, color: '#8b5cf6' },\r\n  { category: 'Other', amount: 500000, percentage: 5.1, color: '#6b7280' }\r\n];\r\n\r\nexport const cashFlowData: CashFlowData[] = [\r\n  {\r\n    date: '2024-01',\r\n    operatingCashFlow: 2100000,\r\n    investingCashFlow: -800000,\r\n    financingCashFlow: -300000,\r\n    netCashFlow: 1000000\r\n  },\r\n  {\r\n    date: '2024-02',\r\n    operatingCashFlow: 1950000,\r\n    investingCashFlow: -200000,\r\n    financingCashFlow: -400000,\r\n    netCashFlow: 1350000\r\n  },\r\n  {\r\n    date: '2024-03',\r\n    operatingCashFlow: 2300000,\r\n    investingCashFlow: -1200000,\r\n    financingCashFlow: -200000,\r\n    netCashFlow: 900000\r\n  },\r\n  {\r\n    date: '2024-04',\r\n    operatingCashFlow: 2200000,\r\n    investingCashFlow: -300000,\r\n    financingCashFlow: -350000,\r\n    netCashFlow: 1550000\r\n  },\r\n  {\r\n    date: '2024-05',\r\n    operatingCashFlow: 2500000,\r\n    investingCashFlow: -150000,\r\n    financingCashFlow: -300000,\r\n    netCashFlow: 2050000\r\n  },\r\n  {\r\n    date: '2024-06',\r\n    operatingCashFlow: 2350000,\r\n    investingCashFlow: -600000,\r\n    financingCashFlow: -250000,\r\n    netCashFlow: 1500000\r\n  }\r\n];\r\n\r\nexport const hospitals: Hospital[] = [\r\n  {\r\n    id: 'general-1',\r\n    name: 'Metro General Hospital',\r\n    location: 'Downtown',\r\n    type: 'General'\r\n  },\r\n  {\r\n    id: 'cardio-1',\r\n    name: 'Heart & Vascular Institute',\r\n    location: 'Midtown',\r\n    type: 'Specialty'\r\n  },\r\n  {\r\n    id: 'pediatric-1',\r\n    name: 'Children\\'s Medical Center',\r\n    location: 'Westside',\r\n    type: 'Pediatric'\r\n  },\r\n  {\r\n    id: 'trauma-1',\r\n    name: 'Regional Trauma Center',\r\n    location: 'Northside',\r\n    type: 'Trauma'\r\n  }\r\n];\r\n\r\nexport const availableYears = [2021, 2022, 2023, 2024];\r\n\r\n// Helper function to generate variations in data\r\nconst generateVariation = (baseValue: number, variationPercent: number = 15): number => {\r\n  const variation = baseValue * (variationPercent / 100);\r\n  return Math.round(baseValue + (Math.random() - 0.5) * 2 * variation);\r\n};\r\n\r\n// Generate hospital data for all combinations\r\nexport const hospitalDataByYear: HospitalData[] = [];\r\n\r\nhospitals.forEach(hospital => {\r\n  availableYears.forEach(year => {\r\n    const yearMultiplier = year === 2024 ? 1 : year === 2023 ? 0.92 : year === 2022 ? 0.85 : 0.78;\r\n    const hospitalMultiplier = hospital.type === 'General' ? 1 : \r\n                               hospital.type === 'Specialty' ? 0.7 : \r\n                               hospital.type === 'Pediatric' ? 0.5 : 0.8;\r\n\r\n    const baseMultiplier = yearMultiplier * hospitalMultiplier;\r\n\r\n    const hospitalData: HospitalData = {\r\n      hospitalId: hospital.id,\r\n      year: year,\r\n      financialMetrics: [\r\n        {\r\n          id: 'total-revenue',\r\n          title: 'Total Revenue',\r\n          value: generateVariation(12500000 * baseMultiplier),\r\n          change: generateVariation(8.5, 50),\r\n          changeType: Math.random() > 0.3 ? 'increase' : 'decrease',\r\n          period: 'vs last month',\r\n          format: 'currency'\r\n        },\r\n        {\r\n          id: 'net-profit',\r\n          title: 'Net Profit',\r\n          value: generateVariation(2100000 * baseMultiplier),\r\n          change: generateVariation(12.3, 60),\r\n          changeType: Math.random() > 0.25 ? 'increase' : 'decrease',\r\n          period: 'vs last month',\r\n          format: 'currency'\r\n        },\r\n        {\r\n          id: 'profit-margin',\r\n          title: 'Profit Margin',\r\n          value: generateVariation(16.8, 25),\r\n          change: generateVariation(2.1, 80),\r\n          changeType: Math.random() > 0.4 ? 'increase' : 'decrease',\r\n          period: 'vs last month',\r\n          format: 'percentage'\r\n        },\r\n        {\r\n          id: 'operating-expenses',\r\n          title: 'Operating Expenses',\r\n          value: generateVariation(9800000 * baseMultiplier),\r\n          change: generateVariation(3.2, 40),\r\n          changeType: Math.random() > 0.6 ? 'increase' : 'decrease',\r\n          period: 'vs last month',\r\n          format: 'currency'\r\n        }\r\n      ],\r\n      revenueData: [\r\n        { month: 'Jan', revenue: generateVariation(11200000 * baseMultiplier), expenses: generateVariation(8900000 * baseMultiplier), netIncome: generateVariation(2300000 * baseMultiplier) },\r\n        { month: 'Feb', revenue: generateVariation(10800000 * baseMultiplier), expenses: generateVariation(8600000 * baseMultiplier), netIncome: generateVariation(2200000 * baseMultiplier) },\r\n        { month: 'Mar', revenue: generateVariation(12100000 * baseMultiplier), expenses: generateVariation(9200000 * baseMultiplier), netIncome: generateVariation(2900000 * baseMultiplier) },\r\n        { month: 'Apr', revenue: generateVariation(11800000 * baseMultiplier), expenses: generateVariation(9000000 * baseMultiplier), netIncome: generateVariation(2800000 * baseMultiplier) },\r\n        { month: 'May', revenue: generateVariation(12800000 * baseMultiplier), expenses: generateVariation(9600000 * baseMultiplier), netIncome: generateVariation(3200000 * baseMultiplier) },\r\n        { month: 'Jun', revenue: generateVariation(12500000 * baseMultiplier), expenses: generateVariation(9800000 * baseMultiplier), netIncome: generateVariation(2700000 * baseMultiplier) },\r\n        { month: 'Jul', revenue: generateVariation(13200000 * baseMultiplier), expenses: generateVariation(10100000 * baseMultiplier), netIncome: generateVariation(3100000 * baseMultiplier) },\r\n        { month: 'Aug', revenue: generateVariation(12900000 * baseMultiplier), expenses: generateVariation(9900000 * baseMultiplier), netIncome: generateVariation(3000000 * baseMultiplier) },\r\n        { month: 'Sep', revenue: generateVariation(13500000 * baseMultiplier), expenses: generateVariation(10300000 * baseMultiplier), netIncome: generateVariation(3200000 * baseMultiplier) },\r\n        { month: 'Oct', revenue: generateVariation(13100000 * baseMultiplier), expenses: generateVariation(10000000 * baseMultiplier), netIncome: generateVariation(3100000 * baseMultiplier) },\r\n        { month: 'Nov', revenue: generateVariation(12700000 * baseMultiplier), expenses: generateVariation(9700000 * baseMultiplier), netIncome: generateVariation(3000000 * baseMultiplier) },\r\n        { month: 'Dec', revenue: generateVariation(14200000 * baseMultiplier), expenses: generateVariation(10800000 * baseMultiplier), netIncome: generateVariation(3400000 * baseMultiplier) }\r\n      ],\r\n      departmentFinances: [\r\n        {\r\n          department: 'Emergency',\r\n          revenue: generateVariation(3200000 * baseMultiplier),\r\n          expenses: generateVariation(2400000 * baseMultiplier),\r\n          profit: generateVariation(800000 * baseMultiplier),\r\n          profitMargin: generateVariation(25.0, 30)\r\n        },\r\n        {\r\n          department: 'Surgery',\r\n          revenue: generateVariation(4500000 * baseMultiplier),\r\n          expenses: generateVariation(3100000 * baseMultiplier),\r\n          profit: generateVariation(1400000 * baseMultiplier),\r\n          profitMargin: generateVariation(31.1, 25)\r\n        },\r\n        {\r\n          department: 'Cardiology',\r\n          revenue: generateVariation(2800000 * baseMultiplier),\r\n          expenses: generateVariation(1900000 * baseMultiplier),\r\n          profit: generateVariation(900000 * baseMultiplier),\r\n          profitMargin: generateVariation(32.1, 20)\r\n        },\r\n        {\r\n          department: hospital.type === 'Pediatric' ? 'Pediatrics' : 'Oncology',\r\n          revenue: generateVariation(1900000 * baseMultiplier),\r\n          expenses: generateVariation(1400000 * baseMultiplier),\r\n          profit: generateVariation(500000 * baseMultiplier),\r\n          profitMargin: generateVariation(26.3, 35)\r\n        },\r\n        {\r\n          department: hospital.type === 'Trauma' ? 'Trauma' : 'Orthopedics',\r\n          revenue: generateVariation(1100000 * baseMultiplier),\r\n          expenses: generateVariation(800000 * baseMultiplier),\r\n          profit: generateVariation(300000 * baseMultiplier),\r\n          profitMargin: generateVariation(27.3, 40)\r\n        }\r\n      ],\r\n      patientMetrics: {\r\n        totalPatients: generateVariation(15420 * baseMultiplier, 20),\r\n        inpatients: generateVariation(2180 * baseMultiplier, 25),\r\n        outpatients: generateVariation(11850 * baseMultiplier, 20),\r\n        emergencyVisits: generateVariation(1390 * baseMultiplier, 30),\r\n        averageStayDuration: generateVariation(4.2 * 10, 15) / 10,\r\n        occupancyRate: generateVariation(87.5, 10)\r\n      },\r\n      expenseBreakdown: [\r\n        { category: 'Salaries & Benefits', amount: generateVariation(5200000 * baseMultiplier), percentage: generateVariation(53.1, 8), color: '#3b82f6' },\r\n        { category: 'Medical Supplies', amount: generateVariation(1800000 * baseMultiplier), percentage: generateVariation(18.4, 15), color: '#10b981' },\r\n        { category: 'Equipment', amount: generateVariation(1200000 * baseMultiplier), percentage: generateVariation(12.2, 20), color: '#f59e0b' },\r\n        { category: 'Utilities', amount: generateVariation(600000 * baseMultiplier), percentage: generateVariation(6.1, 25), color: '#ef4444' },\r\n        { category: 'Maintenance', amount: generateVariation(500000 * baseMultiplier), percentage: generateVariation(5.1, 30), color: '#8b5cf6' },\r\n        { category: 'Other', amount: generateVariation(500000 * baseMultiplier), percentage: generateVariation(5.1, 35), color: '#6b7280' }\r\n      ],\r\n      cashFlowData: [\r\n        {\r\n          date: `${year}-01`,\r\n          operatingCashFlow: generateVariation(2100000 * baseMultiplier),\r\n          investingCashFlow: generateVariation(-800000 * baseMultiplier),\r\n          financingCashFlow: generateVariation(-300000 * baseMultiplier),\r\n          netCashFlow: generateVariation(1000000 * baseMultiplier)\r\n        },\r\n        {\r\n          date: `${year}-02`,\r\n          operatingCashFlow: generateVariation(1950000 * baseMultiplier),\r\n          investingCashFlow: generateVariation(-200000 * baseMultiplier),\r\n          financingCashFlow: generateVariation(-400000 * baseMultiplier),\r\n          netCashFlow: generateVariation(1350000 * baseMultiplier)\r\n        },\r\n        {\r\n          date: `${year}-03`,\r\n          operatingCashFlow: generateVariation(2300000 * baseMultiplier),\r\n          investingCashFlow: generateVariation(-1200000 * baseMultiplier),\r\n          financingCashFlow: generateVariation(-200000 * baseMultiplier),\r\n          netCashFlow: generateVariation(900000 * baseMultiplier)\r\n        },\r\n        {\r\n          date: `${year}-04`,\r\n          operatingCashFlow: generateVariation(2200000 * baseMultiplier),\r\n          investingCashFlow: generateVariation(-300000 * baseMultiplier),\r\n          financingCashFlow: generateVariation(-350000 * baseMultiplier),\r\n          netCashFlow: generateVariation(1550000 * baseMultiplier)\r\n        },\r\n        {\r\n          date: `${year}-05`,\r\n          operatingCashFlow: generateVariation(2500000 * baseMultiplier),\r\n          investingCashFlow: generateVariation(-150000 * baseMultiplier),\r\n          financingCashFlow: generateVariation(-300000 * baseMultiplier),\r\n          netCashFlow: generateVariation(2050000 * baseMultiplier)\r\n        },\r\n        {\r\n          date: `${year}-06`,\r\n          operatingCashFlow: generateVariation(2350000 * baseMultiplier),\r\n          investingCashFlow: generateVariation(-600000 * baseMultiplier),\r\n          financingCashFlow: generateVariation(-250000 * baseMultiplier),\r\n          netCashFlow: generateVariation(1500000 * baseMultiplier)\r\n        }\r\n      ]\r\n    };\r\n\r\n    hospitalDataByYear.push(hospitalData);\r\n  });\r\n});\r\n\r\n// Helper function to get data for specific hospital and year\r\nexport const getHospitalData = (hospitalId: string, year: number): HospitalData | undefined => {\r\n  return hospitalDataByYear.find(data => data.hospitalId === hospitalId && data.year === year);\r\n};\r\n\r\n","// NOTE: These credentials are for demo purposes only\r\n// In a real application, these would be managed through a secure backend\r\nexport const demoAccounts = [\r\n  { \r\n    role: 'Admin',\r\n    email: import.meta.env.VITE_DEMO_ADMIN_EMAIL || 'admin@hospitalfinance.com',\r\n    password: import.meta.env.VITE_DEMO_ADMIN_PASSWORD || 'UsamaHF2024!'\r\n  },\r\n  {\r\n    role: 'Hospital Owner',\r\n    email: import.meta.env.VITE_DEMO_OWNER_EMAIL || 'owner@metrogeneral.com',\r\n    password: import.meta.env.VITE_DEMO_OWNER_PASSWORD || 'OwnerMG2024!'\r\n  },\r\n  {\r\n    role: 'Branch Manager',\r\n    email: import.meta.env.VITE_DEMO_MANAGER_EMAIL || 'manager@metrogeneral.com',\r\n    password: import.meta.env.VITE_DEMO_MANAGER_PASSWORD || 'ManagerMG2024!'\r\n  }\r\n];","import React, { useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { validatePassword, formatAuthError } from '../../utils/auth';\nimport { demoAccounts } from '../../config/demo';\nimport { logger } from '../../utils/logger';\n\ninterface SignInPageProps {\n  onSwitchToSignUp: () => void;\n}\n\nconst SignInPage: React.FC<SignInPageProps> = ({ onSwitchToSignUp }: SignInPageProps) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const { signIn, isLoading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrorMessage('');\n\n    // Validate password before submission\n    const validation = validatePassword(password);\n    if (!validation.isValid) {\n      setErrorMessage(validation.errors[0] || 'Invalid password'); // Show first error for UX\n      return;\n    }\n\n    try {\n      logger.info('Sign in attempt', { context: 'SignInPage', data: { email } });\n      await signIn(email, password);\n      logger.info('Sign in successful', { context: 'SignInPage', data: { email } });\n    } catch (error) {\n      logger.error('Sign in failed', { context: 'SignInPage', data: { email, error } });\n      setErrorMessage(formatAuthError(error));\n    }\n  };\n\n  const fillDemo = (email: string, password: string) => {\n    setEmail(email);\n    setPassword(password);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-blue-100 dark:from-gray-900 dark:to-slate-900 text-gray-900 dark:text-gray-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 transition-colors duration-200\">\n      <div className=\"max-w-md w-full space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-primary-600 rounded-xl flex items-center justify-center mb-4\">\n            <span className=\"text-white font-bold text-2xl\">H</span>\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Welcome back</h2>\n          <p className=\"mt-2 text-gray-600 dark:text-gray-300\">Sign in to your Hospital Finance Dashboard</p>\n        </div>\n\n        {/* Demo Accounts */}\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-blue-900 dark:text-blue-200 mb-2\">Demo Accounts:</h3>\n          <div className=\"space-y-2\">\n            {demoAccounts.map((account, index) => (\n              <button\n                key={index}\n                onClick={() => fillDemo(account.email, account.password)}\n                className=\"block w-full text-left text-xs bg-white dark:bg-gray-800 hover:bg-blue-50 dark:hover:bg-blue-900/40 border border-blue-200 dark:border-blue-700 rounded px-2 py-1 transition-colors\"\n              >\n                <span className=\"font-medium text-blue-900 dark:text-blue-200\">{account.role}</span>\n                <br />\n                <span className=\"text-blue-700 dark:text-blue-300\">{account.email}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Sign In Form */}\n        <form className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8 space-y-6\" onSubmit={handleSubmit}>\n          {errorMessage && (\n            <div className=\"bg-danger-50 border border-danger-200 text-danger-700 px-4 py-3 rounded-lg text-sm\">\n              {errorMessage}\n            </div>\n          )}\n\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Email Address\n            </label>\n            <input\n              id=\"email\"\n              type=\"email\"\n              required\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n              placeholder=\"Enter your email\"\n            />\n          </div>\n\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Password\n            </label>\n            <div className=\"relative\">\n              <input\n                id=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 pr-10\"\n                placeholder=\"Enter your password\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300\"\n              >\n                {showPassword ? (\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                  </svg>\n                ) : (\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                  </svg>\n                )}\n              </button>\n            </div>\n          </div>\n\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full bg-primary-600 hover:bg-primary-700 disabled:bg-primary-400 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center\"\n          >\n            {isLoading ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\n                Signing in...\n              </>\n            ) : (\n              'Sign In'\n            )}\n          </button>\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Don't have an account?{' '}\n              <button\n                type=\"button\"\n                onClick={onSwitchToSignUp}\n                className=\"text-primary-600 hover:text-primary-700 font-medium\"\n              >\n                Sign up\n              </button>\n            </p>\n          </div>\n        </form>\n\n        {/* Footer */}\n        <div className=\"text-center text-xs text-gray-500 dark:text-gray-400\">\n          <p>© 2024 Hospital Finance Dashboard. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignInPage;\n","/**\r\n * Password validation configuration\r\n */\r\nconst passwordConfig = {\r\n  minLength: 8,\r\n  requireUppercase: true,\r\n  requireLowercase: true,\r\n  requireNumbers: true,\r\n  requireSpecial: true,\r\n  maxLength: 128\r\n};\r\n\r\nexport interface PasswordValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * Validates a password against security requirements\r\n * @param password The password to validate\r\n * @returns Validation result with error messages if any\r\n */\r\nexport const validatePassword = (password: string): PasswordValidationResult => {\r\n  const errors: string[] = [];\r\n\r\n  // Check for empty password\r\n  if (!password) {\r\n    return {\r\n      isValid: false,\r\n      errors: ['Password is required']\r\n    };\r\n  }\r\n\r\n  // Check length requirements\r\n  if (password.length < passwordConfig.minLength) {\r\n    errors.push(`Password must be at least ${passwordConfig.minLength} characters long`);\r\n  }\r\n  if (password.length > passwordConfig.maxLength) {\r\n    errors.push(`Password cannot be longer than ${passwordConfig.maxLength} characters`);\r\n  }\r\n\r\n  // Check character requirements\r\n  if (passwordConfig.requireUppercase && !/[A-Z]/.test(password)) {\r\n    errors.push('Password must contain at least one uppercase letter');\r\n  }\r\n  if (passwordConfig.requireLowercase && !/[a-z]/.test(password)) {\r\n    errors.push('Password must contain at least one lowercase letter');\r\n  }\r\n  if (passwordConfig.requireNumbers && !/\\d/.test(password)) {\r\n    errors.push('Password must contain at least one number');\r\n  }\r\n  if (passwordConfig.requireSpecial && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n    errors.push('Password must contain at least one special character');\r\n  }\r\n\r\n  // Check for common patterns\r\n  if (/(.)\\1{2,}/.test(password)) {\r\n    errors.push('Password cannot contain repeating characters (3 or more times)');\r\n  }\r\n  if (/12345|qwerty|password|admin/i.test(password)) {\r\n    errors.push('Password contains a common pattern');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Ensures consistent error message formatting\r\n * @param error The error to format\r\n * @returns A user-friendly error message\r\n */\r\nexport const formatAuthError = (error: unknown): string => {\r\n  if (error instanceof Error) {\r\n    // Hide implementation details from users\r\n    if (error.message.includes('Invalid credentials')) {\r\n      return 'Invalid email or password';\r\n    }\r\n    if (error.message.includes('Rate limit')) {\r\n      return 'Too many attempts. Please try again later';\r\n    }\r\n    return 'An error occurred during authentication';\r\n  }\r\n  return 'An unexpected error occurred';\r\n};","import React, { useState } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { UserRole, SignUpData } from '../../types/auth';\nimport { hospitals } from '../../data/mockData';\nimport { roleDescriptions } from '../../data/mockUsers';\n\ninterface SignUpPageProps {\n  onSwitchToSignIn: () => void;\n}\n\nconst SignUpPage: React.FC<SignUpPageProps> = ({ onSwitchToSignIn }) => {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    role: 'branch_owner' as UserRole,\n    hospitalId: '',\n    hospitalIds: [] as string[]\n  });\n  const [error, setError] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const { signUp, isLoading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    // Validation\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      return;\n    }\n\n    if (formData.role === 'branch_owner' && !formData.hospitalId) {\n      setError('Please select a hospital for branch manager role');\n      return;\n    }\n\n    if (formData.role === 'hospital_owner' && formData.hospitalIds.length === 0) {\n      setError('Please select at least one hospital for hospital owner role');\n      return;\n    }\n\n    try {\n      const signUpData: SignUpData = {\n        name: formData.name,\n        email: formData.email,\n        password: formData.password,\n        role: formData.role\n      };\n\n      if (formData.role === 'branch_owner' && formData.hospitalId) {\n        signUpData.hospitalId = formData.hospitalId;\n      }\n      \n      if (formData.role === 'hospital_owner' && formData.hospitalIds.length > 0) {\n        signUpData.hospitalIds = formData.hospitalIds;\n      }\n\n      await signUp(signUpData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'An error occurred');\n    }\n  };\n\n  const handleInputChange = (field: string, value: string | string[]) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleHospitalSelection = (hospitalId: string, checked: boolean) => {\n    if (checked) {\n      setFormData(prev => ({\n        ...prev,\n        hospitalIds: [...prev.hospitalIds, hospitalId]\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        hospitalIds: prev.hospitalIds.filter(id => id !== hospitalId)\n      }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-blue-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center py-6 sm:py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-lg w-full space-y-6 sm:space-y-8\">\n        {/* Header */}\n        <div className=\"text-center\">\n          <div className=\"mx-auto w-16 h-16 bg-primary-600 rounded-xl flex items-center justify-center mb-4\">\n            <span className=\"text-white font-bold text-2xl\">H</span>\n          </div>\n          <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Create Account</h2>\n          <p className=\"mt-2 text-gray-600 dark:text-gray-300\">Join the Hospital Finance Dashboard</p>\n        </div>\n\n        {/* Sign Up Form */}\n        <form className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 sm:p-8 space-y-6\" onSubmit={handleSubmit}>\n          {error && (\n            <div className=\"bg-danger-50 dark:bg-danger-900/20 border border-danger-200 dark:border-danger-800 text-danger-700 dark:text-danger-300 px-4 py-3 rounded-lg text-sm\">\n              {error}\n            </div>\n          )}\n\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-1 gap-6\">\n            <div>\n              <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Full Name\n              </label>\n              <input\n                id=\"name\"\n                type=\"text\"\n                required\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                placeholder=\"Enter your full name\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Email Address\n              </label>\n              <input\n                id=\"email\"\n                type=\"email\"\n                required\n                value={formData.email}\n                onChange={(e) => handleInputChange('email', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                placeholder=\"Enter your email\"\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Password\n              </label>\n              <div className=\"relative\">\n                <input\n                  id=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  required\n                  value={formData.password}\n                  onChange={(e) => handleInputChange('password', e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 pr-10\"\n                  placeholder=\"Create a password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300\"\n                >\n                  {showPassword ? (\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21\" />\n                    </svg>\n                  ) : (\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                    </svg>\n                  )}\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Confirm Password\n              </label>\n              <input\n                id=\"confirmPassword\"\n                type=\"password\"\n                required\n                value={formData.confirmPassword}\n                onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n                placeholder=\"Confirm your password\"\n              />\n            </div>\n          </div>\n\n          {/* Role Selection */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n              Account Type\n            </label>\n            <div className=\"space-y-3\">\n              {(Object.keys(roleDescriptions) as UserRole[]).map((role) => (\n                <div key={role} className=\"flex items-start\">\n                  <input\n                    id={role}\n                    type=\"radio\"\n                    name=\"role\"\n                    value={role}\n                    checked={formData.role === role}\n                    onChange={(e) => handleInputChange('role', e.target.value as UserRole)}\n                    className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700\"\n                    disabled={role === 'admin'} // Admin accounts are created differently\n                  />\n                  <div className=\"ml-3\">\n                    <label htmlFor={role} className=\"block text-sm font-medium text-gray-900 dark:text-white\">\n                      {roleDescriptions[role].title}\n                      {role === 'admin' && <span className=\"text-gray-400 dark:text-gray-500 ml-2\">(Contact admin)</span>}\n                    </label>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                      {roleDescriptions[role].description}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Hospital Selection */}\n          {formData.role === 'branch_owner' && (\n            <div>\n              <label htmlFor=\"hospitalId\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Select Hospital\n              </label>\n              <div className=\"relative\">\n                <select\n                  id=\"hospitalId\"\n                  value={formData.hospitalId}\n                  onChange={(e) => handleInputChange('hospitalId', e.target.value)}\n                  className=\"w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 appearance-none\"\n                  required\n                >\n                  <option value=\"\">Choose a hospital...</option>\n                  {hospitals.map((hospital) => (\n                    <option key={hospital.id} value={hospital.id}>\n                      {hospital.name} ({hospital.type} • {hospital.location})\n                    </option>\n                  ))}\n                </select>\n                <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3\">\n                  <svg className=\"h-5 w-5 text-gray-400 dark:text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {formData.role === 'hospital_owner' && (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Select Hospitals (you can select multiple)\n              </label>\n              <div className=\"space-y-2 max-h-32 overflow-y-auto border border-gray-300 dark:border-gray-600 rounded-lg p-3 bg-gray-50 dark:bg-gray-700\">\n                {hospitals.map((hospital) => (\n                  <div key={hospital.id} className=\"flex items-center\">\n                    <input\n                      id={`hospital-${hospital.id}`}\n                      type=\"checkbox\"\n                      checked={formData.hospitalIds.includes(hospital.id)}\n                      onChange={(e) => handleHospitalSelection(hospital.id, e.target.checked)}\n                      className=\"h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 rounded\"\n                    />\n                    <label htmlFor={`hospital-${hospital.id}`} className=\"ml-2 text-sm text-gray-900 dark:text-white\">\n                      {hospital.name}\n                      <span className=\"text-gray-500 dark:text-gray-400 ml-1\">({hospital.type} • {hospital.location})</span>\n                    </label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full bg-primary-600 hover:bg-primary-700 disabled:bg-primary-400 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200 flex items-center justify-center\"\n          >\n            {isLoading ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\n                Creating account...\n              </>\n            ) : (\n              'Create Account'\n            )}\n          </button>\n\n          <div className=\"text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Already have an account?{' '}\n              <button\n                type=\"button\"\n                onClick={onSwitchToSignIn}\n                className=\"text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300 font-medium\"\n              >\n                Sign in\n              </button>\n            </p>\n          </div>\n        </form>\n\n        {/* Footer */}\n        <div className=\"text-center text-xs text-gray-500 dark:text-gray-400\">\n          <p>© 2024 Hospital Finance Dashboard. All rights reserved.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignUpPage;\n"],"names":["f","require$$0","k","Symbol","for","l","m","Object","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","key","ref","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","type","props","_owner","current","reactJsxRuntime_production_min","jsx","jsxs","jsxRuntimeModule","exports","mockUsers","id","email","name","role","createdAt","lastLogin","hospitalIds","hospitalId","roleDescriptions","admin","title","description","permissions","hospital_owner","branch_owner","logger","isDev","formatMessage","level","message","options","timestamp","Date","toISOString","context","toUpperCase","log","this","handleProductionError","data","info","warn","error","AuthContext","createContext","AuthProvider","children","user","setUser","useState","isLoading","setIsLoading","useEffect","storedUser","localStorage","getItem","parsedUser","JSON","parse","removeItem","value","isAuthenticated","signIn","async","password","userData","Promise","resolve","setTimeout","length","Error","find","u","authService","setItem","stringify","signUp","newUser","now","push","signOut","userId","canAccessHospital","includes","getAccessibleHospitals","Provider","useAuth","useContext","hospitals","location","availableYears","generateVariation","baseValue","variationPercent","variation","Math","round","random","hospitalDataByYear","forEach","hospital","year","baseMultiplier","hospitalData","financialMetrics","change","changeType","period","format","revenueData","month","revenue","expenses","netIncome","departmentFinances","department","profit","profitMargin","patientMetrics","totalPatients","inpatients","outpatients","emergencyVisits","averageStayDuration","occupancyRate","expenseBreakdown","category","amount","percentage","color","cashFlowData","date","operatingCashFlow","investingCashFlow","financingCashFlow","netCashFlow","getHospitalData","demoAccounts","SignInPage","onSwitchToSignUp","setEmail","setPassword","errorMessage","setErrorMessage","showPassword","setShowPassword","className","map","account","index","onClick","fillDemo","onSubmit","preventDefault","validation","errors","test","isValid","validatePassword","formatAuthError","htmlFor","required","onChange","target","placeholder","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","disabled","Fragment","SignUpPage","onSwitchToSignIn","formData","setFormData","confirmPassword","setError","handleInputChange","field","prev","signUpData","err","keys","checked","handleHospitalSelection","filter"],"mappings":"uEASiBA,EAAEC,EAAiBC,EAAEC,OAAOC,IAAI,iBAAiBC,EAAEF,OAAOC,IAAI,kBAAkBE,EAAEC,OAAOC,UAAUC,eAAeC,EAAEV,EAAEW,mDAAmDC,kBAAkBC,EAAE,CAACC,KAAI,EAAGC,KAAI,EAAGC,QAAO,EAAGC,UAAS,GAChP,SAASC,EAAEC,EAAEC,EAAEC,GAAG,IAAIC,EAAEC,EAAE,GAAGC,EAAE,KAAKC,EAAE,KAAiF,IAAIH,UAAhF,IAASD,IAAIG,EAAE,GAAGH,QAAG,IAASD,EAAEN,MAAMU,EAAE,GAAGJ,EAAEN,UAAK,IAASM,EAAEL,MAAMU,EAAEL,EAAEL,KAAcK,EAAEd,EAAEoB,KAAKN,EAAEE,KAAKT,EAAEJ,eAAea,KAAKC,EAAED,GAAGF,EAAEE,IAAI,GAAGH,GAAGA,EAAEQ,aAAa,IAAIL,KAAKF,EAAED,EAAEQ,sBAAwBJ,EAAED,KAAKC,EAAED,GAAGF,EAAEE,IAAI,MAAM,CAACM,SAAS1B,EAAE2B,KAAKV,EAAEL,IAAIU,EAAET,IAAIU,EAAEK,MAAMP,EAAEQ,OAAOrB,EAAEsB,QAAQ,YAAkB3B,EAAE4B,EAAAC,IAAYhB,EAAEe,EAAAE,KAAajB,ECPxWkB,EAAAC,QAAiBpC,kBCDZ,MAAMqC,EAAoB,CAC/B,CACEC,GAAI,UACJC,MAAO,4BACPC,KAAM,uBACNC,KAAM,QACNC,UAAW,uBACXC,UAAW,wBAEb,CACEL,GAAI,UACJC,MAAO,yBACPC,KAAM,gBACNC,KAAM,iBACNG,YAAa,CAAC,YAAa,YAC3BF,UAAW,uBACXC,UAAW,wBAEb,CACEL,GAAI,UACJC,MAAO,yBACPC,KAAM,mBACNC,KAAM,iBACNG,YAAa,CAAC,eACdF,UAAW,uBACXC,UAAW,wBAEb,CACEL,GAAI,WACJC,MAAO,2BACPC,KAAM,WACNC,KAAM,eACNI,WAAY,YACZH,UAAW,uBACXC,UAAW,wBAEb,CACEL,GAAI,WACJC,MAAO,0BACPC,KAAM,sBACNC,KAAM,eACNI,WAAY,WACZH,UAAW,uBACXC,UAAW,wBAEb,CACEL,GAAI,WACJC,MAAO,2BACPC,KAAM,gBACNC,KAAM,eACNI,WAAY,cACZH,UAAW,uBACXC,UAAW,wBAEb,CACEL,GAAI,WACJC,MAAO,2BACPC,KAAM,iBACNC,KAAM,eACNI,WAAY,WACZH,UAAW,uBACXC,UAAW,yBAsEFG,EAAmB,CAC9BC,MAAO,CACLC,MAAO,uBACPC,YAAa,yDACbC,YAAa,CAAC,qBAAsB,eAAgB,yBAEtDC,eAAgB,CACdH,MAAO,iBACPC,YAAa,sDACbC,YAAa,CAAC,yBAA0B,yBAA0B,2BAGpEE,aAAc,CACZJ,MAAO,iBACPC,YAAa,iDACbC,YAAa,CAAC,mBAAoB,mBAAoB,yBClF7CG,EAAS,IA1DtB,MACUC,OAAQ,EAER,aAAAC,CAAcC,EAAiBC,EAAiBC,GACtD,MAAMC,GAAA,IAAgBC,MAAOC,cACvBC,EAAUJ,GAASI,QAAU,IAAIJ,EAAQI,WAAa,GAC5D,MAAO,GAAGH,KAAaH,EAAMO,iBAAiBD,KAAWL,GAC3D,CAEQ,GAAAO,CAAIR,EAAiBC,EAAiBC,GAE5C,GAAKO,KAAKX,OAAmB,UAAVE,EAInB,OAFyBS,KAAKV,cAAcC,EAAOC,EAASC,GAEpDF,GACN,IAAK,OAGL,IAAK,OACCS,KAAKX,MACT,MACF,IAAK,QAECW,KAAKX,OAKPW,KAAKC,sBAAsBT,EAASC,GAASS,MAIrD,CAEQ,qBAAAD,CAAsBT,EAAiBU,GAQ/C,CAEA,IAAAC,CAAKX,EAAiBC,GACpBO,KAAKD,IAAI,OAAQP,EAASC,EAC5B,CAEA,IAAAW,CAAKZ,EAAiBC,GACpBO,KAAKD,IAAI,OAAQP,EAASC,EAC5B,CAEA,KAAAY,CAAMb,EAAiBC,GACrBO,KAAKD,IAAI,QAASP,EAASC,EAC7B,GC1DWa,EAAcC,EAAAA,mBAA2C,GAMzDC,EAA4C,EAAGC,eAC1D,MAAOC,EAAMC,GAAWC,EAAAA,SAAsB,OACvCC,EAAWC,GAAgBF,EAAAA,UAAS,GAG3CG,EAAAA,UAAU,KACR,MAAMC,EAAaC,aAAaC,QAAQ,uBACxC,GAAIF,EACF,IACE,MAAMG,EAAaC,KAAKC,MAAML,GAE1BG,GAAoC,iBAAfA,GAA2B,OAAQA,GAAc,UAAWA,EACnFR,EAAQQ,IAER/B,EAAOgB,KAAK,iDAAkD,CAAEP,QAAS,gBACzEoB,aAAaK,WAAW,uBAE5B,OAASjB,GACPjB,EAAOiB,MAAM,mCAAoC,CAAER,QAAS,cAAeK,KAAMG,IACjFY,aAAaK,WAAW,sBAC1B,CAEFR,GAAa,IACZ,IAEH,MAsEMS,EAAyB,CAC7Bb,OACAc,kBAAmBd,EACnBG,YACAY,OA1EaC,MAAOpD,EAAeqD,KACnCb,GAAa,GACb,IACE,MAAMc,OF8BFF,OAAOpD,EAAeqD,KAK5B,SAHM,IAAIE,QAAQC,GAAWC,WAAWD,EAAS,MAG7CH,EAASK,OAAS,EACpB,MAAM,IAAIC,MAAM,+CAGlB,MAAMvB,EAAOtC,EAAU8D,KAAKC,GAAKA,EAAE7D,QAAUA,GAC7C,IAAKoC,EACH,MAAM,IAAIuB,MAAM,4CAKlB,GAAiB,iBAAbN,GACa,iBAAbA,GACa,mBAAbA,EACF,MAAM,IAAIM,MAAM,sBAKlB,OADAvB,EAAKhC,WAAA,IAAgBiB,MAAOC,cACrBc,GEtDkB0B,CAAmB9D,EAAOqD,GACjD,IAAKC,IAAaA,EAASvD,KAAOuD,EAAStD,MACzC,MAAM,IAAI2D,MAAM,0DAElBtB,EAAQiB,GACRX,aAAaoB,QAAQ,sBAAuBjB,KAAKkB,UAAUV,GAC7D,OAASvB,GAEP,MADAjB,EAAOiB,MAAM,iBAAkB,CAAER,QAAS,cAAeK,KAAMG,IACzDA,CACR,CAAA,QACES,GAAa,EACf,GA6DAyB,OA1Dab,MAAOE,IACpBd,GAAa,GACb,IACE,MAAM0B,OFwCFd,OAAOE,IAab,SAJM,IAAIC,QAAQC,GAAWC,WAAWD,EAAS,OAG5B1D,EAAU8D,QAAUC,EAAE7D,QAAUsD,EAAStD,OAE5D,MAAM,IAAI2D,MAAM,uCAIlB,MAAMO,EAAgB,CACpBnE,GAAI,QAAQsB,KAAK8C,QACjBnE,MAAOsD,EAAStD,MAChBC,KAAMqD,EAASrD,KACfC,KAAMoD,EAASpD,KACfC,WAAA,IAAekB,MAAOC,cACtBlB,WAAA,IAAeiB,MAAOC,iBAClBgC,EAAShD,YAAc,CAAEA,WAAYgD,EAAShD,eAC9CgD,EAASjD,aAAe,CAAEA,YAAaiD,EAASjD,cAMtD,OAFAP,EAAUsE,KAAKF,GAERA,GExEiBJ,CAAmBR,GACzC,IAAKY,IAAYA,EAAQnE,KAAOmE,EAAQlE,MACtC,MAAM,IAAI2D,MAAM,wDAElBtB,EAAQ6B,GACRvB,aAAaoB,QAAQ,sBAAuBjB,KAAKkB,UAAUE,GAC7D,OAASnC,GAEP,MADAjB,EAAOiB,MAAM,iBAAkB,CAAER,QAAS,cAAeK,KAAMG,IACzDA,CACR,CAAA,QACES,GAAa,EACf,GA6CA6B,QA1Cc,KACdvD,EAAOe,KAAK,kBAAmB,CAAEN,QAAS,cAAeK,KAAM,CAAE0C,OAAQlC,GAAMrC,MAC/EsC,EAAQ,MACRM,aAAaK,WAAW,wBAwCxBuB,kBArCyBjE,IACzB,IAAK8B,EAAM,OAAO,EAElB,OAAQA,EAAKlC,MACX,IAAK,QACH,OAAO,EACT,IAAK,iBACH,OAAOkC,EAAK/B,aAAamE,SAASlE,KAAe,EACnD,IAAK,eACH,OAAO8B,EAAK9B,aAAeA,EAC7B,QACE,OAAO,IA2BXmE,uBAvB6B,KAC7B,IAAKrC,EAAM,MAAO,GAElB,OAAQA,EAAKlC,MACX,IAAK,QACH,MAAO,CAAC,YAAa,WAAY,cAAe,YAClD,IAAK,iBACH,OAAOkC,EAAK/B,aAAe,GAC7B,IAAK,eACH,OAAO+B,EAAK9B,WAAa,CAAC8B,EAAK9B,YAAc,GAC/C,QACE,MAAO,MAeb,OACEZ,EAAAA,IAACsC,EAAY0C,SAAZ,CAAqBzB,QACnBd,cCpHMwC,EAAU,KACrB,MAAMpD,EAAUqD,EAAAA,WAAW5C,GAC3B,QAAgB,IAAZT,EACF,MAAM,IAAIoC,MAAM,+CAElB,OAAOpC,GC8JIsD,EAAwB,CACnC,CACE9E,GAAI,YACJE,KAAM,yBACN6E,SAAU,WACVzF,KAAM,WAER,CACEU,GAAI,WACJE,KAAM,6BACN6E,SAAU,UACVzF,KAAM,aAER,CACEU,GAAI,cACJE,KAAM,4BACN6E,SAAU,WACVzF,KAAM,aAER,CACEU,GAAI,WACJE,KAAM,yBACN6E,SAAU,YACVzF,KAAM,WAIG0F,EAAiB,CAAC,KAAM,KAAM,KAAM,MAG3CC,EAAoB,CAACC,EAAmBC,EAA2B,MACvE,MAAMC,EAAYF,GAAaC,EAAmB,KAClD,OAAOE,KAAKC,MAAMJ,EAAoC,GAAvBG,KAAKE,SAAW,IAAWH,IAI/CI,EAAqC,GAElDV,EAAUW,QAAQC,IAChBV,EAAeS,QAAQE,IACrB,MAKMC,GAL0B,OAATD,EAAgB,EAAa,OAATA,EAAgB,IAAgB,OAATA,EAAgB,IAAO,MAC5C,YAAlBD,EAASpG,KAAqB,EACZ,cAAlBoG,EAASpG,KAAuB,GACd,cAAlBoG,EAASpG,KAAuB,GAAM,IAI3DuG,EAA6B,CACjCtF,WAAYmF,EAAS1F,GACrB2F,OACAG,iBAAkB,CAChB,CACE9F,GAAI,gBACJU,MAAO,gBACPwC,MAAO+B,EAAkB,MAAWW,GACpCG,OAAQd,EAAkB,IAAK,IAC/Be,WAAYX,KAAKE,SAAW,GAAM,WAAa,WAC/CU,OAAQ,gBACRC,OAAQ,YAEV,CACElG,GAAI,aACJU,MAAO,aACPwC,MAAO+B,EAAkB,KAAUW,GACnCG,OAAQd,EAAkB,KAAM,IAChCe,WAAYX,KAAKE,SAAW,IAAO,WAAa,WAChDU,OAAQ,gBACRC,OAAQ,YAEV,CACElG,GAAI,gBACJU,MAAO,gBACPwC,MAAO+B,EAAkB,KAAM,IAC/Bc,OAAQd,EAAkB,IAAK,IAC/Be,WAAYX,KAAKE,SAAW,GAAM,WAAa,WAC/CU,OAAQ,gBACRC,OAAQ,cAEV,CACElG,GAAI,qBACJU,MAAO,qBACPwC,MAAO+B,EAAkB,KAAUW,GACnCG,OAAQd,EAAkB,IAAK,IAC/Be,WAAYX,KAAKE,SAAW,GAAM,WAAa,WAC/CU,OAAQ,gBACRC,OAAQ,aAGZC,YAAa,CACX,CAAEC,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,KAAUW,GAAiBW,UAAWtB,EAAkB,KAAUW,IACrK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,KAAUW,GAAiBW,UAAWtB,EAAkB,KAAUW,IACrK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,KAAUW,GAAiBW,UAAWtB,EAAkB,KAAUW,IACrK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,IAAUW,GAAiBW,UAAWtB,EAAkB,KAAUW,IACrK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,KAAUW,GAAiBW,UAAWtB,EAAkB,KAAUW,IACrK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,KAAUW,GAAiBW,UAAWtB,EAAkB,KAAUW,IACrK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,MAAWW,GAAiBW,UAAWtB,EAAkB,KAAUW,IACtK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,KAAUW,GAAiBW,UAAWtB,EAAkB,IAAUW,IACrK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,MAAWW,GAAiBW,UAAWtB,EAAkB,KAAUW,IACtK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,IAAWW,GAAiBW,UAAWtB,EAAkB,KAAUW,IACtK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,KAAUW,GAAiBW,UAAWtB,EAAkB,IAAUW,IACrK,CAAEQ,MAAO,MAAOC,QAASpB,EAAkB,MAAWW,GAAiBU,SAAUrB,EAAkB,MAAWW,GAAiBW,UAAWtB,EAAkB,KAAUW,KAExKY,mBAAoB,CAClB,CACEC,WAAY,YACZJ,QAASpB,EAAkB,KAAUW,GACrCU,SAAUrB,EAAkB,KAAUW,GACtCc,OAAQzB,EAAkB,IAASW,GACnCe,aAAc1B,EAAkB,GAAM,KAExC,CACEwB,WAAY,UACZJ,QAASpB,EAAkB,KAAUW,GACrCU,SAAUrB,EAAkB,KAAUW,GACtCc,OAAQzB,EAAkB,KAAUW,GACpCe,aAAc1B,EAAkB,KAAM,KAExC,CACEwB,WAAY,aACZJ,QAASpB,EAAkB,KAAUW,GACrCU,SAAUrB,EAAkB,KAAUW,GACtCc,OAAQzB,EAAkB,IAASW,GACnCe,aAAc1B,EAAkB,KAAM,KAExC,CACEwB,WAA8B,cAAlBf,EAASpG,KAAuB,aAAe,WAC3D+G,QAASpB,EAAkB,KAAUW,GACrCU,SAAUrB,EAAkB,KAAUW,GACtCc,OAAQzB,EAAkB,IAASW,GACnCe,aAAc1B,EAAkB,KAAM,KAExC,CACEwB,WAA8B,WAAlBf,EAASpG,KAAoB,SAAW,cACpD+G,QAASpB,EAAkB,KAAUW,GACrCU,SAAUrB,EAAkB,IAASW,GACrCc,OAAQzB,EAAkB,IAASW,GACnCe,aAAc1B,EAAkB,KAAM,MAG1C2B,eAAgB,CACdC,cAAe5B,EAAkB,MAAQW,EAAgB,IACzDkB,WAAY7B,EAAkB,KAAOW,EAAgB,IACrDmB,YAAa9B,EAAkB,MAAQW,EAAgB,IACvDoB,gBAAiB/B,EAAkB,KAAOW,EAAgB,IAC1DqB,oBAAqBhC,EAAkB,GAAU,IAAM,GACvDiC,cAAejC,EAAkB,KAAM,KAEzCkC,iBAAkB,CAChB,CAAEC,SAAU,sBAAuBC,OAAQpC,EAAkB,KAAUW,GAAiB0B,WAAYrC,EAAkB,KAAM,GAAIsC,MAAO,WACvI,CAAEH,SAAU,mBAAoBC,OAAQpC,EAAkB,KAAUW,GAAiB0B,WAAYrC,EAAkB,KAAM,IAAKsC,MAAO,WACrI,CAAEH,SAAU,YAAaC,OAAQpC,EAAkB,KAAUW,GAAiB0B,WAAYrC,EAAkB,KAAM,IAAKsC,MAAO,WAC9H,CAAEH,SAAU,YAAaC,OAAQpC,EAAkB,IAASW,GAAiB0B,WAAYrC,EAAkB,IAAK,IAAKsC,MAAO,WAC5H,CAAEH,SAAU,cAAeC,OAAQpC,EAAkB,IAASW,GAAiB0B,WAAYrC,EAAkB,IAAK,IAAKsC,MAAO,WAC9H,CAAEH,SAAU,QAASC,OAAQpC,EAAkB,IAASW,GAAiB0B,WAAYrC,EAAkB,IAAK,IAAKsC,MAAO,YAE1HC,aAAc,CACZ,CACEC,KAAM,GAAG9B,OACT+B,kBAAmBzC,EAAkB,KAAUW,GAC/C+B,kBAAmB1C,GAAkB,IAAUW,GAC/CgC,kBAAmB3C,GAAkB,IAAUW,GAC/CiC,YAAa5C,EAAkB,IAAUW,IAE3C,CACE6B,KAAM,GAAG9B,OACT+B,kBAAmBzC,EAAkB,MAAUW,GAC/C+B,kBAAmB1C,GAAkB,IAAUW,GAC/CgC,kBAAmB3C,GAAkB,IAAUW,GAC/CiC,YAAa5C,EAAkB,MAAUW,IAE3C,CACE6B,KAAM,GAAG9B,OACT+B,kBAAmBzC,EAAkB,KAAUW,GAC/C+B,kBAAmB1C,GAAkB,KAAWW,GAChDgC,kBAAmB3C,GAAkB,IAAUW,GAC/CiC,YAAa5C,EAAkB,IAASW,IAE1C,CACE6B,KAAM,GAAG9B,OACT+B,kBAAmBzC,EAAkB,KAAUW,GAC/C+B,kBAAmB1C,GAAkB,IAAUW,GAC/CgC,kBAAmB3C,GAAkB,KAAUW,GAC/CiC,YAAa5C,EAAkB,MAAUW,IAE3C,CACE6B,KAAM,GAAG9B,OACT+B,kBAAmBzC,EAAkB,KAAUW,GAC/C+B,kBAAmB1C,GAAkB,KAAUW,GAC/CgC,kBAAmB3C,GAAkB,IAAUW,GAC/CiC,YAAa5C,EAAkB,MAAUW,IAE3C,CACE6B,KAAM,GAAG9B,OACT+B,kBAAmBzC,EAAkB,MAAUW,GAC/C+B,kBAAmB1C,GAAkB,IAAUW,GAC/CgC,kBAAmB3C,GAAkB,KAAUW,GAC/CiC,YAAa5C,EAAkB,KAAUW,MAK/CJ,EAAmBnB,KAAKwB,OAKrB,MAAMiC,EAAkB,CAACvH,EAAoBoF,IAC3CH,EAAmB3B,KAAKhC,GAAQA,EAAKtB,aAAeA,GAAcsB,EAAK8D,OAASA,GCnX5EoC,EAAe,CAC1B,CACE5H,KAAM,QACNF,MAAgD,4BAChDqD,SAAsD,gBAExD,CACEnD,KAAM,iBACNF,MAAgD,yBAChDqD,SAAsD,gBAExD,CACEnD,KAAM,iBACNF,MAAkD,2BAClDqD,SAAwD,mBCNtD0E,EAAwC,EAAGC,uBAC/C,MAAOhI,EAAOiI,GAAY3F,EAAAA,SAAS,KAC5Be,EAAU6E,GAAe5F,EAAAA,SAAS,KAClC6F,EAAcC,GAAmB9F,EAAAA,SAAS,KAC1C+F,EAAcC,GAAmBhG,EAAAA,UAAS,IAC3Ca,OAAEA,EAAAZ,UAAQA,GAAcoC,IA4B9B,aACG,MAAA,CAAI4D,UAAU,8NACbpG,SAAAxC,EAAAA,KAAC,MAAA,CAAI4I,UAAU,4BAEbpG,SAAA,CAAAxC,EAAAA,KAAC,MAAA,CAAI4I,UAAU,cACbpG,SAAA,CAAAzC,EAAAA,IAAC,MAAA,CAAI6I,UAAU,oFACbpG,SAAAzC,EAAAA,IAAC,QAAK6I,UAAU,gCAAgCpG,iBAElDzC,EAAAA,IAAC,KAAA,CAAG6I,UAAU,mDAAmDpG,SAAA,iBACjEzC,EAAAA,IAAC,IAAA,CAAE6I,UAAU,wCAAwCpG,SAAA,kDAIvDxC,EAAAA,KAAC,MAAA,CAAI4I,UAAU,4FACbpG,SAAA,CAAAzC,EAAAA,IAAC,KAAA,CAAG6I,UAAU,4DAA4DpG,SAAA,mBAC1EzC,EAAAA,IAAC,OAAI6I,UAAU,YACZpG,WAAaqG,IAAI,CAACC,EAASC,IAC1B/I,EAAAA,KAAC,SAAA,CAECgJ,QAAS,KAAMC,OAxBX5I,EAwBoByI,EAAQzI,MAxBbqD,EAwBoBoF,EAAQpF,SAvB3D4E,EAASjI,QACTkI,EAAY7E,GAFG,IAACrD,EAAeqD,GAyBnBkF,UAAU,sLAEVpG,SAAA,CAAAzC,EAAAA,IAAC,OAAA,CAAK6I,UAAU,+CAAgDpG,SAAAsG,EAAQvI,aACvE,KAAA,IACDR,EAAAA,IAAC,OAAA,CAAK6I,UAAU,mCAAoCpG,WAAQnC,UANvD0I,SAab/I,EAAAA,KAAC,OAAA,CAAK4I,UAAU,+DAA+DM,SAzDhEzF,MAAOpE,IAC1BA,EAAE8J,iBACFV,EAAgB,IAGhB,MAAMW,ECAsB,CAAC1F,IAC/B,MAAM2F,EAAmB,GAGzB,OAAK3F,GAQDA,EAASK,OA9BF,GA+BTsF,EAAO5E,KAAK,+CAEVf,EAASK,OA5BF,KA6BTsF,EAAO5E,KAAK,iDAI0B,QAAQ6E,KAAK5F,IACnD2F,EAAO5E,KAAK,uDAE0B,QAAQ6E,KAAK5F,IACnD2F,EAAO5E,KAAK,uDAEwB,KAAK6E,KAAK5F,IAC9C2F,EAAO5E,KAAK,6CAEwB,yBAAyB6E,KAAK5F,IAClE2F,EAAO5E,KAAK,wDAIV,YAAY6E,KAAK5F,IACnB2F,EAAO5E,KAAK,kEAEV,+BAA+B6E,KAAK5F,IACtC2F,EAAO5E,KAAK,sCAGP,CACL8E,QAA2B,IAAlBF,EAAOtF,OAChBsF,WAtCO,CACLE,SAAS,EACTF,OAAQ,CAAC,0BDPQG,CAAiB9F,GACpC,GAAK0F,EAAWG,QAKhB,IACEpI,EAAOe,KAAK,kBAAmB,CAAEN,QAAS,aAAcK,KAAM,CAAE5B,iBAC1DmD,EAAOnD,EAAOqD,GACpBvC,EAAOe,KAAK,qBAAsB,CAAEN,QAAS,aAAcK,KAAM,CAAE5B,UACrE,OAAS+B,GACPjB,EAAOiB,MAAM,iBAAkB,CAAER,QAAS,aAAcK,KAAM,CAAE5B,QAAO+B,WACvEqG,ECwCyB,CAACrG,GAC1BA,aAAiB4B,MAEf5B,EAAMb,QAAQsD,SAAS,uBAClB,4BAELzC,EAAMb,QAAQsD,SAAS,cAClB,4CAEF,0CAEF,+BDnDa4E,CAAgBrH,GAClC,MAXEqG,EAAgBW,EAAWC,OAAO,IAAM,qBAmDnC7G,SAAA,CAAAgG,GACCzI,EAAAA,IAAC,MAAA,CAAI6I,UAAU,qFACZpG,SAAAgG,WAIJ,MAAA,CACChG,SAAA,CAAAzC,MAAC,QAAA,CAAM2J,QAAQ,QAAQd,UAAU,kEAAkEpG,SAAA,kBAGnGzC,EAAAA,IAAC,QAAA,CACCK,GAAG,QACHV,KAAK,QACLiK,UAAQ,EACRrG,MAAOjD,EACPuJ,SAAWvK,GAAMiJ,EAASjJ,EAAEwK,OAAOvG,OACnCsF,UAAU,qMACVkB,YAAY,+BAIf,MAAA,CACCtH,SAAA,CAAAzC,MAAC,QAAA,CAAM2J,QAAQ,WAAWd,UAAU,kEAAkEpG,SAAA,aAGtGxC,EAAAA,KAAC,MAAA,CAAI4I,UAAU,WACbpG,SAAA,CAAAzC,EAAAA,IAAC,QAAA,CACCK,GAAG,WACHV,KAAMgJ,EAAe,OAAS,WAC9BiB,UAAQ,EACRrG,MAAOI,EACPkG,SAAWvK,GAAMkJ,EAAYlJ,EAAEwK,OAAOvG,OACtCsF,UAAU,2MACVkB,YAAY,wBAEd/J,EAAAA,IAAC,SAAA,CACCL,KAAK,SACLsJ,QAAS,IAAML,GAAiBD,GAChCE,UAAU,kIAETpG,SAAAkG,EACC3I,MAAC,MAAA,CAAI6I,UAAU,UAAUmB,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YACjEzH,SAAAzC,EAAAA,IAAC,OAAA,CAAKmK,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGhL,EAAE,0LAGvEY,EAAAA,KAAC,MAAA,CAAI4I,UAAU,UAAUmB,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YACjEzH,SAAA,CAAAzC,EAAAA,IAAC,OAAA,CAAKmK,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGhL,EAAE,qCACrEW,EAAAA,IAAC,QAAKmK,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGhL,EAAE,uIAO/EW,EAAAA,IAAC,SAAA,CACCL,KAAK,SACL2K,SAAUzH,EACVgG,UAAU,iLAETpG,WACCxC,EAAAA,KAAAsK,EAAAA,SAAA,CACE9H,SAAA,CAAAzC,EAAAA,IAAC,MAAA,CAAI6I,UAAU,sFAA0F,mBAI3G,kBAIH,MAAA,CAAIA,UAAU,cACbpG,SAAAxC,EAAAA,KAAC,IAAA,CAAE4I,UAAU,2CAA2CpG,SAAA,CAAA,yBAC/B,IACvBzC,EAAAA,IAAC,SAAA,CACCL,KAAK,SACLsJ,QAASX,EACTO,UAAU,sDACXpG,SAAA,0BAQN,MAAA,CAAIoG,UAAU,uDACbpG,SAAAzC,EAAAA,IAAC,IAAA,CAAEyC,6EEtJP+H,EAAwC,EAAGC,uBAC/C,MAAOC,EAAUC,GAAe/H,WAAS,CACvCrC,KAAM,GACND,MAAO,GACPqD,SAAU,GACViH,gBAAiB,GACjBpK,KAAM,eACNI,WAAY,GACZD,YAAa,MAER0B,EAAOwI,GAAYjI,EAAAA,SAAS,KAC5B+F,EAAcC,GAAmBhG,EAAAA,UAAS,IAC3C2B,OAAEA,EAAA1B,UAAQA,GAAcoC,IAiDxB6F,EAAoB,CAACC,EAAexH,KACxCoH,EAAYK,QAAcA,EAAMD,CAACA,GAAQxH,MAiB3C,aACG,MAAA,CAAIsF,UAAU,qKACbpG,SAAAxC,EAAAA,KAAC,MAAA,CAAI4I,UAAU,yCAEbpG,SAAA,CAAAxC,EAAAA,KAAC,MAAA,CAAI4I,UAAU,cACbpG,SAAA,CAAAzC,EAAAA,IAAC,MAAA,CAAI6I,UAAU,oFACbpG,SAAAzC,EAAAA,IAAC,QAAK6I,UAAU,gCAAgCpG,iBAElDzC,EAAAA,IAAC,KAAA,CAAG6I,UAAU,mDAAmDpG,SAAA,mBACjEzC,EAAAA,IAAC,IAAA,CAAE6I,UAAU,wCAAwCpG,SAAA,2CAIvDxC,EAAAA,KAAC,OAAA,CAAK4I,UAAU,sEAAsEM,SA9EvEzF,MAAOpE,IAK1B,GAJAA,EAAE8J,iBACFyB,EAAS,IAGLH,EAAS/G,WAAa+G,EAASE,gBAKnC,GAAIF,EAAS/G,SAASK,OAAS,EAC7B6G,EAAS,oDAIX,GAAsB,iBAAlBH,EAASlK,MAA4BkK,EAAS9J,WAKlD,GAAsB,mBAAlB8J,EAASlK,MAA6D,IAAhCkK,EAAS/J,YAAYqD,OAK/D,IACE,MAAMiH,EAAyB,CAC7B1K,KAAMmK,EAASnK,KACfD,MAAOoK,EAASpK,MAChBqD,SAAU+G,EAAS/G,SACnBnD,KAAMkK,EAASlK,MAGK,iBAAlBkK,EAASlK,MAA2BkK,EAAS9J,aAC/CqK,EAAWrK,WAAa8J,EAAS9J,YAGb,mBAAlB8J,EAASlK,MAA6BkK,EAAS/J,YAAYqD,OAAS,IACtEiH,EAAWtK,YAAc+J,EAAS/J,mBAG9B4D,EAAO0G,EACf,OAASC,GACPL,EAASK,aAAejH,MAAQiH,EAAI1J,QAAU,oBAChD,MAvBEqJ,EAAS,oEALTA,EAAS,yDAVTA,EAAS,2BAyEJpI,SAAA,CAAAJ,GACCrC,EAAAA,IAAC,MAAA,CAAI6I,UAAU,uJACZpG,SAAAJ,IAKLpC,EAAAA,KAAC,MAAA,CAAI4I,UAAU,yBACbpG,SAAA,CAAAxC,OAAC,MAAA,CACCwC,SAAA,CAAAzC,MAAC,QAAA,CAAM2J,QAAQ,OAAOd,UAAU,kEAAkEpG,SAAA,cAGlGzC,EAAAA,IAAC,QAAA,CACCK,GAAG,OACHV,KAAK,OACLiK,UAAQ,EACRrG,MAAOmH,EAASnK,KAChBsJ,SAAWvK,GAAMwL,EAAkB,OAAQxL,EAAEwK,OAAOvG,OACpDsF,UAAU,2QACVkB,YAAY,mCAIf,MAAA,CACCtH,SAAA,CAAAzC,MAAC,QAAA,CAAM2J,QAAQ,QAAQd,UAAU,kEAAkEpG,SAAA,kBAGnGzC,EAAAA,IAAC,QAAA,CACCK,GAAG,QACHV,KAAK,QACLiK,UAAQ,EACRrG,MAAOmH,EAASpK,MAChBuJ,SAAWvK,GAAMwL,EAAkB,QAASxL,EAAEwK,OAAOvG,OACrDsF,UAAU,2QACVkB,YAAY,+BAIf,MAAA,CACCtH,SAAA,CAAAzC,MAAC,QAAA,CAAM2J,QAAQ,WAAWd,UAAU,kEAAkEpG,SAAA,aAGtGxC,EAAAA,KAAC,MAAA,CAAI4I,UAAU,WACbpG,SAAA,CAAAzC,EAAAA,IAAC,QAAA,CACCK,GAAG,WACHV,KAAMgJ,EAAe,OAAS,WAC9BiB,UAAQ,EACRrG,MAAOmH,EAAS/G,SAChBkG,SAAWvK,GAAMwL,EAAkB,WAAYxL,EAAEwK,OAAOvG,OACxDsF,UAAU,iRACVkB,YAAY,sBAEd/J,EAAAA,IAAC,SAAA,CACCL,KAAK,SACLsJ,QAAS,IAAML,GAAiBD,GAChCE,UAAU,kIAETpG,SAAAkG,EACC3I,MAAC,MAAA,CAAI6I,UAAU,UAAUmB,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YACjEzH,SAAAzC,EAAAA,IAAC,OAAA,CAAKmK,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGhL,EAAE,0LAGvEY,EAAAA,KAAC,MAAA,CAAI4I,UAAU,UAAUmB,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YACjEzH,SAAA,CAAAzC,EAAAA,IAAC,OAAA,CAAKmK,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGhL,EAAE,qCACrEW,EAAAA,IAAC,QAAKmK,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGhL,EAAE,8IAO9E,MAAA,CACCoD,SAAA,CAAAzC,MAAC,QAAA,CAAM2J,QAAQ,kBAAkBd,UAAU,kEAAkEpG,SAAA,qBAG7GzC,EAAAA,IAAC,QAAA,CACCK,GAAG,kBACHV,KAAK,WACLiK,UAAQ,EACRrG,MAAOmH,EAASE,gBAChBf,SAAWvK,GAAMwL,EAAkB,kBAAmBxL,EAAEwK,OAAOvG,OAC/DsF,UAAU,2QACVkB,YAAY,uCAMjB,MAAA,CACCtH,SAAA,CAAAzC,EAAAA,IAAC,QAAA,CAAM6I,UAAU,kEAAkEpG,SAAA,iBAGnFzC,EAAAA,IAAC,MAAA,CAAI6I,UAAU,YACXpG,gBAAO0I,KAAKtK,GAAiCiI,IAAKtI,GAClDP,EAAAA,KAAC,MAAA,CAAe4I,UAAU,mBACxBpG,SAAA,CAAAzC,EAAAA,IAAC,QAAA,CACCK,GAAIG,EACJb,KAAK,QACLY,KAAK,OACLgD,MAAO/C,EACP4K,QAASV,EAASlK,OAASA,EAC3BqJ,SAAWvK,GAAMwL,EAAkB,OAAQxL,EAAEwK,OAAOvG,OACpDsF,UAAU,sHACVyB,SAAmB,UAAT9J,IAEZP,EAAAA,KAAC,MAAA,CAAI4I,UAAU,OACbpG,SAAA,CAAAxC,EAAAA,KAAC,QAAA,CAAM0J,QAASnJ,EAAMqI,UAAU,0DAC7BpG,SAAA,CAAA5B,EAAiBL,GAAMO,MACd,UAATP,GAAoBR,EAAAA,IAAC,OAAA,CAAK6I,UAAU,wCAAwCpG,SAAA,6BAE9E,IAAA,CAAEoG,UAAU,2CACVpG,SAAA5B,EAAiBL,GAAMQ,mBAjBpBR,SA0BG,iBAAlBkK,EAASlK,MACRP,EAAAA,KAAC,MAAA,CACCwC,SAAA,CAAAzC,MAAC,QAAA,CAAM2J,QAAQ,aAAad,UAAU,kEAAkEpG,SAAA,oBAGxGxC,EAAAA,KAAC,MAAA,CAAI4I,UAAU,WACbpG,SAAA,CAAAxC,EAAAA,KAAC,SAAA,CACCI,GAAG,aACHkD,MAAOmH,EAAS9J,WAChBiJ,SAAWvK,GAAMwL,EAAkB,aAAcxL,EAAEwK,OAAOvG,OAC1DsF,UAAU,kPACVe,UAAQ,EAERnH,SAAA,CAAAzC,EAAAA,IAAC,SAAA,CAAOuD,MAAM,GAAGd,SAAA,yBAChB0C,EAAU2D,IAAK/C,UACb,SAAA,CAAyBxC,MAAOwC,EAAS1F,GACvCoC,SAAA,CAAAsD,EAASxF,KAAK,KAAGwF,EAASpG,KAAK,MAAIoG,EAASX,SAAS,MAD3CW,EAAS1F,QAK1BL,EAAAA,IAAC,MAAA,CAAI6I,UAAU,wEACbpG,SAAAzC,EAAAA,IAAC,OAAI6I,UAAU,2CAA2CmB,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YAClGzH,SAAAzC,EAAAA,IAAC,OAAA,CAAKmK,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGhL,EAAE,6BAO5D,mBAAlBqL,EAASlK,MACRP,EAAAA,KAAC,MAAA,CACCwC,SAAA,CAAAzC,EAAAA,IAAC,QAAA,CAAM6I,UAAU,kEAAkEpG,SAAA,+CAGnFzC,EAAAA,IAAC,MAAA,CAAI6I,UAAU,4HACZpG,SAAA0C,EAAU2D,IAAK/C,GACd9F,EAAAA,KAAC,MAAA,CAAsB4I,UAAU,oBAC/BpG,SAAA,CAAAzC,EAAAA,IAAC,QAAA,CACCK,GAAI,YAAY0F,EAAS1F,KACzBV,KAAK,WACLyL,QAASV,EAAS/J,YAAYmE,SAASiB,EAAS1F,IAChDwJ,SAAWvK,IAAM+L,OA7LJzK,EA6L4BmF,EAAS1F,GA7LjB+K,EA6LqB9L,EAAEwK,OAAOsB,aA3L/ET,EADES,EACUJ,IAAA,IACPA,EACHrK,YAAa,IAAIqK,EAAKrK,YAAaC,KAGzBoK,IAAA,IACPA,EACHrK,YAAaqK,EAAKrK,YAAY2K,OAAOjL,GAAMA,IAAOO,MATxB,IAACA,EAAoBwK,GA8LjCvC,UAAU,2HAEZ5I,EAAAA,KAAC,SAAM0J,QAAS,YAAY5D,EAAS1F,KAAMwI,UAAU,6CAClDpG,SAAA,CAAAsD,EAASxF,KACVN,EAAAA,KAAC,OAAA,CAAK4I,UAAU,wCAAwCpG,SAAA,CAAA,IAAEsD,EAASpG,KAAK,MAAIoG,EAASX,SAAS,YAVxFW,EAAS1F,UAkB3BL,EAAAA,IAAC,SAAA,CACCL,KAAK,SACL2K,SAAUzH,EACVgG,UAAU,iLAETpG,WACCxC,EAAAA,KAAAsK,EAAAA,SAAA,CACE9H,SAAA,CAAAzC,EAAAA,IAAC,MAAA,CAAI6I,UAAU,sFAA0F,yBAI3G,yBAIH,MAAA,CAAIA,UAAU,cACbpG,SAAAxC,EAAAA,KAAC,IAAA,CAAE4I,UAAU,2CAA2CpG,SAAA,CAAA,2BAC7B,IACzBzC,EAAAA,IAAC,SAAA,CACCL,KAAK,SACLsJ,QAASwB,EACT5B,UAAU,wGACXpG,SAAA,0BAQN,MAAA,CAAIoG,UAAU,uDACbpG,SAAAzC,EAAAA,IAAC,IAAA,CAAEyC","x_google_ignoreList":[0,1]}