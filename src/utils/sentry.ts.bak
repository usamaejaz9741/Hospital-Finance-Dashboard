import * as Sentry from '@sentry/react';
import { BrowserTracing } from '@sentry/tracing';
import { logger } from './logger';

/**
 * Initialize Sentry for error tracking and performance monitoring.
 * 
 * @param dsn - Sentry DSN (Data Source Name)
 * @param environment - Current environment (development, staging, production)
 */
export const initializeSentry = (
  dsn: string,
  environment: string = process.env.NODE_ENV
): void => {
  try {
    Sentry.init({
      dsn,
      environment,
      integrations: [new BrowserTracing()],
      tracesSampleRate: environment === 'production' ? 0.1 : 1.0,
      
      // Capture errors based on environment
      beforeSend(event) {
        // Only send errors in production, or if explicitly enabled in other environments
        if (environment === 'production' || process.env.ENABLE_ERROR_TRACKING) {
          return event;
        }
        return null;
      },

      // Configure performance monitoring
      tracingOptions: {
        startTransactionOnLocationChange: true,
        startTransactionOnPageLoad: true
      },
      
      // Set max breadcrumbs
      maxBreadcrumbs: 50
    });

    logger.info('Sentry initialized successfully', {
      context: 'Sentry',
      data: { environment }
    });
  } catch (error) {
    logger.error('Failed to initialize Sentry', {
      context: 'Sentry',
      data: { error }
    });
  }
};

/**
 * Capture an error with Sentry
 * 
 * @param error - Error object
 * @param context - Additional context
 */
export const captureError = (
  error: Error,
  context?: Record<string, unknown>
): void => {
  Sentry.withScope(scope => {
    if (context) {
      scope.setExtras(context);
    }
    Sentry.captureException(error);
  });
};

/**
 * Start a new Sentry transaction for performance monitoring
 * 
 * @param name - Transaction name
 * @param options - Transaction options
 */
export const startTransaction = (
  name: string,
  options?: Sentry.TransactionContext
): Sentry.Transaction => {
  return Sentry.startTransaction({
    name,
    ...options
  });
};

/**
 * Track user actions with Sentry breadcrumbs
 * 
 * @param message - Breadcrumb message
 * @param category - Breadcrumb category
 * @param data - Additional data
 */
export const addBreadcrumb = (
  message: string,
  category?: string,
  data?: Record<string, unknown>
): void => {
  Sentry.addBreadcrumb({
    message,
    category,
    data,
    level: Sentry.Severity.Info
  });
};

/**
 * Set user information for Sentry tracking
 * 
 * @param id - User ID
 * @param data - Additional user data
 */
export const setUser = (
  id: string | null,
  data?: Record<string, unknown>
): void => {
  if (id === null) {
    Sentry.setUser(null);
    return;
  }

  Sentry.setUser({
    id,
    ...data
  });
};

/**
 * Higher-order component for React error boundary with Sentry integration
 */
export const withErrorBoundary = Sentry.withErrorBoundary;

/**
 * Performance monitoring wrapper with Sentry tracing
 */
export const withProfiler = Sentry.withProfiler;